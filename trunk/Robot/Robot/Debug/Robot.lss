
Robot.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000016  00800100  00003958  000039ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003958  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000306  00800116  00800116  00003a02  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00003a04  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000097  00000000  00000000  000040d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000260  00000000  00000000  00004167  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00001f54  00000000  00000000  000043c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00004c48  00000000  00000000  0000631b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011b5  00000000  00000000  0000af63  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000701e  00000000  00000000  0000c118  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000ef0  00000000  00000000  00013138  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000032b6  00000000  00000000  00014028  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00001f61  00000000  00000000  000172de  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 00096eae  00000000  00000000  0001923f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00000a85  00000000  00000000  000b00ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000018  00000000  00000000  000b0b72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 46 00 	jmp	0x8c	; 0x8c <__ctors_end>
       4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
       c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      34:	0c 94 77 0f 	jmp	0x1eee	; 0x1eee <__vector_13>
      38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      40:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <__vector_16>
      44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      50:	0c 94 c7 13 	jmp	0x278e	; 0x278e <__vector_20>
      54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      70:	0c 94 30 14 	jmp	0x2860	; 0x2860 <__vector_28>
      74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
      88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	c0 e0       	ldi	r28, 0x00	; 0
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	e8 e5       	ldi	r30, 0x58	; 88
      a0:	f9 e3       	ldi	r31, 0x39	; 57
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a6 31       	cpi	r26, 0x16	; 22
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	14 e0       	ldi	r17, 0x04	; 4
      b4:	a6 e1       	ldi	r26, 0x16	; 22
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	ac 31       	cpi	r26, 0x1C	; 28
      be:	b1 07       	cpc	r27, r17
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 99 14 	call	0x2932	; 0x2932 <main>
      c6:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <_exit>

000000ca <__bad_interrupt>:
      ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <CtrlMarcheSequenceStop>:
		return FALSE;
	}
}			

static Boolean CtrlMarcheSequenceStop( void )
{
      ce:	1f 93       	push	r17
		/-| |-\				mid mid |  | mid mid
		/-| |-\		step 0	mid mid |  | mid mid
		/-| |-\				mid mid |  | mid mid
	*/
	//on mets les pattes aux neutre
	if( CtrlPatteDirectMove(AVANT_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	6a e5       	ldi	r22, 0x5A	; 90
      d4:	4a e5       	ldi	r20, 0x5A	; 90
      d6:	20 e0       	ldi	r18, 0x00	; 0
      d8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <CtrlPatteDirectMove>
	}
}			

static Boolean CtrlMarcheSequenceStop( void )
{
	Int8U ret = 0x00;
      dc:	11 e0       	ldi	r17, 0x01	; 1
      de:	81 30       	cpi	r24, 0x01	; 1
      e0:	09 f0       	breq	.+2      	; 0xe4 <CtrlMarcheSequenceStop+0x16>
      e2:	10 e0       	ldi	r17, 0x00	; 0
	//on mets les pattes aux neutre
	if( CtrlPatteDirectMove(AVANT_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
	{
		ret |= (1U<<0U);
	}	
	if( CtrlPatteDirectMove(MILIEU_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
      e4:	81 e0       	ldi	r24, 0x01	; 1
      e6:	6a e5       	ldi	r22, 0x5A	; 90
      e8:	4a e5       	ldi	r20, 0x5A	; 90
      ea:	20 e0       	ldi	r18, 0x00	; 0
      ec:	0e 94 ff 08 	call	0x11fe	; 0x11fe <CtrlPatteDirectMove>
      f0:	81 30       	cpi	r24, 0x01	; 1
      f2:	09 f4       	brne	.+2      	; 0xf6 <CtrlMarcheSequenceStop+0x28>
	{
		ret |= (1U<<1U);
      f4:	12 60       	ori	r17, 0x02	; 2
	}	
	if( CtrlPatteDirectMove(ARRIERE_GAUCHE	,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
      f6:	82 e0       	ldi	r24, 0x02	; 2
      f8:	6a e5       	ldi	r22, 0x5A	; 90
      fa:	4a e5       	ldi	r20, 0x5A	; 90
      fc:	20 e0       	ldi	r18, 0x00	; 0
      fe:	0e 94 ff 08 	call	0x11fe	; 0x11fe <CtrlPatteDirectMove>
     102:	81 30       	cpi	r24, 0x01	; 1
     104:	09 f4       	brne	.+2      	; 0x108 <CtrlMarcheSequenceStop+0x3a>
	{
		ret |= (1U<<2U);
     106:	14 60       	ori	r17, 0x04	; 4
	}	
	if( CtrlPatteDirectMove(AVANT_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     108:	83 e0       	ldi	r24, 0x03	; 3
     10a:	6a e5       	ldi	r22, 0x5A	; 90
     10c:	4a e5       	ldi	r20, 0x5A	; 90
     10e:	20 e0       	ldi	r18, 0x00	; 0
     110:	0e 94 ff 08 	call	0x11fe	; 0x11fe <CtrlPatteDirectMove>
     114:	81 30       	cpi	r24, 0x01	; 1
     116:	09 f4       	brne	.+2      	; 0x11a <CtrlMarcheSequenceStop+0x4c>
	{
		ret |= (1U<<3U);
     118:	18 60       	ori	r17, 0x08	; 8
	}	
	if( CtrlPatteDirectMove(MILIEU_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     11a:	84 e0       	ldi	r24, 0x04	; 4
     11c:	6a e5       	ldi	r22, 0x5A	; 90
     11e:	4a e5       	ldi	r20, 0x5A	; 90
     120:	20 e0       	ldi	r18, 0x00	; 0
     122:	0e 94 ff 08 	call	0x11fe	; 0x11fe <CtrlPatteDirectMove>
     126:	81 30       	cpi	r24, 0x01	; 1
     128:	09 f4       	brne	.+2      	; 0x12c <CtrlMarcheSequenceStop+0x5e>
	{
		ret |= (1U<<4U);
     12a:	10 61       	ori	r17, 0x10	; 16
	}	
	if( CtrlPatteDirectMove(ARRIERE_DROITE	,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     12c:	85 e0       	ldi	r24, 0x05	; 5
     12e:	6a e5       	ldi	r22, 0x5A	; 90
     130:	4a e5       	ldi	r20, 0x5A	; 90
     132:	20 e0       	ldi	r18, 0x00	; 0
     134:	0e 94 ff 08 	call	0x11fe	; 0x11fe <CtrlPatteDirectMove>
     138:	81 30       	cpi	r24, 0x01	; 1
     13a:	09 f4       	brne	.+2      	; 0x13e <CtrlMarcheSequenceStop+0x70>
	{
		ret |= (1U<<5U);
     13c:	10 62       	ori	r17, 0x20	; 32
	}	
	//quand on est arrivé a la bonne position on change de step	
	if( ret == 0x3FU )
	{
		return TRUE;
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	1f 33       	cpi	r17, 0x3F	; 63
     142:	09 f0       	breq	.+2      	; 0x146 <CtrlMarcheSequenceStop+0x78>
     144:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}	
     146:	1f 91       	pop	r17
     148:	08 95       	ret

0000014a <CtrlMarche>:
static body_member_t body;
/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////
//init
void CtrlMarche( void ) 
{
	body.move = E_MOVE_STOP;
     14a:	10 92 17 01 	sts	0x0117, r1
	body.speed = E_SERVO_VITESSE_5;
     14e:	10 92 18 01 	sts	0x0118, r1
	//on ajoute les pattes
	CtrlPatte();
     152:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <CtrlPatte>
	//on nenvoie la sequence d'arret
	CtrlMarcheSequenceStop();
     156:	0e 94 67 00 	call	0xce	; 0xce <CtrlMarcheSequenceStop>
}
     15a:	08 95       	ret

0000015c <CtrlMarcheDispatcher>:

//dispatcher
void CtrlMarcheDispatcher( Event_t event )  
{
     15c:	1f 93       	push	r17
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	ec 01       	movw	r28, r24
	if ( DrvEventTestEvent(event, CONF_EVENT_TIMER_100MS ))
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DrvEventTestEvent>
     16a:	88 23       	and	r24, r24
     16c:	09 f4       	brne	.+2      	; 0x170 <CtrlMarcheDispatcher+0x14>
     16e:	28 c7       	rjmp	.+3664   	; 0xfc0 <CtrlMarcheDispatcher+0xe64>


//on lance les sequence de mouvements du robot
static void CtrlMarcheSequence( void )
{
	if( body.move == E_MOVE_STOP )
     170:	80 91 17 01 	lds	r24, 0x0117
     174:	88 23       	and	r24, r24
     176:	89 f4       	brne	.+34     	; 0x19a <CtrlMarcheDispatcher+0x3e>
	{
		//on attend que la sequence soit terminer pour ne plus l'entretenir
		if(body.move != old_move)
     178:	80 91 00 01 	lds	r24, 0x0100
     17c:	88 23       	and	r24, r24
     17e:	09 f4       	brne	.+2      	; 0x182 <CtrlMarcheDispatcher+0x26>
     180:	1d c7       	rjmp	.+3642   	; 0xfbc <CtrlMarcheDispatcher+0xe60>
		{
			if( TRUE == CtrlMarcheSequenceStop())
     182:	0e 94 67 00 	call	0xce	; 0xce <CtrlMarcheSequenceStop>
     186:	81 30       	cpi	r24, 0x01	; 1
     188:	09 f0       	breq	.+2      	; 0x18c <CtrlMarcheDispatcher+0x30>
     18a:	14 c7       	rjmp	.+3624   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			{
				old_move = body.move;
     18c:	80 91 17 01 	lds	r24, 0x0117
     190:	80 93 00 01 	sts	0x0100, r24
				DrvServoSendUartPosition();
     194:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     198:	0d c7       	rjmp	.+3610   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			}
		}		
	}			
	else if( body.move == E_MOVE_SIT_DOWN )
     19a:	85 30       	cpi	r24, 0x05	; 5
     19c:	09 f0       	breq	.+2      	; 0x1a0 <CtrlMarcheDispatcher+0x44>
     19e:	46 c0       	rjmp	.+140    	; 0x22c <CtrlMarcheDispatcher+0xd0>
	{
		//on attend que la sequence soit terminer pour ne plus l'entretenir
		if(body.move != old_move)
     1a0:	80 91 00 01 	lds	r24, 0x0100
     1a4:	85 30       	cpi	r24, 0x05	; 5
     1a6:	09 f4       	brne	.+2      	; 0x1aa <CtrlMarcheDispatcher+0x4e>
     1a8:	0b c7       	rjmp	.+3606   	; 0xfc0 <CtrlMarcheDispatcher+0xe64>
	/*
		-/-| |-\-			max mid |  | mid min
		-/-| |-\-	step 0	max mid |  | mid min
		-/-| |-\-			max mid |  | mid min
	*/
	if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MAX_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     1aa:	80 e0       	ldi	r24, 0x00	; 0
     1ac:	6a e5       	ldi	r22, 0x5A	; 90
     1ae:	42 e3       	ldi	r20, 0x32	; 50
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}			

static Boolean CtrlMarcheSequenceSitDown( void )
{
	Int8U ret = 0x00;
     1b6:	11 e0       	ldi	r17, 0x01	; 1
     1b8:	81 30       	cpi	r24, 0x01	; 1
     1ba:	09 f0       	breq	.+2      	; 0x1be <CtrlMarcheDispatcher+0x62>
     1bc:	10 e0       	ldi	r17, 0x00	; 0
	*/
	if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MAX_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
	{
		ret |= (1U<<0U);
	}	
	if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MAX_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     1be:	81 e0       	ldi	r24, 0x01	; 1
     1c0:	6a e5       	ldi	r22, 0x5A	; 90
     1c2:	42 e3       	ldi	r20, 0x32	; 50
     1c4:	20 e0       	ldi	r18, 0x00	; 0
     1c6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     1ca:	81 30       	cpi	r24, 0x01	; 1
     1cc:	09 f4       	brne	.+2      	; 0x1d0 <CtrlMarcheDispatcher+0x74>
	{
		ret |= (1U<<1U);
     1ce:	12 60       	ori	r17, 0x02	; 2
	}	
	if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MID_EPAULE	,	ANGLE_MAX_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     1d0:	82 e0       	ldi	r24, 0x02	; 2
     1d2:	6a e5       	ldi	r22, 0x5A	; 90
     1d4:	42 e3       	ldi	r20, 0x32	; 50
     1d6:	20 e0       	ldi	r18, 0x00	; 0
     1d8:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     1dc:	81 30       	cpi	r24, 0x01	; 1
     1de:	09 f4       	brne	.+2      	; 0x1e2 <CtrlMarcheDispatcher+0x86>
	{
		ret |= (1U<<2U);
     1e0:	14 60       	ori	r17, 0x04	; 4
	}	
	if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MIN_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     1e2:	83 e0       	ldi	r24, 0x03	; 3
     1e4:	6a e5       	ldi	r22, 0x5A	; 90
     1e6:	42 e8       	ldi	r20, 0x82	; 130
     1e8:	20 e0       	ldi	r18, 0x00	; 0
     1ea:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     1ee:	81 30       	cpi	r24, 0x01	; 1
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <CtrlMarcheDispatcher+0x98>
	{
		ret |= (1U<<3U);
     1f2:	18 60       	ori	r17, 0x08	; 8
	}	
	if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MIN_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     1f4:	84 e0       	ldi	r24, 0x04	; 4
     1f6:	6a e5       	ldi	r22, 0x5A	; 90
     1f8:	42 e8       	ldi	r20, 0x82	; 130
     1fa:	20 e0       	ldi	r18, 0x00	; 0
     1fc:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     200:	81 30       	cpi	r24, 0x01	; 1
     202:	09 f4       	brne	.+2      	; 0x206 <CtrlMarcheDispatcher+0xaa>
	{
		ret |= (1U<<4U);
     204:	10 61       	ori	r17, 0x10	; 16
	}	
	if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MID_EPAULE	,	ANGLE_MIN_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     206:	85 e0       	ldi	r24, 0x05	; 5
     208:	6a e5       	ldi	r22, 0x5A	; 90
     20a:	42 e8       	ldi	r20, 0x82	; 130
     20c:	20 e0       	ldi	r18, 0x00	; 0
     20e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     212:	81 30       	cpi	r24, 0x01	; 1
     214:	09 f4       	brne	.+2      	; 0x218 <CtrlMarcheDispatcher+0xbc>
	{
		ret |= (1U<<5U);
     216:	10 62       	ori	r17, 0x20	; 32
	else if( body.move == E_MOVE_SIT_DOWN )
	{
		//on attend que la sequence soit terminer pour ne plus l'entretenir
		if(body.move != old_move)
		{
			if( TRUE == CtrlMarcheSequenceSitDown())
     218:	1f 33       	cpi	r17, 0x3F	; 63
     21a:	09 f0       	breq	.+2      	; 0x21e <CtrlMarcheDispatcher+0xc2>
     21c:	cb c6       	rjmp	.+3478   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			{
				old_move = body.move;
     21e:	80 91 17 01 	lds	r24, 0x0117
     222:	80 93 00 01 	sts	0x0100, r24
				DrvServoSendUartPosition();
     226:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     22a:	c4 c6       	rjmp	.+3464   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			}
		}
	}			
	else if( body.move == E_MOVE_STAR )
     22c:	86 30       	cpi	r24, 0x06	; 6
     22e:	09 f0       	breq	.+2      	; 0x232 <CtrlMarcheDispatcher+0xd6>
     230:	46 c0       	rjmp	.+140    	; 0x2be <CtrlMarcheDispatcher+0x162>
	{
		//on attend que la sequence soit terminer pour ne plus l'entretenir
		if(body.move != old_move)
     232:	80 91 00 01 	lds	r24, 0x0100
     236:	86 30       	cpi	r24, 0x06	; 6
     238:	09 f4       	brne	.+2      	; 0x23c <CtrlMarcheDispatcher+0xe0>
     23a:	c2 c6       	rjmp	.+3460   	; 0xfc0 <CtrlMarcheDispatcher+0xe64>
	/*
		-\| |/-			mid min |  | max mid
		--| |--	step 0	mid mid |  | mid mid
		-/| |\-			mid max |  | min mid
	*/
	if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     23c:	80 e0       	ldi	r24, 0x00	; 0
     23e:	6e e6       	ldi	r22, 0x6E	; 110
     240:	4a e5       	ldi	r20, 0x5A	; 90
     242:	20 e0       	ldi	r18, 0x00	; 0
     244:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
}


static Boolean CtrlMarcheSequenceStar( void )
{
	Int8U ret = 0x00;
     248:	11 e0       	ldi	r17, 0x01	; 1
     24a:	81 30       	cpi	r24, 0x01	; 1
     24c:	09 f0       	breq	.+2      	; 0x250 <CtrlMarcheDispatcher+0xf4>
     24e:	10 e0       	ldi	r17, 0x00	; 0
	*/
	if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
	{
		ret |= (1U<<0U);
	}	
	if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     250:	81 e0       	ldi	r24, 0x01	; 1
     252:	6a e5       	ldi	r22, 0x5A	; 90
     254:	4a e5       	ldi	r20, 0x5A	; 90
     256:	20 e0       	ldi	r18, 0x00	; 0
     258:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	09 f4       	brne	.+2      	; 0x262 <CtrlMarcheDispatcher+0x106>
	{
		ret |= (1U<<1U);
     260:	12 60       	ori	r17, 0x02	; 2
	}	
	if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	66 e4       	ldi	r22, 0x46	; 70
     266:	4a e5       	ldi	r20, 0x5A	; 90
     268:	20 e0       	ldi	r18, 0x00	; 0
     26a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     26e:	81 30       	cpi	r24, 0x01	; 1
     270:	09 f4       	brne	.+2      	; 0x274 <CtrlMarcheDispatcher+0x118>
	{
		ret |= (1U<<2U);
     272:	14 60       	ori	r17, 0x04	; 4
	}	
	if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	66 e4       	ldi	r22, 0x46	; 70
     278:	4a e5       	ldi	r20, 0x5A	; 90
     27a:	20 e0       	ldi	r18, 0x00	; 0
     27c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     280:	81 30       	cpi	r24, 0x01	; 1
     282:	09 f4       	brne	.+2      	; 0x286 <CtrlMarcheDispatcher+0x12a>
	{
		ret |= (1U<<3U);
     284:	18 60       	ori	r17, 0x08	; 8
	}	
	if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     286:	84 e0       	ldi	r24, 0x04	; 4
     288:	6a e5       	ldi	r22, 0x5A	; 90
     28a:	4a e5       	ldi	r20, 0x5A	; 90
     28c:	20 e0       	ldi	r18, 0x00	; 0
     28e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     292:	81 30       	cpi	r24, 0x01	; 1
     294:	09 f4       	brne	.+2      	; 0x298 <CtrlMarcheDispatcher+0x13c>
	{
		ret |= (1U<<4U);
     296:	10 61       	ori	r17, 0x10	; 16
	}	
	if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	E_SERVO_VITESSE_5 ) == TRUE )
     298:	85 e0       	ldi	r24, 0x05	; 5
     29a:	6e e6       	ldi	r22, 0x6E	; 110
     29c:	4a e5       	ldi	r20, 0x5A	; 90
     29e:	20 e0       	ldi	r18, 0x00	; 0
     2a0:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     2a4:	81 30       	cpi	r24, 0x01	; 1
     2a6:	09 f4       	brne	.+2      	; 0x2aa <CtrlMarcheDispatcher+0x14e>
	{
		ret |= (1U<<5U);
     2a8:	10 62       	ori	r17, 0x20	; 32
	else if( body.move == E_MOVE_STAR )
	{
		//on attend que la sequence soit terminer pour ne plus l'entretenir
		if(body.move != old_move)
		{
			if( TRUE == CtrlMarcheSequenceStar())
     2aa:	1f 33       	cpi	r17, 0x3F	; 63
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <CtrlMarcheDispatcher+0x154>
     2ae:	82 c6       	rjmp	.+3332   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			{
				old_move = body.move;
     2b0:	80 91 17 01 	lds	r24, 0x0117
     2b4:	80 93 00 01 	sts	0x0100, r24
				DrvServoSendUartPosition();
     2b8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     2bc:	7b c6       	rjmp	.+3318   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			}
		}
	}
	else if( body.move == E_MOVE_FORWARD )	
     2be:	81 30       	cpi	r24, 0x01	; 1
     2c0:	09 f0       	breq	.+2      	; 0x2c4 <CtrlMarcheDispatcher+0x168>
     2c2:	79 c1       	rjmp	.+754    	; 0x5b6 <CtrlMarcheDispatcher+0x45a>
	{
		//on passe par la sequence de stop avant d'enchainer sur le mouvement
		if( old_move != E_MOVE_FORWARD )
     2c4:	80 91 00 01 	lds	r24, 0x0100
     2c8:	81 30       	cpi	r24, 0x01	; 1
     2ca:	61 f0       	breq	.+24     	; 0x2e4 <CtrlMarcheDispatcher+0x188>
		{
			if( TRUE == CtrlMarcheSequenceStop())
     2cc:	0e 94 67 00 	call	0xce	; 0xce <CtrlMarcheSequenceStop>
     2d0:	81 30       	cpi	r24, 0x01	; 1
     2d2:	09 f0       	breq	.+2      	; 0x2d6 <CtrlMarcheDispatcher+0x17a>
     2d4:	6f c6       	rjmp	.+3294   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			{
				old_move = body.move;
     2d6:	80 91 17 01 	lds	r24, 0x0117
     2da:	80 93 00 01 	sts	0x0100, r24
				DrvServoSendUartPosition();
     2de:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     2e2:	68 c6       	rjmp	.+3280   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
}

static void CtrlMarcheSequenceForward( void )
{
	Int8U ret = 0x00;
	if(step == 0)
     2e4:	80 91 16 01 	lds	r24, 0x0116
     2e8:	88 23       	and	r24, r24
     2ea:	09 f0       	breq	.+2      	; 0x2ee <CtrlMarcheDispatcher+0x192>
     2ec:	43 c0       	rjmp	.+134    	; 0x374 <CtrlMarcheDispatcher+0x218>
		/*
			/-| |-/				mid mid |  | mid max
			\-| |-\		step 0	min mid |  | mid mid
			/-| |-/				mid mid |  | mid max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     2ee:	6a e5       	ldi	r22, 0x5A	; 90
     2f0:	4a e5       	ldi	r20, 0x5A	; 90
     2f2:	20 91 18 01 	lds	r18, 0x0118
     2f6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}

static void CtrlMarcheSequenceForward( void )
{
	Int8U ret = 0x00;
     2fa:	11 e0       	ldi	r17, 0x01	; 1
     2fc:	81 30       	cpi	r24, 0x01	; 1
     2fe:	09 f0       	breq	.+2      	; 0x302 <CtrlMarcheDispatcher+0x1a6>
     300:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MIN_COUDE,	body.speed ) == TRUE )
     302:	81 e0       	ldi	r24, 0x01	; 1
     304:	6a e5       	ldi	r22, 0x5A	; 90
     306:	42 e8       	ldi	r20, 0x82	; 130
     308:	20 91 18 01 	lds	r18, 0x0118
     30c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     310:	81 30       	cpi	r24, 0x01	; 1
     312:	09 f4       	brne	.+2      	; 0x316 <CtrlMarcheDispatcher+0x1ba>
		{
			ret |= (1U<<1U);
     314:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     316:	82 e0       	ldi	r24, 0x02	; 2
     318:	6a e5       	ldi	r22, 0x5A	; 90
     31a:	4a e5       	ldi	r20, 0x5A	; 90
     31c:	20 91 18 01 	lds	r18, 0x0118
     320:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     324:	81 30       	cpi	r24, 0x01	; 1
     326:	09 f4       	brne	.+2      	; 0x32a <CtrlMarcheDispatcher+0x1ce>
		{
			ret |= (1U<<2U);
     328:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     32a:	83 e0       	ldi	r24, 0x03	; 3
     32c:	6a e5       	ldi	r22, 0x5A	; 90
     32e:	42 e3       	ldi	r20, 0x32	; 50
     330:	20 91 18 01 	lds	r18, 0x0118
     334:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     338:	81 30       	cpi	r24, 0x01	; 1
     33a:	09 f4       	brne	.+2      	; 0x33e <CtrlMarcheDispatcher+0x1e2>
		{
			ret |= (1U<<3U);
     33c:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     33e:	84 e0       	ldi	r24, 0x04	; 4
     340:	6a e5       	ldi	r22, 0x5A	; 90
     342:	4a e5       	ldi	r20, 0x5A	; 90
     344:	20 91 18 01 	lds	r18, 0x0118
     348:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     34c:	81 30       	cpi	r24, 0x01	; 1
     34e:	09 f4       	brne	.+2      	; 0x352 <CtrlMarcheDispatcher+0x1f6>
		{
			ret |= (1U<<4U);
     350:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MID_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     352:	85 e0       	ldi	r24, 0x05	; 5
     354:	6a e5       	ldi	r22, 0x5A	; 90
     356:	42 e3       	ldi	r20, 0x32	; 50
     358:	20 91 18 01 	lds	r18, 0x0118
     35c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     360:	81 30       	cpi	r24, 0x01	; 1
     362:	09 f4       	brne	.+2      	; 0x366 <CtrlMarcheDispatcher+0x20a>
		{
			ret |= (1U<<5U);
     364:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     366:	1f 33       	cpi	r17, 0x3F	; 63
     368:	09 f0       	breq	.+2      	; 0x36c <CtrlMarcheDispatcher+0x210>
     36a:	1e c1       	rjmp	.+572    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		{
			step = 1U;
     36c:	81 e0       	ldi	r24, 0x01	; 1
     36e:	80 93 16 01 	sts	0x0116, r24
     372:	1a c1       	rjmp	.+564    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		}
	}
	else if(step == 1U)
     374:	81 30       	cpi	r24, 0x01	; 1
     376:	09 f0       	breq	.+2      	; 0x37a <CtrlMarcheDispatcher+0x21e>
     378:	44 c0       	rjmp	.+136    	; 0x402 <CtrlMarcheDispatcher+0x2a6>
		/*
			//| |//				mid max |  | max max
			\\| |\\		step 4	min min |  | min mid
			//| |//				mid max |  | max max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     37a:	80 e0       	ldi	r24, 0x00	; 0
     37c:	66 e4       	ldi	r22, 0x46	; 70
     37e:	4a e5       	ldi	r20, 0x5A	; 90
     380:	20 91 18 01 	lds	r18, 0x0118
     384:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}

static void CtrlMarcheSequenceForward( void )
{
	Int8U ret = 0x00;
     388:	11 e0       	ldi	r17, 0x01	; 1
     38a:	81 30       	cpi	r24, 0x01	; 1
     38c:	09 f0       	breq	.+2      	; 0x390 <CtrlMarcheDispatcher+0x234>
     38e:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     390:	81 e0       	ldi	r24, 0x01	; 1
     392:	6e e6       	ldi	r22, 0x6E	; 110
     394:	42 e8       	ldi	r20, 0x82	; 130
     396:	20 91 18 01 	lds	r18, 0x0118
     39a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     39e:	81 30       	cpi	r24, 0x01	; 1
     3a0:	09 f4       	brne	.+2      	; 0x3a4 <CtrlMarcheDispatcher+0x248>
		{
			ret |= (1U<<1U);
     3a2:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     3a4:	82 e0       	ldi	r24, 0x02	; 2
     3a6:	66 e4       	ldi	r22, 0x46	; 70
     3a8:	4a e5       	ldi	r20, 0x5A	; 90
     3aa:	20 91 18 01 	lds	r18, 0x0118
     3ae:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <CtrlMarcheDispatcher+0x25c>
		{
			ret |= (1U<<2U);
     3b6:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     3b8:	83 e0       	ldi	r24, 0x03	; 3
     3ba:	66 e4       	ldi	r22, 0x46	; 70
     3bc:	42 e3       	ldi	r20, 0x32	; 50
     3be:	20 91 18 01 	lds	r18, 0x0118
     3c2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     3c6:	81 30       	cpi	r24, 0x01	; 1
     3c8:	09 f4       	brne	.+2      	; 0x3cc <CtrlMarcheDispatcher+0x270>
		{
			ret |= (1U<<3U);
     3ca:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     3cc:	84 e0       	ldi	r24, 0x04	; 4
     3ce:	6e e6       	ldi	r22, 0x6E	; 110
     3d0:	4a e5       	ldi	r20, 0x5A	; 90
     3d2:	20 91 18 01 	lds	r18, 0x0118
     3d6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     3da:	81 30       	cpi	r24, 0x01	; 1
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <CtrlMarcheDispatcher+0x284>
		{
			ret |= (1U<<4U);
     3de:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     3e0:	85 e0       	ldi	r24, 0x05	; 5
     3e2:	66 e4       	ldi	r22, 0x46	; 70
     3e4:	42 e3       	ldi	r20, 0x32	; 50
     3e6:	20 91 18 01 	lds	r18, 0x0118
     3ea:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     3ee:	81 30       	cpi	r24, 0x01	; 1
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <CtrlMarcheDispatcher+0x298>
		{
			ret |= (1U<<5U);
     3f2:	10 62       	ori	r17, 0x20	; 32
		}		
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     3f4:	1f 33       	cpi	r17, 0x3F	; 63
     3f6:	09 f0       	breq	.+2      	; 0x3fa <CtrlMarcheDispatcher+0x29e>
     3f8:	d7 c0       	rjmp	.+430    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		{
			step = 2U;
     3fa:	82 e0       	ldi	r24, 0x02	; 2
     3fc:	80 93 16 01 	sts	0x0116, r24
     400:	d3 c0       	rjmp	.+422    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		}
	}
	else if(step == 2U)
     402:	82 30       	cpi	r24, 0x02	; 2
     404:	09 f0       	breq	.+2      	; 0x408 <CtrlMarcheDispatcher+0x2ac>
     406:	44 c0       	rjmp	.+136    	; 0x490 <CtrlMarcheDispatcher+0x334>
		/*
			\/| |/\				min max |  | max mid
			/\| |\/		step 2	mid min |  | min max
			\/| |/\				min max |  | max mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     408:	80 e0       	ldi	r24, 0x00	; 0
     40a:	66 e4       	ldi	r22, 0x46	; 70
     40c:	42 e8       	ldi	r20, 0x82	; 130
     40e:	20 91 18 01 	lds	r18, 0x0118
     412:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}

static void CtrlMarcheSequenceForward( void )
{
	Int8U ret = 0x00;
     416:	11 e0       	ldi	r17, 0x01	; 1
     418:	81 30       	cpi	r24, 0x01	; 1
     41a:	09 f0       	breq	.+2      	; 0x41e <CtrlMarcheDispatcher+0x2c2>
     41c:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     41e:	81 e0       	ldi	r24, 0x01	; 1
     420:	6e e6       	ldi	r22, 0x6E	; 110
     422:	4a e5       	ldi	r20, 0x5A	; 90
     424:	20 91 18 01 	lds	r18, 0x0118
     428:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     42c:	81 30       	cpi	r24, 0x01	; 1
     42e:	09 f4       	brne	.+2      	; 0x432 <CtrlMarcheDispatcher+0x2d6>
		{
			ret |= (1U<<1U);
     430:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     432:	82 e0       	ldi	r24, 0x02	; 2
     434:	66 e4       	ldi	r22, 0x46	; 70
     436:	42 e8       	ldi	r20, 0x82	; 130
     438:	20 91 18 01 	lds	r18, 0x0118
     43c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     440:	81 30       	cpi	r24, 0x01	; 1
     442:	09 f4       	brne	.+2      	; 0x446 <CtrlMarcheDispatcher+0x2ea>
		{
			ret |= (1U<<2U);
     444:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     446:	83 e0       	ldi	r24, 0x03	; 3
     448:	66 e4       	ldi	r22, 0x46	; 70
     44a:	4a e5       	ldi	r20, 0x5A	; 90
     44c:	20 91 18 01 	lds	r18, 0x0118
     450:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     454:	81 30       	cpi	r24, 0x01	; 1
     456:	09 f4       	brne	.+2      	; 0x45a <CtrlMarcheDispatcher+0x2fe>
		{
			ret |= (1U<<3U);
     458:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     45a:	84 e0       	ldi	r24, 0x04	; 4
     45c:	6e e6       	ldi	r22, 0x6E	; 110
     45e:	42 e3       	ldi	r20, 0x32	; 50
     460:	20 91 18 01 	lds	r18, 0x0118
     464:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     468:	81 30       	cpi	r24, 0x01	; 1
     46a:	09 f4       	brne	.+2      	; 0x46e <CtrlMarcheDispatcher+0x312>
		{
			ret |= (1U<<4U);
     46c:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     46e:	85 e0       	ldi	r24, 0x05	; 5
     470:	66 e4       	ldi	r22, 0x46	; 70
     472:	4a e5       	ldi	r20, 0x5A	; 90
     474:	20 91 18 01 	lds	r18, 0x0118
     478:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     47c:	81 30       	cpi	r24, 0x01	; 1
     47e:	09 f4       	brne	.+2      	; 0x482 <CtrlMarcheDispatcher+0x326>
		{
			ret |= (1U<<5U);
     480:	10 62       	ori	r17, 0x20	; 32
		}		
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     482:	1f 33       	cpi	r17, 0x3F	; 63
     484:	09 f0       	breq	.+2      	; 0x488 <CtrlMarcheDispatcher+0x32c>
     486:	90 c0       	rjmp	.+288    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		{
			step = 3U;
     488:	83 e0       	ldi	r24, 0x03	; 3
     48a:	80 93 16 01 	sts	0x0116, r24
     48e:	8c c0       	rjmp	.+280    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		}
	}
	else if(step == 3U)
     490:	83 30       	cpi	r24, 0x03	; 3
     492:	09 f0       	breq	.+2      	; 0x496 <CtrlMarcheDispatcher+0x33a>
     494:	44 c0       	rjmp	.+136    	; 0x51e <CtrlMarcheDispatcher+0x3c2>
		/*
			\\| |\\				min min |  | min mid
			//| |//		step 3	mid max |  | max max
			\\| |\\				min min |  | min mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	6e e6       	ldi	r22, 0x6E	; 110
     49a:	42 e8       	ldi	r20, 0x82	; 130
     49c:	20 91 18 01 	lds	r18, 0x0118
     4a0:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}

static void CtrlMarcheSequenceForward( void )
{
	Int8U ret = 0x00;
     4a4:	11 e0       	ldi	r17, 0x01	; 1
     4a6:	81 30       	cpi	r24, 0x01	; 1
     4a8:	09 f0       	breq	.+2      	; 0x4ac <CtrlMarcheDispatcher+0x350>
     4aa:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     4ac:	81 e0       	ldi	r24, 0x01	; 1
     4ae:	66 e4       	ldi	r22, 0x46	; 70
     4b0:	4a e5       	ldi	r20, 0x5A	; 90
     4b2:	20 91 18 01 	lds	r18, 0x0118
     4b6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     4ba:	81 30       	cpi	r24, 0x01	; 1
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <CtrlMarcheDispatcher+0x364>
		{
			ret |= (1U<<1U);
     4be:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     4c0:	82 e0       	ldi	r24, 0x02	; 2
     4c2:	6e e6       	ldi	r22, 0x6E	; 110
     4c4:	42 e8       	ldi	r20, 0x82	; 130
     4c6:	20 91 18 01 	lds	r18, 0x0118
     4ca:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     4ce:	81 30       	cpi	r24, 0x01	; 1
     4d0:	09 f4       	brne	.+2      	; 0x4d4 <CtrlMarcheDispatcher+0x378>
		{
			ret |= (1U<<2U);
     4d2:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     4d4:	83 e0       	ldi	r24, 0x03	; 3
     4d6:	6e e6       	ldi	r22, 0x6E	; 110
     4d8:	4a e5       	ldi	r20, 0x5A	; 90
     4da:	20 91 18 01 	lds	r18, 0x0118
     4de:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     4e2:	81 30       	cpi	r24, 0x01	; 1
     4e4:	09 f4       	brne	.+2      	; 0x4e8 <CtrlMarcheDispatcher+0x38c>
		{
			ret |= (1U<<3U);
     4e6:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     4e8:	84 e0       	ldi	r24, 0x04	; 4
     4ea:	66 e4       	ldi	r22, 0x46	; 70
     4ec:	42 e3       	ldi	r20, 0x32	; 50
     4ee:	20 91 18 01 	lds	r18, 0x0118
     4f2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     4f6:	81 30       	cpi	r24, 0x01	; 1
     4f8:	09 f4       	brne	.+2      	; 0x4fc <CtrlMarcheDispatcher+0x3a0>
		{
			ret |= (1U<<4U);
     4fa:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     4fc:	85 e0       	ldi	r24, 0x05	; 5
     4fe:	6e e6       	ldi	r22, 0x6E	; 110
     500:	4a e5       	ldi	r20, 0x5A	; 90
     502:	20 91 18 01 	lds	r18, 0x0118
     506:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     50a:	81 30       	cpi	r24, 0x01	; 1
     50c:	09 f4       	brne	.+2      	; 0x510 <CtrlMarcheDispatcher+0x3b4>
		{
			ret |= (1U<<5U);
     50e:	10 62       	ori	r17, 0x20	; 32
		}		
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     510:	1f 33       	cpi	r17, 0x3F	; 63
     512:	09 f0       	breq	.+2      	; 0x516 <CtrlMarcheDispatcher+0x3ba>
     514:	49 c0       	rjmp	.+146    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		{
			step = 4U;
     516:	84 e0       	ldi	r24, 0x04	; 4
     518:	80 93 16 01 	sts	0x0116, r24
     51c:	45 c0       	rjmp	.+138    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		}
	}
	else if(step == 4U)
     51e:	84 30       	cpi	r24, 0x04	; 4
     520:	09 f0       	breq	.+2      	; 0x524 <CtrlMarcheDispatcher+0x3c8>
     522:	42 c0       	rjmp	.+132    	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		/*
			/\| |\/				mid min |  | min max
			\/| |/\		step 4	min max |  | max mid
			/\| |\/				mid min |  | min max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	6e e6       	ldi	r22, 0x6E	; 110
     528:	4a e5       	ldi	r20, 0x5A	; 90
     52a:	20 91 18 01 	lds	r18, 0x0118
     52e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}

static void CtrlMarcheSequenceForward( void )
{
	Int8U ret = 0x00;
     532:	11 e0       	ldi	r17, 0x01	; 1
     534:	81 30       	cpi	r24, 0x01	; 1
     536:	09 f0       	breq	.+2      	; 0x53a <CtrlMarcheDispatcher+0x3de>
     538:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	66 e4       	ldi	r22, 0x46	; 70
     53e:	42 e8       	ldi	r20, 0x82	; 130
     540:	20 91 18 01 	lds	r18, 0x0118
     544:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     548:	81 30       	cpi	r24, 0x01	; 1
     54a:	09 f4       	brne	.+2      	; 0x54e <CtrlMarcheDispatcher+0x3f2>
		{
			ret |= (1U<<1U);
     54c:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     54e:	82 e0       	ldi	r24, 0x02	; 2
     550:	6e e6       	ldi	r22, 0x6E	; 110
     552:	4a e5       	ldi	r20, 0x5A	; 90
     554:	20 91 18 01 	lds	r18, 0x0118
     558:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     55c:	81 30       	cpi	r24, 0x01	; 1
     55e:	09 f4       	brne	.+2      	; 0x562 <CtrlMarcheDispatcher+0x406>
		{
			ret |= (1U<<2U);
     560:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     562:	83 e0       	ldi	r24, 0x03	; 3
     564:	6e e6       	ldi	r22, 0x6E	; 110
     566:	42 e3       	ldi	r20, 0x32	; 50
     568:	20 91 18 01 	lds	r18, 0x0118
     56c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	09 f4       	brne	.+2      	; 0x576 <CtrlMarcheDispatcher+0x41a>
		{
			ret |= (1U<<3U);
     574:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     576:	84 e0       	ldi	r24, 0x04	; 4
     578:	66 e4       	ldi	r22, 0x46	; 70
     57a:	4a e5       	ldi	r20, 0x5A	; 90
     57c:	20 91 18 01 	lds	r18, 0x0118
     580:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     584:	81 30       	cpi	r24, 0x01	; 1
     586:	09 f4       	brne	.+2      	; 0x58a <CtrlMarcheDispatcher+0x42e>
		{
			ret |= (1U<<4U);
     588:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     58a:	85 e0       	ldi	r24, 0x05	; 5
     58c:	6e e6       	ldi	r22, 0x6E	; 110
     58e:	42 e3       	ldi	r20, 0x32	; 50
     590:	20 91 18 01 	lds	r18, 0x0118
     594:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	09 f4       	brne	.+2      	; 0x59e <CtrlMarcheDispatcher+0x442>
		{
			ret |= (1U<<5U);
     59c:	10 62       	ori	r17, 0x20	; 32
		}		
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     59e:	1f 33       	cpi	r17, 0x3F	; 63
     5a0:	19 f4       	brne	.+6      	; 0x5a8 <CtrlMarcheDispatcher+0x44c>
		{
			step = 1U;
     5a2:	81 e0       	ldi	r24, 0x01	; 1
     5a4:	80 93 16 01 	sts	0x0116, r24
			}
		}
		else
		{
			CtrlMarcheSequenceForward();
			old_move = body.move;
     5a8:	80 91 17 01 	lds	r24, 0x0117
     5ac:	80 93 00 01 	sts	0x0100, r24
			DrvServoSendUartPosition();
     5b0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     5b4:	ff c4       	rjmp	.+2558   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
		}
	}
	else if( body.move == E_MOVE_BACKWARD )
     5b6:	82 30       	cpi	r24, 0x02	; 2
     5b8:	09 f0       	breq	.+2      	; 0x5bc <CtrlMarcheDispatcher+0x460>
     5ba:	79 c1       	rjmp	.+754    	; 0x8ae <CtrlMarcheDispatcher+0x752>
	{
		//on passe par la sequence de stop avant d'enchainer sur le mouvement
		if( old_move != E_MOVE_BACKWARD )
     5bc:	80 91 00 01 	lds	r24, 0x0100
     5c0:	82 30       	cpi	r24, 0x02	; 2
     5c2:	61 f0       	breq	.+24     	; 0x5dc <CtrlMarcheDispatcher+0x480>
		{
			if( TRUE == CtrlMarcheSequenceStop())
     5c4:	0e 94 67 00 	call	0xce	; 0xce <CtrlMarcheSequenceStop>
     5c8:	81 30       	cpi	r24, 0x01	; 1
     5ca:	09 f0       	breq	.+2      	; 0x5ce <CtrlMarcheDispatcher+0x472>
     5cc:	f3 c4       	rjmp	.+2534   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			{
				old_move = body.move;
     5ce:	80 91 17 01 	lds	r24, 0x0117
     5d2:	80 93 00 01 	sts	0x0100, r24
				DrvServoSendUartPosition();
     5d6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     5da:	ec c4       	rjmp	.+2520   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
}	

static void CtrlMarcheSequenceBackward( void ) 
{
	Int8U ret = 0x00;
	if(step == 0)
     5dc:	80 91 16 01 	lds	r24, 0x0116
     5e0:	88 23       	and	r24, r24
     5e2:	09 f0       	breq	.+2      	; 0x5e6 <CtrlMarcheDispatcher+0x48a>
     5e4:	43 c0       	rjmp	.+134    	; 0x66c <CtrlMarcheDispatcher+0x510>
		/*
			/-| |-/				mid mid |  | mid max
			\-| |-\		step 0	min mid |  | mid mid
			/-| |-/				mid mid |  | mid max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     5e6:	6a e5       	ldi	r22, 0x5A	; 90
     5e8:	4a e5       	ldi	r20, 0x5A	; 90
     5ea:	20 91 18 01 	lds	r18, 0x0118
     5ee:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceBackward( void ) 
{
	Int8U ret = 0x00;
     5f2:	11 e0       	ldi	r17, 0x01	; 1
     5f4:	81 30       	cpi	r24, 0x01	; 1
     5f6:	09 f0       	breq	.+2      	; 0x5fa <CtrlMarcheDispatcher+0x49e>
     5f8:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MID_EPAULE	,	ANGLE_MIN_EPAULE	,	body.speed ) == TRUE )
     5fa:	81 e0       	ldi	r24, 0x01	; 1
     5fc:	6a e5       	ldi	r22, 0x5A	; 90
     5fe:	4e e6       	ldi	r20, 0x6E	; 110
     600:	20 91 18 01 	lds	r18, 0x0118
     604:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     608:	81 30       	cpi	r24, 0x01	; 1
     60a:	09 f4       	brne	.+2      	; 0x60e <CtrlMarcheDispatcher+0x4b2>
		{
			ret |= (1U<<1U);
     60c:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     60e:	82 e0       	ldi	r24, 0x02	; 2
     610:	6a e5       	ldi	r22, 0x5A	; 90
     612:	4a e5       	ldi	r20, 0x5A	; 90
     614:	20 91 18 01 	lds	r18, 0x0118
     618:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     61c:	81 30       	cpi	r24, 0x01	; 1
     61e:	09 f4       	brne	.+2      	; 0x622 <CtrlMarcheDispatcher+0x4c6>
		{
			ret |= (1U<<2U);
     620:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MAX_EPAULE	,	body.speed ) == TRUE )
     622:	83 e0       	ldi	r24, 0x03	; 3
     624:	6a e5       	ldi	r22, 0x5A	; 90
     626:	46 e4       	ldi	r20, 0x46	; 70
     628:	20 91 18 01 	lds	r18, 0x0118
     62c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     630:	81 30       	cpi	r24, 0x01	; 1
     632:	09 f4       	brne	.+2      	; 0x636 <CtrlMarcheDispatcher+0x4da>
		{
			ret |= (1U<<3U);
     634:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MID_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     636:	84 e0       	ldi	r24, 0x04	; 4
     638:	6a e5       	ldi	r22, 0x5A	; 90
     63a:	4a e5       	ldi	r20, 0x5A	; 90
     63c:	20 91 18 01 	lds	r18, 0x0118
     640:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     644:	81 30       	cpi	r24, 0x01	; 1
     646:	09 f4       	brne	.+2      	; 0x64a <CtrlMarcheDispatcher+0x4ee>
		{
			ret |= (1U<<4U);
     648:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MID_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     64a:	85 e0       	ldi	r24, 0x05	; 5
     64c:	6a e5       	ldi	r22, 0x5A	; 90
     64e:	42 e3       	ldi	r20, 0x32	; 50
     650:	20 91 18 01 	lds	r18, 0x0118
     654:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     658:	81 30       	cpi	r24, 0x01	; 1
     65a:	09 f4       	brne	.+2      	; 0x65e <CtrlMarcheDispatcher+0x502>
		{
			ret |= (1U<<5U);
     65c:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     65e:	1f 33       	cpi	r17, 0x3F	; 63
     660:	09 f0       	breq	.+2      	; 0x664 <CtrlMarcheDispatcher+0x508>
     662:	1e c1       	rjmp	.+572    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		{
			step = 1U;
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	80 93 16 01 	sts	0x0116, r24
     66a:	1a c1       	rjmp	.+564    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		}
	}
	else if(step == 1U)
     66c:	81 30       	cpi	r24, 0x01	; 1
     66e:	09 f0       	breq	.+2      	; 0x672 <CtrlMarcheDispatcher+0x516>
     670:	44 c0       	rjmp	.+136    	; 0x6fa <CtrlMarcheDispatcher+0x59e>
		/*
			/\| |\/				mid min |  | min max
			\/| |/\		step 1	min max |  | max mid
			/\| |\/				mid min |  | min max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     672:	80 e0       	ldi	r24, 0x00	; 0
     674:	6e e6       	ldi	r22, 0x6E	; 110
     676:	4a e5       	ldi	r20, 0x5A	; 90
     678:	20 91 18 01 	lds	r18, 0x0118
     67c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceBackward( void ) 
{
	Int8U ret = 0x00;
     680:	11 e0       	ldi	r17, 0x01	; 1
     682:	81 30       	cpi	r24, 0x01	; 1
     684:	09 f0       	breq	.+2      	; 0x688 <CtrlMarcheDispatcher+0x52c>
     686:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     688:	81 e0       	ldi	r24, 0x01	; 1
     68a:	66 e4       	ldi	r22, 0x46	; 70
     68c:	42 e8       	ldi	r20, 0x82	; 130
     68e:	20 91 18 01 	lds	r18, 0x0118
     692:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     696:	81 30       	cpi	r24, 0x01	; 1
     698:	09 f4       	brne	.+2      	; 0x69c <CtrlMarcheDispatcher+0x540>
		{
			ret |= (1U<<1U);
     69a:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     69c:	82 e0       	ldi	r24, 0x02	; 2
     69e:	6e e6       	ldi	r22, 0x6E	; 110
     6a0:	4a e5       	ldi	r20, 0x5A	; 90
     6a2:	20 91 18 01 	lds	r18, 0x0118
     6a6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	09 f4       	brne	.+2      	; 0x6b0 <CtrlMarcheDispatcher+0x554>
		{
			ret |= (1U<<2U);
     6ae:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     6b0:	83 e0       	ldi	r24, 0x03	; 3
     6b2:	6e e6       	ldi	r22, 0x6E	; 110
     6b4:	42 e3       	ldi	r20, 0x32	; 50
     6b6:	20 91 18 01 	lds	r18, 0x0118
     6ba:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     6be:	81 30       	cpi	r24, 0x01	; 1
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <CtrlMarcheDispatcher+0x568>
		{
			ret |= (1U<<3U);
     6c2:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     6c4:	84 e0       	ldi	r24, 0x04	; 4
     6c6:	66 e4       	ldi	r22, 0x46	; 70
     6c8:	4a e5       	ldi	r20, 0x5A	; 90
     6ca:	20 91 18 01 	lds	r18, 0x0118
     6ce:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     6d2:	81 30       	cpi	r24, 0x01	; 1
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <CtrlMarcheDispatcher+0x57c>
		{
			ret |= (1U<<4U);
     6d6:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     6d8:	85 e0       	ldi	r24, 0x05	; 5
     6da:	6e e6       	ldi	r22, 0x6E	; 110
     6dc:	42 e3       	ldi	r20, 0x32	; 50
     6de:	20 91 18 01 	lds	r18, 0x0118
     6e2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     6e6:	81 30       	cpi	r24, 0x01	; 1
     6e8:	09 f4       	brne	.+2      	; 0x6ec <CtrlMarcheDispatcher+0x590>
		{
			ret |= (1U<<5U);
     6ea:	10 62       	ori	r17, 0x20	; 32
		}		
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     6ec:	1f 33       	cpi	r17, 0x3F	; 63
     6ee:	09 f0       	breq	.+2      	; 0x6f2 <CtrlMarcheDispatcher+0x596>
     6f0:	d7 c0       	rjmp	.+430    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		{
			step = 2U;
     6f2:	82 e0       	ldi	r24, 0x02	; 2
     6f4:	80 93 16 01 	sts	0x0116, r24
     6f8:	d3 c0       	rjmp	.+422    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		}
	}
	else if(step == 2U)
     6fa:	82 30       	cpi	r24, 0x02	; 2
     6fc:	09 f0       	breq	.+2      	; 0x700 <CtrlMarcheDispatcher+0x5a4>
     6fe:	44 c0       	rjmp	.+136    	; 0x788 <CtrlMarcheDispatcher+0x62c>
		/*
			\\| |\\				min min |  | min mid
			//| |//		step 2	mid max |  | max max
			\\| |\\				min min |  | min mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	6e e6       	ldi	r22, 0x6E	; 110
     704:	42 e8       	ldi	r20, 0x82	; 130
     706:	20 91 18 01 	lds	r18, 0x0118
     70a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceBackward( void ) 
{
	Int8U ret = 0x00;
     70e:	11 e0       	ldi	r17, 0x01	; 1
     710:	81 30       	cpi	r24, 0x01	; 1
     712:	09 f0       	breq	.+2      	; 0x716 <CtrlMarcheDispatcher+0x5ba>
     714:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     716:	81 e0       	ldi	r24, 0x01	; 1
     718:	66 e4       	ldi	r22, 0x46	; 70
     71a:	4a e5       	ldi	r20, 0x5A	; 90
     71c:	20 91 18 01 	lds	r18, 0x0118
     720:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     724:	81 30       	cpi	r24, 0x01	; 1
     726:	09 f4       	brne	.+2      	; 0x72a <CtrlMarcheDispatcher+0x5ce>
		{
			ret |= (1U<<1U);
     728:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     72a:	82 e0       	ldi	r24, 0x02	; 2
     72c:	6e e6       	ldi	r22, 0x6E	; 110
     72e:	42 e8       	ldi	r20, 0x82	; 130
     730:	20 91 18 01 	lds	r18, 0x0118
     734:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     738:	81 30       	cpi	r24, 0x01	; 1
     73a:	09 f4       	brne	.+2      	; 0x73e <CtrlMarcheDispatcher+0x5e2>
		{
			ret |= (1U<<2U);
     73c:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     73e:	83 e0       	ldi	r24, 0x03	; 3
     740:	6e e6       	ldi	r22, 0x6E	; 110
     742:	4a e5       	ldi	r20, 0x5A	; 90
     744:	20 91 18 01 	lds	r18, 0x0118
     748:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     74c:	81 30       	cpi	r24, 0x01	; 1
     74e:	09 f4       	brne	.+2      	; 0x752 <CtrlMarcheDispatcher+0x5f6>
		{
			ret |= (1U<<3U);
     750:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     752:	84 e0       	ldi	r24, 0x04	; 4
     754:	66 e4       	ldi	r22, 0x46	; 70
     756:	42 e3       	ldi	r20, 0x32	; 50
     758:	20 91 18 01 	lds	r18, 0x0118
     75c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     760:	81 30       	cpi	r24, 0x01	; 1
     762:	09 f4       	brne	.+2      	; 0x766 <CtrlMarcheDispatcher+0x60a>
		{
			ret |= (1U<<4U);
     764:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     766:	85 e0       	ldi	r24, 0x05	; 5
     768:	6e e6       	ldi	r22, 0x6E	; 110
     76a:	4a e5       	ldi	r20, 0x5A	; 90
     76c:	20 91 18 01 	lds	r18, 0x0118
     770:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     774:	81 30       	cpi	r24, 0x01	; 1
     776:	09 f4       	brne	.+2      	; 0x77a <CtrlMarcheDispatcher+0x61e>
		{
			ret |= (1U<<5U);
     778:	10 62       	ori	r17, 0x20	; 32
		}		
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     77a:	1f 33       	cpi	r17, 0x3F	; 63
     77c:	09 f0       	breq	.+2      	; 0x780 <CtrlMarcheDispatcher+0x624>
     77e:	90 c0       	rjmp	.+288    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		{
			step = 3U;
     780:	83 e0       	ldi	r24, 0x03	; 3
     782:	80 93 16 01 	sts	0x0116, r24
     786:	8c c0       	rjmp	.+280    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		}
	}
	else if(step == 3U)
     788:	83 30       	cpi	r24, 0x03	; 3
     78a:	09 f0       	breq	.+2      	; 0x78e <CtrlMarcheDispatcher+0x632>
     78c:	44 c0       	rjmp	.+136    	; 0x816 <CtrlMarcheDispatcher+0x6ba>
		/*
			\/| |/\				min max |  | max mid
			/\| |\/		step 3	mid min |  | min max
			\/| |/\				min max |  | max mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	66 e4       	ldi	r22, 0x46	; 70
     792:	42 e8       	ldi	r20, 0x82	; 130
     794:	20 91 18 01 	lds	r18, 0x0118
     798:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceBackward( void ) 
{
	Int8U ret = 0x00;
     79c:	11 e0       	ldi	r17, 0x01	; 1
     79e:	81 30       	cpi	r24, 0x01	; 1
     7a0:	09 f0       	breq	.+2      	; 0x7a4 <CtrlMarcheDispatcher+0x648>
     7a2:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	6e e6       	ldi	r22, 0x6E	; 110
     7a8:	4a e5       	ldi	r20, 0x5A	; 90
     7aa:	20 91 18 01 	lds	r18, 0x0118
     7ae:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     7b2:	81 30       	cpi	r24, 0x01	; 1
     7b4:	09 f4       	brne	.+2      	; 0x7b8 <CtrlMarcheDispatcher+0x65c>
		{
			ret |= (1U<<1U);
     7b6:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     7b8:	82 e0       	ldi	r24, 0x02	; 2
     7ba:	66 e4       	ldi	r22, 0x46	; 70
     7bc:	42 e8       	ldi	r20, 0x82	; 130
     7be:	20 91 18 01 	lds	r18, 0x0118
     7c2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	09 f4       	brne	.+2      	; 0x7cc <CtrlMarcheDispatcher+0x670>
		{
			ret |= (1U<<2U);
     7ca:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     7cc:	83 e0       	ldi	r24, 0x03	; 3
     7ce:	66 e4       	ldi	r22, 0x46	; 70
     7d0:	4a e5       	ldi	r20, 0x5A	; 90
     7d2:	20 91 18 01 	lds	r18, 0x0118
     7d6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	09 f4       	brne	.+2      	; 0x7e0 <CtrlMarcheDispatcher+0x684>
		{
			ret |= (1U<<3U);
     7de:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     7e0:	84 e0       	ldi	r24, 0x04	; 4
     7e2:	6e e6       	ldi	r22, 0x6E	; 110
     7e4:	42 e3       	ldi	r20, 0x32	; 50
     7e6:	20 91 18 01 	lds	r18, 0x0118
     7ea:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     7ee:	81 30       	cpi	r24, 0x01	; 1
     7f0:	09 f4       	brne	.+2      	; 0x7f4 <CtrlMarcheDispatcher+0x698>
		{
			ret |= (1U<<4U);
     7f2:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     7f4:	85 e0       	ldi	r24, 0x05	; 5
     7f6:	66 e4       	ldi	r22, 0x46	; 70
     7f8:	4a e5       	ldi	r20, 0x5A	; 90
     7fa:	20 91 18 01 	lds	r18, 0x0118
     7fe:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	09 f4       	brne	.+2      	; 0x808 <CtrlMarcheDispatcher+0x6ac>
		{
			ret |= (1U<<5U);
     806:	10 62       	ori	r17, 0x20	; 32
		}		
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     808:	1f 33       	cpi	r17, 0x3F	; 63
     80a:	09 f0       	breq	.+2      	; 0x80e <CtrlMarcheDispatcher+0x6b2>
     80c:	49 c0       	rjmp	.+146    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		{
			step = 4U;
     80e:	84 e0       	ldi	r24, 0x04	; 4
     810:	80 93 16 01 	sts	0x0116, r24
     814:	45 c0       	rjmp	.+138    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		}
	}
	else if(step == 4U)
     816:	84 30       	cpi	r24, 0x04	; 4
     818:	09 f0       	breq	.+2      	; 0x81c <CtrlMarcheDispatcher+0x6c0>
     81a:	42 c0       	rjmp	.+132    	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		/*
			//| |//				mid max |  | max max
			\\| |\\		step 4	min min |  | min mid
			//| |//				mid max |  | max max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     81c:	80 e0       	ldi	r24, 0x00	; 0
     81e:	66 e4       	ldi	r22, 0x46	; 70
     820:	4a e5       	ldi	r20, 0x5A	; 90
     822:	20 91 18 01 	lds	r18, 0x0118
     826:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceBackward( void ) 
{
	Int8U ret = 0x00;
     82a:	11 e0       	ldi	r17, 0x01	; 1
     82c:	81 30       	cpi	r24, 0x01	; 1
     82e:	09 f0       	breq	.+2      	; 0x832 <CtrlMarcheDispatcher+0x6d6>
     830:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     832:	81 e0       	ldi	r24, 0x01	; 1
     834:	6e e6       	ldi	r22, 0x6E	; 110
     836:	42 e8       	ldi	r20, 0x82	; 130
     838:	20 91 18 01 	lds	r18, 0x0118
     83c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     840:	81 30       	cpi	r24, 0x01	; 1
     842:	09 f4       	brne	.+2      	; 0x846 <CtrlMarcheDispatcher+0x6ea>
		{
			ret |= (1U<<1U);
     844:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     846:	82 e0       	ldi	r24, 0x02	; 2
     848:	66 e4       	ldi	r22, 0x46	; 70
     84a:	4a e5       	ldi	r20, 0x5A	; 90
     84c:	20 91 18 01 	lds	r18, 0x0118
     850:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     854:	81 30       	cpi	r24, 0x01	; 1
     856:	09 f4       	brne	.+2      	; 0x85a <CtrlMarcheDispatcher+0x6fe>
		{
			ret |= (1U<<2U);
     858:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     85a:	83 e0       	ldi	r24, 0x03	; 3
     85c:	66 e4       	ldi	r22, 0x46	; 70
     85e:	42 e3       	ldi	r20, 0x32	; 50
     860:	20 91 18 01 	lds	r18, 0x0118
     864:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	09 f4       	brne	.+2      	; 0x86e <CtrlMarcheDispatcher+0x712>
		{
			ret |= (1U<<3U);
     86c:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     86e:	84 e0       	ldi	r24, 0x04	; 4
     870:	6e e6       	ldi	r22, 0x6E	; 110
     872:	4a e5       	ldi	r20, 0x5A	; 90
     874:	20 91 18 01 	lds	r18, 0x0118
     878:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     87c:	81 30       	cpi	r24, 0x01	; 1
     87e:	09 f4       	brne	.+2      	; 0x882 <CtrlMarcheDispatcher+0x726>
		{
			ret |= (1U<<4U);
     880:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     882:	85 e0       	ldi	r24, 0x05	; 5
     884:	66 e4       	ldi	r22, 0x46	; 70
     886:	42 e3       	ldi	r20, 0x32	; 50
     888:	20 91 18 01 	lds	r18, 0x0118
     88c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     890:	81 30       	cpi	r24, 0x01	; 1
     892:	09 f4       	brne	.+2      	; 0x896 <CtrlMarcheDispatcher+0x73a>
		{
			ret |= (1U<<5U);
     894:	10 62       	ori	r17, 0x20	; 32
		}		
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     896:	1f 33       	cpi	r17, 0x3F	; 63
     898:	19 f4       	brne	.+6      	; 0x8a0 <CtrlMarcheDispatcher+0x744>
		{
			step = 1U;
     89a:	81 e0       	ldi	r24, 0x01	; 1
     89c:	80 93 16 01 	sts	0x0116, r24
			}
		}
		else
		{
			CtrlMarcheSequenceBackward();
			old_move = body.move;
     8a0:	80 91 17 01 	lds	r24, 0x0117
     8a4:	80 93 00 01 	sts	0x0100, r24
			DrvServoSendUartPosition();
     8a8:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     8ac:	83 c3       	rjmp	.+1798   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
		}
	}
	else if( body.move == E_MOVE_LEFT )
     8ae:	83 30       	cpi	r24, 0x03	; 3
     8b0:	09 f0       	breq	.+2      	; 0x8b4 <CtrlMarcheDispatcher+0x758>
     8b2:	bf c1       	rjmp	.+894    	; 0xc32 <CtrlMarcheDispatcher+0xad6>
	{
		//on passe par la sequence de stop avant d'enchainer sur le mouvement
		if( old_move != E_MOVE_LEFT )
     8b4:	80 91 00 01 	lds	r24, 0x0100
     8b8:	83 30       	cpi	r24, 0x03	; 3
     8ba:	61 f0       	breq	.+24     	; 0x8d4 <CtrlMarcheDispatcher+0x778>
		{
			if( TRUE == CtrlMarcheSequenceStop())
     8bc:	0e 94 67 00 	call	0xce	; 0xce <CtrlMarcheSequenceStop>
     8c0:	81 30       	cpi	r24, 0x01	; 1
     8c2:	09 f0       	breq	.+2      	; 0x8c6 <CtrlMarcheDispatcher+0x76a>
     8c4:	77 c3       	rjmp	.+1774   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			{
				old_move = body.move;
     8c6:	80 91 17 01 	lds	r24, 0x0117
     8ca:	80 93 00 01 	sts	0x0100, r24
				DrvServoSendUartPosition();
     8ce:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     8d2:	70 c3       	rjmp	.+1760   	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
}

static void CtrlMarcheSequenceLeft( void ) 
{
	Int8U ret = 0x00U;
	if(step == 0U)
     8d4:	80 91 16 01 	lds	r24, 0x0116
     8d8:	88 23       	and	r24, r24
     8da:	09 f0       	breq	.+2      	; 0x8de <CtrlMarcheDispatcher+0x782>
     8dc:	43 c0       	rjmp	.+134    	; 0x964 <CtrlMarcheDispatcher+0x808>
		/*
			/\| |\\				mid min |  | min mid
			/\| |\\		step 0	mid min |  | min mid
			/\| |\\				mid min |  | min mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     8de:	6e e6       	ldi	r22, 0x6E	; 110
     8e0:	4a e5       	ldi	r20, 0x5A	; 90
     8e2:	20 91 18 01 	lds	r18, 0x0118
     8e6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}	
}

static void CtrlMarcheSequenceLeft( void ) 
{
	Int8U ret = 0x00U;
     8ea:	11 e0       	ldi	r17, 0x01	; 1
     8ec:	81 30       	cpi	r24, 0x01	; 1
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <CtrlMarcheDispatcher+0x796>
     8f0:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     8f2:	81 e0       	ldi	r24, 0x01	; 1
     8f4:	6e e6       	ldi	r22, 0x6E	; 110
     8f6:	4a e5       	ldi	r20, 0x5A	; 90
     8f8:	20 91 18 01 	lds	r18, 0x0118
     8fc:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     900:	81 30       	cpi	r24, 0x01	; 1
     902:	09 f4       	brne	.+2      	; 0x906 <CtrlMarcheDispatcher+0x7aa>
		{
			ret |= (1U<<1U);
     904:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	6e e6       	ldi	r22, 0x6E	; 110
     90a:	4a e5       	ldi	r20, 0x5A	; 90
     90c:	20 91 18 01 	lds	r18, 0x0118
     910:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     914:	81 30       	cpi	r24, 0x01	; 1
     916:	09 f4       	brne	.+2      	; 0x91a <CtrlMarcheDispatcher+0x7be>
		{
			ret |= (1U<<2U);
     918:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	6e e6       	ldi	r22, 0x6E	; 110
     91e:	4a e5       	ldi	r20, 0x5A	; 90
     920:	20 91 18 01 	lds	r18, 0x0118
     924:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	09 f4       	brne	.+2      	; 0x92e <CtrlMarcheDispatcher+0x7d2>
		{
			ret |= (1U<<3U);
     92c:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     92e:	84 e0       	ldi	r24, 0x04	; 4
     930:	6e e6       	ldi	r22, 0x6E	; 110
     932:	4a e5       	ldi	r20, 0x5A	; 90
     934:	20 91 18 01 	lds	r18, 0x0118
     938:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	09 f4       	brne	.+2      	; 0x942 <CtrlMarcheDispatcher+0x7e6>
		{
			ret |= (1U<<4U);
     940:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     942:	85 e0       	ldi	r24, 0x05	; 5
     944:	6e e6       	ldi	r22, 0x6E	; 110
     946:	4a e5       	ldi	r20, 0x5A	; 90
     948:	20 91 18 01 	lds	r18, 0x0118
     94c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     950:	81 30       	cpi	r24, 0x01	; 1
     952:	09 f4       	brne	.+2      	; 0x956 <CtrlMarcheDispatcher+0x7fa>
		{
			ret |= (1U<<5U);
     954:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     956:	1f 33       	cpi	r17, 0x3F	; 63
     958:	09 f0       	breq	.+2      	; 0x95c <CtrlMarcheDispatcher+0x800>
     95a:	64 c1       	rjmp	.+712    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		{
			step = 1U;
     95c:	81 e0       	ldi	r24, 0x01	; 1
     95e:	80 93 16 01 	sts	0x0116, r24
     962:	60 c1       	rjmp	.+704    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		}
	}
	else if(step == 1U)
     964:	81 30       	cpi	r24, 0x01	; 1
     966:	09 f0       	breq	.+2      	; 0x96a <CtrlMarcheDispatcher+0x80e>
     968:	44 c0       	rjmp	.+136    	; 0x9f2 <CtrlMarcheDispatcher+0x896>
		/*
			/\| |\/				mid min |  | min max
			\\| |\\		step 1	min min |  | min mid
			/\| |\/				mid min |  | min max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	6e e6       	ldi	r22, 0x6E	; 110
     96e:	4a e5       	ldi	r20, 0x5A	; 90
     970:	20 91 18 01 	lds	r18, 0x0118
     974:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}	
}

static void CtrlMarcheSequenceLeft( void ) 
{
	Int8U ret = 0x00U;
     978:	11 e0       	ldi	r17, 0x01	; 1
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	09 f0       	breq	.+2      	; 0x980 <CtrlMarcheDispatcher+0x824>
     97e:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     980:	81 e0       	ldi	r24, 0x01	; 1
     982:	6e e6       	ldi	r22, 0x6E	; 110
     984:	42 e8       	ldi	r20, 0x82	; 130
     986:	20 91 18 01 	lds	r18, 0x0118
     98a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     98e:	81 30       	cpi	r24, 0x01	; 1
     990:	09 f4       	brne	.+2      	; 0x994 <CtrlMarcheDispatcher+0x838>
		{
			ret |= (1U<<1U);
     992:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     994:	82 e0       	ldi	r24, 0x02	; 2
     996:	6e e6       	ldi	r22, 0x6E	; 110
     998:	4a e5       	ldi	r20, 0x5A	; 90
     99a:	20 91 18 01 	lds	r18, 0x0118
     99e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     9a2:	81 30       	cpi	r24, 0x01	; 1
     9a4:	09 f4       	brne	.+2      	; 0x9a8 <CtrlMarcheDispatcher+0x84c>
		{
			ret |= (1U<<2U);
     9a6:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	6e e6       	ldi	r22, 0x6E	; 110
     9ac:	42 e3       	ldi	r20, 0x32	; 50
     9ae:	20 91 18 01 	lds	r18, 0x0118
     9b2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     9b6:	81 30       	cpi	r24, 0x01	; 1
     9b8:	09 f4       	brne	.+2      	; 0x9bc <CtrlMarcheDispatcher+0x860>
		{
			ret |= (1U<<3U);
     9ba:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     9bc:	84 e0       	ldi	r24, 0x04	; 4
     9be:	6e e6       	ldi	r22, 0x6E	; 110
     9c0:	4a e5       	ldi	r20, 0x5A	; 90
     9c2:	20 91 18 01 	lds	r18, 0x0118
     9c6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	09 f4       	brne	.+2      	; 0x9d0 <CtrlMarcheDispatcher+0x874>
		{
			ret |= (1U<<4U);
     9ce:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     9d0:	85 e0       	ldi	r24, 0x05	; 5
     9d2:	6e e6       	ldi	r22, 0x6E	; 110
     9d4:	42 e3       	ldi	r20, 0x32	; 50
     9d6:	20 91 18 01 	lds	r18, 0x0118
     9da:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     9de:	81 30       	cpi	r24, 0x01	; 1
     9e0:	09 f4       	brne	.+2      	; 0x9e4 <CtrlMarcheDispatcher+0x888>
		{
			ret |= (1U<<5U);
     9e2:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     9e4:	1f 33       	cpi	r17, 0x3F	; 63
     9e6:	09 f0       	breq	.+2      	; 0x9ea <CtrlMarcheDispatcher+0x88e>
     9e8:	1d c1       	rjmp	.+570    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		{
			step = 2U;
     9ea:	82 e0       	ldi	r24, 0x02	; 2
     9ec:	80 93 16 01 	sts	0x0116, r24
     9f0:	19 c1       	rjmp	.+562    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		}
	}
	else if(step == 2U)
     9f2:	82 30       	cpi	r24, 0x02	; 2
     9f4:	09 f0       	breq	.+2      	; 0x9f8 <CtrlMarcheDispatcher+0x89c>
     9f6:	44 c0       	rjmp	.+136    	; 0xa80 <CtrlMarcheDispatcher+0x924>
		/*
			/\| |//				mid min |  | max max
			\/| |\\		step 2	min max |  | min mid
			/\| |//				mid min |  | max max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     9f8:	80 e0       	ldi	r24, 0x00	; 0
     9fa:	6e e6       	ldi	r22, 0x6E	; 110
     9fc:	4a e5       	ldi	r20, 0x5A	; 90
     9fe:	20 91 18 01 	lds	r18, 0x0118
     a02:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}	
}

static void CtrlMarcheSequenceLeft( void ) 
{
	Int8U ret = 0x00U;
     a06:	11 e0       	ldi	r17, 0x01	; 1
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	09 f0       	breq	.+2      	; 0xa0e <CtrlMarcheDispatcher+0x8b2>
     a0c:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     a0e:	81 e0       	ldi	r24, 0x01	; 1
     a10:	66 e4       	ldi	r22, 0x46	; 70
     a12:	42 e8       	ldi	r20, 0x82	; 130
     a14:	20 91 18 01 	lds	r18, 0x0118
     a18:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     a1c:	81 30       	cpi	r24, 0x01	; 1
     a1e:	09 f4       	brne	.+2      	; 0xa22 <CtrlMarcheDispatcher+0x8c6>
		{
			ret |= (1U<<1U);
     a20:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     a22:	82 e0       	ldi	r24, 0x02	; 2
     a24:	6e e6       	ldi	r22, 0x6E	; 110
     a26:	4a e5       	ldi	r20, 0x5A	; 90
     a28:	20 91 18 01 	lds	r18, 0x0118
     a2c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     a30:	81 30       	cpi	r24, 0x01	; 1
     a32:	09 f4       	brne	.+2      	; 0xa36 <CtrlMarcheDispatcher+0x8da>
		{
			ret |= (1U<<2U);
     a34:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     a36:	83 e0       	ldi	r24, 0x03	; 3
     a38:	66 e4       	ldi	r22, 0x46	; 70
     a3a:	42 e3       	ldi	r20, 0x32	; 50
     a3c:	20 91 18 01 	lds	r18, 0x0118
     a40:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     a44:	81 30       	cpi	r24, 0x01	; 1
     a46:	09 f4       	brne	.+2      	; 0xa4a <CtrlMarcheDispatcher+0x8ee>
		{
			ret |= (1U<<3U);
     a48:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     a4a:	84 e0       	ldi	r24, 0x04	; 4
     a4c:	6e e6       	ldi	r22, 0x6E	; 110
     a4e:	4a e5       	ldi	r20, 0x5A	; 90
     a50:	20 91 18 01 	lds	r18, 0x0118
     a54:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     a58:	81 30       	cpi	r24, 0x01	; 1
     a5a:	09 f4       	brne	.+2      	; 0xa5e <CtrlMarcheDispatcher+0x902>
		{
			ret |= (1U<<4U);
     a5c:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     a5e:	85 e0       	ldi	r24, 0x05	; 5
     a60:	66 e4       	ldi	r22, 0x46	; 70
     a62:	42 e3       	ldi	r20, 0x32	; 50
     a64:	20 91 18 01 	lds	r18, 0x0118
     a68:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	09 f4       	brne	.+2      	; 0xa72 <CtrlMarcheDispatcher+0x916>
		{
			ret |= (1U<<5U);
     a70:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     a72:	1f 33       	cpi	r17, 0x3F	; 63
     a74:	09 f0       	breq	.+2      	; 0xa78 <CtrlMarcheDispatcher+0x91c>
     a76:	d6 c0       	rjmp	.+428    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		{
			step = 3U;
     a78:	83 e0       	ldi	r24, 0x03	; 3
     a7a:	80 93 16 01 	sts	0x0116, r24
     a7e:	d2 c0       	rjmp	.+420    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		}
	}
	else if(step == 3U)
     a80:	83 30       	cpi	r24, 0x03	; 3
     a82:	09 f0       	breq	.+2      	; 0xa86 <CtrlMarcheDispatcher+0x92a>
     a84:	44 c0       	rjmp	.+136    	; 0xb0e <CtrlMarcheDispatcher+0x9b2>
		/*
			\\| |/\				min min |  | max mid
			//| |\/		step 3	mid max |  | min max
			\\| |/\				min min |  | max mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	6e e6       	ldi	r22, 0x6E	; 110
     a8a:	42 e8       	ldi	r20, 0x82	; 130
     a8c:	20 91 18 01 	lds	r18, 0x0118
     a90:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}	
}

static void CtrlMarcheSequenceLeft( void ) 
{
	Int8U ret = 0x00U;
     a94:	11 e0       	ldi	r17, 0x01	; 1
     a96:	81 30       	cpi	r24, 0x01	; 1
     a98:	09 f0       	breq	.+2      	; 0xa9c <CtrlMarcheDispatcher+0x940>
     a9a:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	66 e4       	ldi	r22, 0x46	; 70
     aa0:	4a e5       	ldi	r20, 0x5A	; 90
     aa2:	20 91 18 01 	lds	r18, 0x0118
     aa6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     aaa:	81 30       	cpi	r24, 0x01	; 1
     aac:	09 f4       	brne	.+2      	; 0xab0 <CtrlMarcheDispatcher+0x954>
		{
			ret |= (1U<<1U);
     aae:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	6e e6       	ldi	r22, 0x6E	; 110
     ab4:	42 e8       	ldi	r20, 0x82	; 130
     ab6:	20 91 18 01 	lds	r18, 0x0118
     aba:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     abe:	81 30       	cpi	r24, 0x01	; 1
     ac0:	09 f4       	brne	.+2      	; 0xac4 <CtrlMarcheDispatcher+0x968>
		{
			ret |= (1U<<2U);
     ac2:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     ac4:	83 e0       	ldi	r24, 0x03	; 3
     ac6:	66 e4       	ldi	r22, 0x46	; 70
     ac8:	4a e5       	ldi	r20, 0x5A	; 90
     aca:	20 91 18 01 	lds	r18, 0x0118
     ace:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     ad2:	81 30       	cpi	r24, 0x01	; 1
     ad4:	09 f4       	brne	.+2      	; 0xad8 <CtrlMarcheDispatcher+0x97c>
		{
			ret |= (1U<<3U);
     ad6:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     ad8:	84 e0       	ldi	r24, 0x04	; 4
     ada:	6e e6       	ldi	r22, 0x6E	; 110
     adc:	42 e3       	ldi	r20, 0x32	; 50
     ade:	20 91 18 01 	lds	r18, 0x0118
     ae2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	09 f4       	brne	.+2      	; 0xaec <CtrlMarcheDispatcher+0x990>
		{
			ret |= (1U<<4U);
     aea:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     aec:	85 e0       	ldi	r24, 0x05	; 5
     aee:	66 e4       	ldi	r22, 0x46	; 70
     af0:	4a e5       	ldi	r20, 0x5A	; 90
     af2:	20 91 18 01 	lds	r18, 0x0118
     af6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     afa:	81 30       	cpi	r24, 0x01	; 1
     afc:	09 f4       	brne	.+2      	; 0xb00 <CtrlMarcheDispatcher+0x9a4>
		{
			ret |= (1U<<5U);
     afe:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     b00:	1f 33       	cpi	r17, 0x3F	; 63
     b02:	09 f0       	breq	.+2      	; 0xb06 <CtrlMarcheDispatcher+0x9aa>
     b04:	8f c0       	rjmp	.+286    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		{
			step = 4U;
     b06:	84 e0       	ldi	r24, 0x04	; 4
     b08:	80 93 16 01 	sts	0x0116, r24
     b0c:	8b c0       	rjmp	.+278    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		}
	}
	else if(step == 4U)
     b0e:	84 30       	cpi	r24, 0x04	; 4
     b10:	09 f0       	breq	.+2      	; 0xb14 <CtrlMarcheDispatcher+0x9b8>
     b12:	44 c0       	rjmp	.+136    	; 0xb9c <CtrlMarcheDispatcher+0xa40>
		/*
			\/| |/\				min max |  | max mid
			//| |//		step 4	mid max |  | max max
			\/| |/\				min max |  | max mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     b14:	80 e0       	ldi	r24, 0x00	; 0
     b16:	66 e4       	ldi	r22, 0x46	; 70
     b18:	42 e8       	ldi	r20, 0x82	; 130
     b1a:	20 91 18 01 	lds	r18, 0x0118
     b1e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}	
}

static void CtrlMarcheSequenceLeft( void ) 
{
	Int8U ret = 0x00U;
     b22:	11 e0       	ldi	r17, 0x01	; 1
     b24:	81 30       	cpi	r24, 0x01	; 1
     b26:	09 f0       	breq	.+2      	; 0xb2a <CtrlMarcheDispatcher+0x9ce>
     b28:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     b2a:	81 e0       	ldi	r24, 0x01	; 1
     b2c:	66 e4       	ldi	r22, 0x46	; 70
     b2e:	4a e5       	ldi	r20, 0x5A	; 90
     b30:	20 91 18 01 	lds	r18, 0x0118
     b34:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     b38:	81 30       	cpi	r24, 0x01	; 1
     b3a:	09 f4       	brne	.+2      	; 0xb3e <CtrlMarcheDispatcher+0x9e2>
		{
			ret |= (1U<<1U);
     b3c:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	66 e4       	ldi	r22, 0x46	; 70
     b42:	42 e8       	ldi	r20, 0x82	; 130
     b44:	20 91 18 01 	lds	r18, 0x0118
     b48:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     b4c:	81 30       	cpi	r24, 0x01	; 1
     b4e:	09 f4       	brne	.+2      	; 0xb52 <CtrlMarcheDispatcher+0x9f6>
		{
			ret |= (1U<<2U);
     b50:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     b52:	83 e0       	ldi	r24, 0x03	; 3
     b54:	66 e4       	ldi	r22, 0x46	; 70
     b56:	4a e5       	ldi	r20, 0x5A	; 90
     b58:	20 91 18 01 	lds	r18, 0x0118
     b5c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     b60:	81 30       	cpi	r24, 0x01	; 1
     b62:	09 f4       	brne	.+2      	; 0xb66 <CtrlMarcheDispatcher+0xa0a>
		{
			ret |= (1U<<3U);
     b64:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     b66:	84 e0       	ldi	r24, 0x04	; 4
     b68:	66 e4       	ldi	r22, 0x46	; 70
     b6a:	42 e3       	ldi	r20, 0x32	; 50
     b6c:	20 91 18 01 	lds	r18, 0x0118
     b70:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	09 f4       	brne	.+2      	; 0xb7a <CtrlMarcheDispatcher+0xa1e>
		{
			ret |= (1U<<4U);
     b78:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     b7a:	85 e0       	ldi	r24, 0x05	; 5
     b7c:	66 e4       	ldi	r22, 0x46	; 70
     b7e:	4a e5       	ldi	r20, 0x5A	; 90
     b80:	20 91 18 01 	lds	r18, 0x0118
     b84:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	09 f4       	brne	.+2      	; 0xb8e <CtrlMarcheDispatcher+0xa32>
		{
			ret |= (1U<<5U);
     b8c:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     b8e:	1f 33       	cpi	r17, 0x3F	; 63
     b90:	09 f0       	breq	.+2      	; 0xb94 <CtrlMarcheDispatcher+0xa38>
     b92:	48 c0       	rjmp	.+144    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		{
			step = 5U;
     b94:	85 e0       	ldi	r24, 0x05	; 5
     b96:	80 93 16 01 	sts	0x0116, r24
     b9a:	44 c0       	rjmp	.+136    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		}
	}	
	else if(step == 5U)
     b9c:	85 30       	cpi	r24, 0x05	; 5
     b9e:	09 f0       	breq	.+2      	; 0xba2 <CtrlMarcheDispatcher+0xa46>
     ba0:	41 c0       	rjmp	.+130    	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		/*
			//| |/\				mid max |  | max mid
			//| |/\		step 5	mid max |  | max mid
			//| |/\				mid max |  | max mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     ba2:	80 e0       	ldi	r24, 0x00	; 0
     ba4:	66 e4       	ldi	r22, 0x46	; 70
     ba6:	4a e5       	ldi	r20, 0x5A	; 90
     ba8:	20 91 18 01 	lds	r18, 0x0118
     bac:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}	
}

static void CtrlMarcheSequenceLeft( void ) 
{
	Int8U ret = 0x00U;
     bb0:	11 e0       	ldi	r17, 0x01	; 1
     bb2:	81 30       	cpi	r24, 0x01	; 1
     bb4:	09 f0       	breq	.+2      	; 0xbb8 <CtrlMarcheDispatcher+0xa5c>
     bb6:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	66 e4       	ldi	r22, 0x46	; 70
     bbc:	4a e5       	ldi	r20, 0x5A	; 90
     bbe:	20 91 18 01 	lds	r18, 0x0118
     bc2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	09 f4       	brne	.+2      	; 0xbcc <CtrlMarcheDispatcher+0xa70>
		{
			ret |= (1U<<1U);
     bca:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     bcc:	82 e0       	ldi	r24, 0x02	; 2
     bce:	66 e4       	ldi	r22, 0x46	; 70
     bd0:	4a e5       	ldi	r20, 0x5A	; 90
     bd2:	20 91 18 01 	lds	r18, 0x0118
     bd6:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	09 f4       	brne	.+2      	; 0xbe0 <CtrlMarcheDispatcher+0xa84>
		{
			ret |= (1U<<2U);
     bde:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	66 e4       	ldi	r22, 0x46	; 70
     be4:	4a e5       	ldi	r20, 0x5A	; 90
     be6:	20 91 18 01 	lds	r18, 0x0118
     bea:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     bee:	81 30       	cpi	r24, 0x01	; 1
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <CtrlMarcheDispatcher+0xa98>
		{
			ret |= (1U<<3U);
     bf2:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     bf4:	84 e0       	ldi	r24, 0x04	; 4
     bf6:	66 e4       	ldi	r22, 0x46	; 70
     bf8:	4a e5       	ldi	r20, 0x5A	; 90
     bfa:	20 91 18 01 	lds	r18, 0x0118
     bfe:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     c02:	81 30       	cpi	r24, 0x01	; 1
     c04:	09 f4       	brne	.+2      	; 0xc08 <CtrlMarcheDispatcher+0xaac>
		{
			ret |= (1U<<4U);
     c06:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     c08:	85 e0       	ldi	r24, 0x05	; 5
     c0a:	66 e4       	ldi	r22, 0x46	; 70
     c0c:	4a e5       	ldi	r20, 0x5A	; 90
     c0e:	20 91 18 01 	lds	r18, 0x0118
     c12:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     c16:	81 30       	cpi	r24, 0x01	; 1
     c18:	09 f4       	brne	.+2      	; 0xc1c <CtrlMarcheDispatcher+0xac0>
		{
			ret |= (1U<<5U);
     c1a:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     c1c:	1f 33       	cpi	r17, 0x3F	; 63
     c1e:	11 f4       	brne	.+4      	; 0xc24 <CtrlMarcheDispatcher+0xac8>
		{
			step = 0U;
     c20:	10 92 16 01 	sts	0x0116, r1
			}
		}
		else
		{
			CtrlMarcheSequenceLeft();
			old_move = body.move;
     c24:	80 91 17 01 	lds	r24, 0x0117
     c28:	80 93 00 01 	sts	0x0100, r24
			DrvServoSendUartPosition();
     c2c:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     c30:	c1 c1       	rjmp	.+898    	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
		}
	}	
	else if( body.move == E_MOVE_RIGHT )
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	09 f0       	breq	.+2      	; 0xc38 <CtrlMarcheDispatcher+0xadc>
     c36:	c4 c1       	rjmp	.+904    	; 0xfc0 <CtrlMarcheDispatcher+0xe64>
	{
		//on passe par la sequence de stop avant d'enchainer sur le mouvement
		if( old_move != E_MOVE_RIGHT )
     c38:	80 91 00 01 	lds	r24, 0x0100
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	61 f0       	breq	.+24     	; 0xc58 <CtrlMarcheDispatcher+0xafc>
		{
			if( TRUE == CtrlMarcheSequenceStop())
     c40:	0e 94 67 00 	call	0xce	; 0xce <CtrlMarcheSequenceStop>
     c44:	81 30       	cpi	r24, 0x01	; 1
     c46:	09 f0       	breq	.+2      	; 0xc4a <CtrlMarcheDispatcher+0xaee>
     c48:	b5 c1       	rjmp	.+874    	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
			{
				old_move = body.move;
     c4a:	80 91 17 01 	lds	r24, 0x0117
     c4e:	80 93 00 01 	sts	0x0100, r24
				DrvServoSendUartPosition();
     c52:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
     c56:	ae c1       	rjmp	.+860    	; 0xfb4 <CtrlMarcheDispatcher+0xe58>
}	

static void CtrlMarcheSequenceRight( void ) 
{
	Int8U ret = 0x00U;
	if(step == 0U)
     c58:	80 91 16 01 	lds	r24, 0x0116
     c5c:	88 23       	and	r24, r24
     c5e:	09 f0       	breq	.+2      	; 0xc62 <CtrlMarcheDispatcher+0xb06>
     c60:	43 c0       	rjmp	.+134    	; 0xce8 <CtrlMarcheDispatcher+0xb8c>
		/*
			//| |/\				mid max |  | max mid
			//| |/\		step 0	mid max |  | max mid
			//| |/\				mid max |  | max mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     c62:	66 e4       	ldi	r22, 0x46	; 70
     c64:	4a e5       	ldi	r20, 0x5A	; 90
     c66:	20 91 18 01 	lds	r18, 0x0118
     c6a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceRight( void ) 
{
	Int8U ret = 0x00U;
     c6e:	11 e0       	ldi	r17, 0x01	; 1
     c70:	81 30       	cpi	r24, 0x01	; 1
     c72:	09 f0       	breq	.+2      	; 0xc76 <CtrlMarcheDispatcher+0xb1a>
     c74:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     c76:	81 e0       	ldi	r24, 0x01	; 1
     c78:	66 e4       	ldi	r22, 0x46	; 70
     c7a:	4a e5       	ldi	r20, 0x5A	; 90
     c7c:	20 91 18 01 	lds	r18, 0x0118
     c80:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	09 f4       	brne	.+2      	; 0xc8a <CtrlMarcheDispatcher+0xb2e>
		{
			ret |= (1U<<1U);
     c88:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     c8a:	82 e0       	ldi	r24, 0x02	; 2
     c8c:	66 e4       	ldi	r22, 0x46	; 70
     c8e:	4a e5       	ldi	r20, 0x5A	; 90
     c90:	20 91 18 01 	lds	r18, 0x0118
     c94:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	09 f4       	brne	.+2      	; 0xc9e <CtrlMarcheDispatcher+0xb42>
		{
			ret |= (1U<<2U);
     c9c:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     c9e:	83 e0       	ldi	r24, 0x03	; 3
     ca0:	66 e4       	ldi	r22, 0x46	; 70
     ca2:	4a e5       	ldi	r20, 0x5A	; 90
     ca4:	20 91 18 01 	lds	r18, 0x0118
     ca8:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	09 f4       	brne	.+2      	; 0xcb2 <CtrlMarcheDispatcher+0xb56>
		{
			ret |= (1U<<3U);
     cb0:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     cb2:	84 e0       	ldi	r24, 0x04	; 4
     cb4:	66 e4       	ldi	r22, 0x46	; 70
     cb6:	4a e5       	ldi	r20, 0x5A	; 90
     cb8:	20 91 18 01 	lds	r18, 0x0118
     cbc:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     cc0:	81 30       	cpi	r24, 0x01	; 1
     cc2:	09 f4       	brne	.+2      	; 0xcc6 <CtrlMarcheDispatcher+0xb6a>
		{
			ret |= (1U<<4U);
     cc4:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     cc6:	85 e0       	ldi	r24, 0x05	; 5
     cc8:	66 e4       	ldi	r22, 0x46	; 70
     cca:	4a e5       	ldi	r20, 0x5A	; 90
     ccc:	20 91 18 01 	lds	r18, 0x0118
     cd0:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	09 f4       	brne	.+2      	; 0xcda <CtrlMarcheDispatcher+0xb7e>
		{
			ret |= (1U<<5U);
     cd8:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     cda:	1f 33       	cpi	r17, 0x3F	; 63
     cdc:	09 f0       	breq	.+2      	; 0xce0 <CtrlMarcheDispatcher+0xb84>
     cde:	64 c1       	rjmp	.+712    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		{
			step = 1U;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	80 93 16 01 	sts	0x0116, r24
     ce6:	60 c1       	rjmp	.+704    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		}
	}
	else if(step == 1U)
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	09 f0       	breq	.+2      	; 0xcee <CtrlMarcheDispatcher+0xb92>
     cec:	44 c0       	rjmp	.+136    	; 0xd76 <CtrlMarcheDispatcher+0xc1a>
		/*
			//| |//				mid max |  | max max
			\/| |/\		step 1	min max |  | max mid
			//| |//				mid max |  | max max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	66 e4       	ldi	r22, 0x46	; 70
     cf2:	4a e5       	ldi	r20, 0x5A	; 90
     cf4:	20 91 18 01 	lds	r18, 0x0118
     cf8:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceRight( void ) 
{
	Int8U ret = 0x00U;
     cfc:	11 e0       	ldi	r17, 0x01	; 1
     cfe:	81 30       	cpi	r24, 0x01	; 1
     d00:	09 f0       	breq	.+2      	; 0xd04 <CtrlMarcheDispatcher+0xba8>
     d02:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	66 e4       	ldi	r22, 0x46	; 70
     d08:	42 e8       	ldi	r20, 0x82	; 130
     d0a:	20 91 18 01 	lds	r18, 0x0118
     d0e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     d12:	81 30       	cpi	r24, 0x01	; 1
     d14:	09 f4       	brne	.+2      	; 0xd18 <CtrlMarcheDispatcher+0xbbc>
		{
			ret |= (1U<<1U);
     d16:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     d18:	82 e0       	ldi	r24, 0x02	; 2
     d1a:	66 e4       	ldi	r22, 0x46	; 70
     d1c:	4a e5       	ldi	r20, 0x5A	; 90
     d1e:	20 91 18 01 	lds	r18, 0x0118
     d22:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	09 f4       	brne	.+2      	; 0xd2c <CtrlMarcheDispatcher+0xbd0>
		{
			ret |= (1U<<2U);
     d2a:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     d2c:	83 e0       	ldi	r24, 0x03	; 3
     d2e:	66 e4       	ldi	r22, 0x46	; 70
     d30:	42 e3       	ldi	r20, 0x32	; 50
     d32:	20 91 18 01 	lds	r18, 0x0118
     d36:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     d3a:	81 30       	cpi	r24, 0x01	; 1
     d3c:	09 f4       	brne	.+2      	; 0xd40 <CtrlMarcheDispatcher+0xbe4>
		{
			ret |= (1U<<3U);
     d3e:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     d40:	84 e0       	ldi	r24, 0x04	; 4
     d42:	66 e4       	ldi	r22, 0x46	; 70
     d44:	4a e5       	ldi	r20, 0x5A	; 90
     d46:	20 91 18 01 	lds	r18, 0x0118
     d4a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     d4e:	81 30       	cpi	r24, 0x01	; 1
     d50:	09 f4       	brne	.+2      	; 0xd54 <CtrlMarcheDispatcher+0xbf8>
		{
			ret |= (1U<<4U);
     d52:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     d54:	85 e0       	ldi	r24, 0x05	; 5
     d56:	66 e4       	ldi	r22, 0x46	; 70
     d58:	42 e3       	ldi	r20, 0x32	; 50
     d5a:	20 91 18 01 	lds	r18, 0x0118
     d5e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	09 f4       	brne	.+2      	; 0xd68 <CtrlMarcheDispatcher+0xc0c>
		{
			ret |= (1U<<5U);
     d66:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     d68:	1f 33       	cpi	r17, 0x3F	; 63
     d6a:	09 f0       	breq	.+2      	; 0xd6e <CtrlMarcheDispatcher+0xc12>
     d6c:	1d c1       	rjmp	.+570    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		{
			step = 2U;
     d6e:	82 e0       	ldi	r24, 0x02	; 2
     d70:	80 93 16 01 	sts	0x0116, r24
     d74:	19 c1       	rjmp	.+562    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		}
	}
	else if(step == 2U)
     d76:	82 30       	cpi	r24, 0x02	; 2
     d78:	09 f0       	breq	.+2      	; 0xd7c <CtrlMarcheDispatcher+0xc20>
     d7a:	44 c0       	rjmp	.+136    	; 0xe04 <CtrlMarcheDispatcher+0xca8>
		/*
			//| |\/				mid max |  | min max
			\\| |/\		step 2	min min |  | max mid
			//| |\/				mid max |  | min max
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	66 e4       	ldi	r22, 0x46	; 70
     d80:	4a e5       	ldi	r20, 0x5A	; 90
     d82:	20 91 18 01 	lds	r18, 0x0118
     d86:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceRight( void ) 
{
	Int8U ret = 0x00U;
     d8a:	11 e0       	ldi	r17, 0x01	; 1
     d8c:	81 30       	cpi	r24, 0x01	; 1
     d8e:	09 f0       	breq	.+2      	; 0xd92 <CtrlMarcheDispatcher+0xc36>
     d90:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     d92:	81 e0       	ldi	r24, 0x01	; 1
     d94:	6e e6       	ldi	r22, 0x6E	; 110
     d96:	42 e8       	ldi	r20, 0x82	; 130
     d98:	20 91 18 01 	lds	r18, 0x0118
     d9c:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     da0:	81 30       	cpi	r24, 0x01	; 1
     da2:	09 f4       	brne	.+2      	; 0xda6 <CtrlMarcheDispatcher+0xc4a>
		{
			ret |= (1U<<1U);
     da4:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     da6:	82 e0       	ldi	r24, 0x02	; 2
     da8:	66 e4       	ldi	r22, 0x46	; 70
     daa:	4a e5       	ldi	r20, 0x5A	; 90
     dac:	20 91 18 01 	lds	r18, 0x0118
     db0:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     db4:	81 30       	cpi	r24, 0x01	; 1
     db6:	09 f4       	brne	.+2      	; 0xdba <CtrlMarcheDispatcher+0xc5e>
		{
			ret |= (1U<<2U);
     db8:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     dba:	83 e0       	ldi	r24, 0x03	; 3
     dbc:	6e e6       	ldi	r22, 0x6E	; 110
     dbe:	42 e3       	ldi	r20, 0x32	; 50
     dc0:	20 91 18 01 	lds	r18, 0x0118
     dc4:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     dc8:	81 30       	cpi	r24, 0x01	; 1
     dca:	09 f4       	brne	.+2      	; 0xdce <CtrlMarcheDispatcher+0xc72>
		{
			ret |= (1U<<3U);
     dcc:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     dce:	84 e0       	ldi	r24, 0x04	; 4
     dd0:	66 e4       	ldi	r22, 0x46	; 70
     dd2:	4a e5       	ldi	r20, 0x5A	; 90
     dd4:	20 91 18 01 	lds	r18, 0x0118
     dd8:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     ddc:	81 30       	cpi	r24, 0x01	; 1
     dde:	09 f4       	brne	.+2      	; 0xde2 <CtrlMarcheDispatcher+0xc86>
		{
			ret |= (1U<<4U);
     de0:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     de2:	85 e0       	ldi	r24, 0x05	; 5
     de4:	6e e6       	ldi	r22, 0x6E	; 110
     de6:	42 e3       	ldi	r20, 0x32	; 50
     de8:	20 91 18 01 	lds	r18, 0x0118
     dec:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     df0:	81 30       	cpi	r24, 0x01	; 1
     df2:	09 f4       	brne	.+2      	; 0xdf6 <CtrlMarcheDispatcher+0xc9a>
		{
			ret |= (1U<<5U);
     df4:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     df6:	1f 33       	cpi	r17, 0x3F	; 63
     df8:	09 f0       	breq	.+2      	; 0xdfc <CtrlMarcheDispatcher+0xca0>
     dfa:	d6 c0       	rjmp	.+428    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		{
			step = 3U;
     dfc:	83 e0       	ldi	r24, 0x03	; 3
     dfe:	80 93 16 01 	sts	0x0116, r24
     e02:	d2 c0       	rjmp	.+420    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		}
	}
	else if(step == 3U)
     e04:	83 30       	cpi	r24, 0x03	; 3
     e06:	09 f0       	breq	.+2      	; 0xe0a <CtrlMarcheDispatcher+0xcae>
     e08:	44 c0       	rjmp	.+136    	; 0xe92 <CtrlMarcheDispatcher+0xd36>
		/*
			\/| |\\				min max |  | min mid
			/\| |//		step 3	mid min |  | max max
			\/| |\\				min max |  | min mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     e0a:	80 e0       	ldi	r24, 0x00	; 0
     e0c:	66 e4       	ldi	r22, 0x46	; 70
     e0e:	42 e8       	ldi	r20, 0x82	; 130
     e10:	20 91 18 01 	lds	r18, 0x0118
     e14:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceRight( void ) 
{
	Int8U ret = 0x00U;
     e18:	11 e0       	ldi	r17, 0x01	; 1
     e1a:	81 30       	cpi	r24, 0x01	; 1
     e1c:	09 f0       	breq	.+2      	; 0xe20 <CtrlMarcheDispatcher+0xcc4>
     e1e:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	6e e6       	ldi	r22, 0x6E	; 110
     e24:	4a e5       	ldi	r20, 0x5A	; 90
     e26:	20 91 18 01 	lds	r18, 0x0118
     e2a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     e2e:	81 30       	cpi	r24, 0x01	; 1
     e30:	09 f4       	brne	.+2      	; 0xe34 <CtrlMarcheDispatcher+0xcd8>
		{
			ret |= (1U<<1U);
     e32:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MAX_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	66 e4       	ldi	r22, 0x46	; 70
     e38:	42 e8       	ldi	r20, 0x82	; 130
     e3a:	20 91 18 01 	lds	r18, 0x0118
     e3e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     e42:	81 30       	cpi	r24, 0x01	; 1
     e44:	09 f4       	brne	.+2      	; 0xe48 <CtrlMarcheDispatcher+0xcec>
		{
			ret |= (1U<<2U);
     e46:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     e48:	83 e0       	ldi	r24, 0x03	; 3
     e4a:	6e e6       	ldi	r22, 0x6E	; 110
     e4c:	4a e5       	ldi	r20, 0x5A	; 90
     e4e:	20 91 18 01 	lds	r18, 0x0118
     e52:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     e56:	81 30       	cpi	r24, 0x01	; 1
     e58:	09 f4       	brne	.+2      	; 0xe5c <CtrlMarcheDispatcher+0xd00>
		{
			ret |= (1U<<3U);
     e5a:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MAX_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     e5c:	84 e0       	ldi	r24, 0x04	; 4
     e5e:	66 e4       	ldi	r22, 0x46	; 70
     e60:	42 e3       	ldi	r20, 0x32	; 50
     e62:	20 91 18 01 	lds	r18, 0x0118
     e66:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     e6a:	81 30       	cpi	r24, 0x01	; 1
     e6c:	09 f4       	brne	.+2      	; 0xe70 <CtrlMarcheDispatcher+0xd14>
		{
			ret |= (1U<<4U);
     e6e:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     e70:	85 e0       	ldi	r24, 0x05	; 5
     e72:	6e e6       	ldi	r22, 0x6E	; 110
     e74:	4a e5       	ldi	r20, 0x5A	; 90
     e76:	20 91 18 01 	lds	r18, 0x0118
     e7a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	09 f4       	brne	.+2      	; 0xe84 <CtrlMarcheDispatcher+0xd28>
		{
			ret |= (1U<<5U);
     e82:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     e84:	1f 33       	cpi	r17, 0x3F	; 63
     e86:	09 f0       	breq	.+2      	; 0xe8a <CtrlMarcheDispatcher+0xd2e>
     e88:	8f c0       	rjmp	.+286    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		{
			step = 4U;
     e8a:	84 e0       	ldi	r24, 0x04	; 4
     e8c:	80 93 16 01 	sts	0x0116, r24
     e90:	8b c0       	rjmp	.+278    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		}
	}
	else if(step == 4U)
     e92:	84 30       	cpi	r24, 0x04	; 4
     e94:	09 f0       	breq	.+2      	; 0xe98 <CtrlMarcheDispatcher+0xd3c>
     e96:	44 c0       	rjmp	.+136    	; 0xf20 <CtrlMarcheDispatcher+0xdc4>
		/*
			\\| |\\				min min |  | min mid
			/\| |\/		step 4	mid min |  | min max
			\\| |\\				min min |  | min mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     e98:	80 e0       	ldi	r24, 0x00	; 0
     e9a:	6e e6       	ldi	r22, 0x6E	; 110
     e9c:	42 e8       	ldi	r20, 0x82	; 130
     e9e:	20 91 18 01 	lds	r18, 0x0118
     ea2:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceRight( void ) 
{
	Int8U ret = 0x00U;
     ea6:	11 e0       	ldi	r17, 0x01	; 1
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	09 f0       	breq	.+2      	; 0xeae <CtrlMarcheDispatcher+0xd52>
     eac:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	6e e6       	ldi	r22, 0x6E	; 110
     eb2:	4a e5       	ldi	r20, 0x5A	; 90
     eb4:	20 91 18 01 	lds	r18, 0x0118
     eb8:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	09 f4       	brne	.+2      	; 0xec2 <CtrlMarcheDispatcher+0xd66>
		{
			ret |= (1U<<1U);
     ec0:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MIN_COUDE	,	body.speed ) == TRUE )
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	6e e6       	ldi	r22, 0x6E	; 110
     ec6:	42 e8       	ldi	r20, 0x82	; 130
     ec8:	20 91 18 01 	lds	r18, 0x0118
     ecc:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	09 f4       	brne	.+2      	; 0xed6 <CtrlMarcheDispatcher+0xd7a>
		{
			ret |= (1U<<2U);
     ed4:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     ed6:	83 e0       	ldi	r24, 0x03	; 3
     ed8:	6e e6       	ldi	r22, 0x6E	; 110
     eda:	4a e5       	ldi	r20, 0x5A	; 90
     edc:	20 91 18 01 	lds	r18, 0x0118
     ee0:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     ee4:	81 30       	cpi	r24, 0x01	; 1
     ee6:	09 f4       	brne	.+2      	; 0xeea <CtrlMarcheDispatcher+0xd8e>
		{
			ret |= (1U<<3U);
     ee8:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MAX_COUDE	,	body.speed ) == TRUE )
     eea:	84 e0       	ldi	r24, 0x04	; 4
     eec:	6e e6       	ldi	r22, 0x6E	; 110
     eee:	42 e3       	ldi	r20, 0x32	; 50
     ef0:	20 91 18 01 	lds	r18, 0x0118
     ef4:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     ef8:	81 30       	cpi	r24, 0x01	; 1
     efa:	09 f4       	brne	.+2      	; 0xefe <CtrlMarcheDispatcher+0xda2>
		{
			ret |= (1U<<4U);
     efc:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     efe:	85 e0       	ldi	r24, 0x05	; 5
     f00:	6e e6       	ldi	r22, 0x6E	; 110
     f02:	4a e5       	ldi	r20, 0x5A	; 90
     f04:	20 91 18 01 	lds	r18, 0x0118
     f08:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     f0c:	81 30       	cpi	r24, 0x01	; 1
     f0e:	09 f4       	brne	.+2      	; 0xf12 <CtrlMarcheDispatcher+0xdb6>
		{
			ret |= (1U<<5U);
     f10:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     f12:	1f 33       	cpi	r17, 0x3F	; 63
     f14:	09 f0       	breq	.+2      	; 0xf18 <CtrlMarcheDispatcher+0xdbc>
     f16:	48 c0       	rjmp	.+144    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		{
			step = 5U;
     f18:	85 e0       	ldi	r24, 0x05	; 5
     f1a:	80 93 16 01 	sts	0x0116, r24
     f1e:	44 c0       	rjmp	.+136    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		}
	}	
	else if(step == 5U)
     f20:	85 30       	cpi	r24, 0x05	; 5
     f22:	09 f0       	breq	.+2      	; 0xf26 <CtrlMarcheDispatcher+0xdca>
     f24:	41 c0       	rjmp	.+130    	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		/*
			/\| |\\				mid min |  | min mid
			/\| |\\		step 5	mid min |  | min mid
			/\| |\\				mid min |  | min mid
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     f26:	80 e0       	ldi	r24, 0x00	; 0
     f28:	6e e6       	ldi	r22, 0x6E	; 110
     f2a:	4a e5       	ldi	r20, 0x5A	; 90
     f2c:	20 91 18 01 	lds	r18, 0x0118
     f30:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
	}
}	

static void CtrlMarcheSequenceRight( void ) 
{
	Int8U ret = 0x00U;
     f34:	11 e0       	ldi	r17, 0x01	; 1
     f36:	81 30       	cpi	r24, 0x01	; 1
     f38:	09 f0       	breq	.+2      	; 0xf3c <CtrlMarcheDispatcher+0xde0>
     f3a:	10 e0       	ldi	r17, 0x00	; 0
		*/
		if( CtrlPatteMove(AVANT_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
		{
			ret |= (1U<<0U);
		}	
		if( CtrlPatteMove(MILIEU_GAUCHE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     f3c:	81 e0       	ldi	r24, 0x01	; 1
     f3e:	6e e6       	ldi	r22, 0x6E	; 110
     f40:	4a e5       	ldi	r20, 0x5A	; 90
     f42:	20 91 18 01 	lds	r18, 0x0118
     f46:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     f4a:	81 30       	cpi	r24, 0x01	; 1
     f4c:	09 f4       	brne	.+2      	; 0xf50 <CtrlMarcheDispatcher+0xdf4>
		{
			ret |= (1U<<1U);
     f4e:	12 60       	ori	r17, 0x02	; 2
		}	
		if( CtrlPatteMove(ARRIERE_GAUCHE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     f50:	82 e0       	ldi	r24, 0x02	; 2
     f52:	6e e6       	ldi	r22, 0x6E	; 110
     f54:	4a e5       	ldi	r20, 0x5A	; 90
     f56:	20 91 18 01 	lds	r18, 0x0118
     f5a:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	09 f4       	brne	.+2      	; 0xf64 <CtrlMarcheDispatcher+0xe08>
		{
			ret |= (1U<<2U);
     f62:	14 60       	ori	r17, 0x04	; 4
		}	
		if( CtrlPatteMove(AVANT_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     f64:	83 e0       	ldi	r24, 0x03	; 3
     f66:	6e e6       	ldi	r22, 0x6E	; 110
     f68:	4a e5       	ldi	r20, 0x5A	; 90
     f6a:	20 91 18 01 	lds	r18, 0x0118
     f6e:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	09 f4       	brne	.+2      	; 0xf78 <CtrlMarcheDispatcher+0xe1c>
		{
			ret |= (1U<<3U);
     f76:	18 60       	ori	r17, 0x08	; 8
		}	
		if( CtrlPatteMove(MILIEU_DROITE		,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     f78:	84 e0       	ldi	r24, 0x04	; 4
     f7a:	6e e6       	ldi	r22, 0x6E	; 110
     f7c:	4a e5       	ldi	r20, 0x5A	; 90
     f7e:	20 91 18 01 	lds	r18, 0x0118
     f82:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	09 f4       	brne	.+2      	; 0xf8c <CtrlMarcheDispatcher+0xe30>
		{
			ret |= (1U<<4U);
     f8a:	10 61       	ori	r17, 0x10	; 16
		}	
		if( CtrlPatteMove(ARRIERE_DROITE	,	ANGLE_MIN_EPAULE	,	ANGLE_MID_COUDE	,	body.speed ) == TRUE )
     f8c:	85 e0       	ldi	r24, 0x05	; 5
     f8e:	6e e6       	ldi	r22, 0x6E	; 110
     f90:	4a e5       	ldi	r20, 0x5A	; 90
     f92:	20 91 18 01 	lds	r18, 0x0118
     f96:	0e 94 be 08 	call	0x117c	; 0x117c <CtrlPatteMove>
     f9a:	81 30       	cpi	r24, 0x01	; 1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <CtrlMarcheDispatcher+0xe44>
		{
			ret |= (1U<<5U);
     f9e:	10 62       	ori	r17, 0x20	; 32
		}	
		//quand on est arrivé a la bonne position on change de step	
		if( ret == 0x3FU )
     fa0:	1f 33       	cpi	r17, 0x3F	; 63
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <CtrlMarcheDispatcher+0xe4c>
		{
			step = 0U;
     fa4:	10 92 16 01 	sts	0x0116, r1
			}
		}
		else
		{
			CtrlMarcheSequenceRight();
			old_move = body.move;
     fa8:	80 91 17 01 	lds	r24, 0x0117
     fac:	80 93 00 01 	sts	0x0100, r24
			DrvServoSendUartPosition();
     fb0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
{
	if ( DrvEventTestEvent(event, CONF_EVENT_TIMER_100MS ))
	{
		//on envoie vers la machine d'etat de la marche
		CtrlMarcheSequence();
		if( body.move == E_MOVE_STOP )
     fb4:	80 91 17 01 	lds	r24, 0x0117
     fb8:	88 23       	and	r24, r24
     fba:	11 f4       	brne	.+4      	; 0xfc0 <CtrlMarcheDispatcher+0xe64>
		{
			DrvServoSendUartPosition();
     fbc:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <DrvServoSendUartPosition>
		}
	}
	
	//on envoie la position des servo tte les sec quand on est en stop
	if ( DrvEventTestEvent(event, CONF_EVENT_TIMER_100MS ))
     fc0:	ce 01       	movw	r24, r28
     fc2:	61 e0       	ldi	r22, 0x01	; 1
     fc4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DrvEventTestEvent>
	{
					
	}
}
     fc8:	df 91       	pop	r29
     fca:	cf 91       	pop	r28
     fcc:	1f 91       	pop	r17
     fce:	08 95       	ret

00000fd0 <CtrlMarcheGetStruct>:

//on recupere la structure
body_member_t* CtrlMarcheGetStruct( void )
{
	return &body;	
}
     fd0:	87 e1       	ldi	r24, 0x17	; 23
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	08 95       	ret

00000fd6 <CtrlMarcheMove>:


//deplace le robot 
void CtrlMarcheMove( EMove move, EServoVitesse speed ) 
{
	step = 0U;
     fd6:	10 92 16 01 	sts	0x0116, r1
	body.move = move;
     fda:	80 93 17 01 	sts	0x0117, r24
	body.speed = speed;
     fde:	60 93 18 01 	sts	0x0118, r22
}
     fe2:	08 95       	ret

00000fe4 <CtrlPatte>:
 
/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////

//init
void CtrlPatte( void ) 
{
     fe4:	bf 92       	push	r11
     fe6:	cf 92       	push	r12
     fe8:	df 92       	push	r13
     fea:	ef 92       	push	r14
     fec:	ff 92       	push	r15
     fee:	0f 93       	push	r16
     ff0:	1f 93       	push	r17
	//on ajoute les servos pour chaques patte
	
	//avant gauche
	MesPattes[ AVANT_GAUCHE ].epaule.pin = CONF_SERVO_PATTE_AVANT_GAUCHE_EPAULE;
     ff2:	0f 2e       	mov	r0, r31
     ff4:	fa e0       	ldi	r31, 0x0A	; 10
     ff6:	ef 2e       	mov	r14, r31
     ff8:	f0 2d       	mov	r31, r0
     ffa:	e0 92 19 01 	sts	0x0119, r14
	MesPattes[ AVANT_GAUCHE ].epaule.index = CONF_SERVO_PATTE_AVANT_GAUCHE_EPAULE_INDEX;
     ffe:	bb 24       	eor	r11, r11
    1000:	68 94       	set
    1002:	b1 f8       	bld	r11, 1
    1004:	b0 92 1a 01 	sts	0x011A, r11
	MesPattes[ AVANT_GAUCHE ].epaule.angle = NEUTRE_EPAULE_AVANT_GAUCHE;
    1008:	1a e5       	ldi	r17, 0x5A	; 90
    100a:	10 93 1b 01 	sts	0x011B, r17
	MesPattes[ AVANT_GAUCHE ].epaule.offset = 0U;
    100e:	10 92 1c 01 	sts	0x011C, r1
	DrvAddServo( MesPattes[ AVANT_GAUCHE ].epaule.pin, MesPattes[ AVANT_GAUCHE ].epaule.angle );
    1012:	8a e0       	ldi	r24, 0x0A	; 10
    1014:	6a e5       	ldi	r22, 0x5A	; 90
    1016:	70 e0       	ldi	r23, 0x00	; 0
    1018:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
		
	MesPattes[ AVANT_GAUCHE ].coude.pin = CONF_SERVO_PATTE_AVANT_GAUCHE_COUDE;
    101c:	0f 2e       	mov	r0, r31
    101e:	fb e0       	ldi	r31, 0x0B	; 11
    1020:	ff 2e       	mov	r15, r31
    1022:	f0 2d       	mov	r31, r0
    1024:	f0 92 1d 01 	sts	0x011D, r15
	MesPattes[ AVANT_GAUCHE ].coude.index = CONF_SERVO_PATTE_AVANT_GAUCHE_COUDE_INDEX;
    1028:	83 e0       	ldi	r24, 0x03	; 3
    102a:	80 93 1e 01 	sts	0x011E, r24
	MesPattes[ AVANT_GAUCHE ].coude.angle = NEUTRE_COUDE_AVANT_GAUCHE;
    102e:	10 93 1f 01 	sts	0x011F, r17
	MesPattes[ AVANT_GAUCHE ].coude.offset = 4;
    1032:	04 e0       	ldi	r16, 0x04	; 4
    1034:	00 93 20 01 	sts	0x0120, r16
	DrvAddServo( MesPattes[ AVANT_GAUCHE ].coude.pin ,MesPattes[ AVANT_GAUCHE ].coude.angle );
    1038:	8b e0       	ldi	r24, 0x0B	; 11
    103a:	6a e5       	ldi	r22, 0x5A	; 90
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
					
	//milieu gauche
	MesPattes[ MILIEU_GAUCHE ].epaule.pin = CONF_SERVO_PATTE_MILIEU_GAUCHE_EPAULE;
    1042:	0f 2e       	mov	r0, r31
    1044:	fd e0       	ldi	r31, 0x0D	; 13
    1046:	cf 2e       	mov	r12, r31
    1048:	f0 2d       	mov	r31, r0
    104a:	c0 92 21 01 	sts	0x0121, r12
	MesPattes[ MILIEU_GAUCHE ].epaule.index = CONF_SERVO_PATTE_MILIEU_GAUCHE_EPAULE_INDEX;
    104e:	00 93 22 01 	sts	0x0122, r16
	MesPattes[ MILIEU_GAUCHE ].epaule.angle = NEUTRE_EPAULE_MILIEU_GAUCHE;
    1052:	10 93 23 01 	sts	0x0123, r17
	MesPattes[ MILIEU_GAUCHE ].epaule.offset = -3;
    1056:	8d ef       	ldi	r24, 0xFD	; 253
    1058:	80 93 24 01 	sts	0x0124, r24
	DrvAddServo( MesPattes[ MILIEU_GAUCHE ].epaule.pin ,MesPattes[ MILIEU_GAUCHE ].epaule.angle );
    105c:	8d e0       	ldi	r24, 0x0D	; 13
    105e:	6a e5       	ldi	r22, 0x5A	; 90
    1060:	70 e0       	ldi	r23, 0x00	; 0
    1062:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
		
	MesPattes[ MILIEU_GAUCHE ].coude.pin = CONF_SERVO_PATTE_MILIEU_GAUCHE_COUDE;
    1066:	0c e0       	ldi	r16, 0x0C	; 12
    1068:	00 93 25 01 	sts	0x0125, r16
	MesPattes[ MILIEU_GAUCHE ].coude.index = CONF_SERVO_PATTE_MILIEU_GAUCHE_COUDE_INDEX;
    106c:	85 e0       	ldi	r24, 0x05	; 5
    106e:	80 93 26 01 	sts	0x0126, r24
	MesPattes[ MILIEU_GAUCHE ].coude.angle = NEUTRE_COUDE_MILIEU_GAUCHE;
    1072:	10 93 27 01 	sts	0x0127, r17
	MesPattes[ MILIEU_GAUCHE ].coude.offset = 0U;
    1076:	10 92 28 01 	sts	0x0128, r1
	DrvAddServo( MesPattes[ MILIEU_GAUCHE ].coude.pin ,MesPattes[ MILIEU_GAUCHE ].coude.angle );
    107a:	8c e0       	ldi	r24, 0x0C	; 12
    107c:	6a e5       	ldi	r22, 0x5A	; 90
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
	
	//arriere gauche
	MesPattes[ ARRIERE_GAUCHE ].epaule.pin = CONF_SERVO_PATTE_ARRIERE_GAUCHE_EPAULE;
    1084:	8f e0       	ldi	r24, 0x0F	; 15
    1086:	80 93 29 01 	sts	0x0129, r24
	MesPattes[ ARRIERE_GAUCHE ].epaule.index = CONF_SERVO_PATTE_ARRIERE_GAUCHE_EPAULE_INDEX;
    108a:	86 e0       	ldi	r24, 0x06	; 6
    108c:	80 93 2a 01 	sts	0x012A, r24
	MesPattes[ ARRIERE_GAUCHE ].epaule.angle = NEUTRE_EPAULE_MILIEU_GAUCHE;
    1090:	10 93 2b 01 	sts	0x012B, r17
	MesPattes[ ARRIERE_GAUCHE ].epaule.offset = 0U;
    1094:	10 92 2c 01 	sts	0x012C, r1
	DrvAddServo( MesPattes[ ARRIERE_GAUCHE ].epaule.pin ,MesPattes[ ARRIERE_GAUCHE ].epaule.angle );
    1098:	8f e0       	ldi	r24, 0x0F	; 15
    109a:	6a e5       	ldi	r22, 0x5A	; 90
    109c:	70 e0       	ldi	r23, 0x00	; 0
    109e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
		
	MesPattes[ ARRIERE_GAUCHE ].coude.pin = CONF_SERVO_PATTE_ARRIERE_GAUCHE_COUDE;
    10a2:	8e e0       	ldi	r24, 0x0E	; 14
    10a4:	80 93 2d 01 	sts	0x012D, r24
	MesPattes[ ARRIERE_GAUCHE ].coude.index = CONF_SERVO_PATTE_ARRIERE_GAUCHE_COUDE_INDEX;
    10a8:	87 e0       	ldi	r24, 0x07	; 7
    10aa:	80 93 2e 01 	sts	0x012E, r24
	MesPattes[ ARRIERE_GAUCHE ].coude.angle = NEUTRE_COUDE_ARRIERE_GAUCHE;
    10ae:	10 93 2f 01 	sts	0x012F, r17
	MesPattes[ ARRIERE_GAUCHE ].coude.offset = 0U;
    10b2:	10 92 30 01 	sts	0x0130, r1
	DrvAddServo( MesPattes[ ARRIERE_GAUCHE ].coude.pin ,MesPattes[ ARRIERE_GAUCHE ].coude.angle);
    10b6:	8e e0       	ldi	r24, 0x0E	; 14
    10b8:	6a e5       	ldi	r22, 0x5A	; 90
    10ba:	70 e0       	ldi	r23, 0x00	; 0
    10bc:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
					
	//avant droite
	MesPattes[ AVANT_DROITE ].epaule.pin = CONF_SERVO_PATTE_AVANT_DROITE_EPAULE;
    10c0:	86 e1       	ldi	r24, 0x16	; 22
    10c2:	80 93 31 01 	sts	0x0131, r24
	MesPattes[ AVANT_DROITE ].epaule.index = CONF_SERVO_PATTE_AVANT_DROITE_EPAULE_INDEX;
    10c6:	88 e0       	ldi	r24, 0x08	; 8
    10c8:	80 93 32 01 	sts	0x0132, r24
	MesPattes[ AVANT_DROITE ].epaule.angle = NEUTRE_EPAULE_AVANT_DROITE;
    10cc:	10 93 33 01 	sts	0x0133, r17
	MesPattes[ AVANT_DROITE ].epaule.offset = -7;
    10d0:	0f 2e       	mov	r0, r31
    10d2:	f9 ef       	ldi	r31, 0xF9	; 249
    10d4:	df 2e       	mov	r13, r31
    10d6:	f0 2d       	mov	r31, r0
    10d8:	d0 92 34 01 	sts	0x0134, r13
	DrvAddServo( MesPattes[ AVANT_DROITE ].epaule.pin ,MesPattes[ AVANT_DROITE ].epaule.angle);
    10dc:	86 e1       	ldi	r24, 0x16	; 22
    10de:	6a e5       	ldi	r22, 0x5A	; 90
    10e0:	70 e0       	ldi	r23, 0x00	; 0
    10e2:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
		
	MesPattes[ AVANT_DROITE ].coude.pin = CONF_SERVO_PATTE_AVANT_DROITE_COUDE;
    10e6:	87 e1       	ldi	r24, 0x17	; 23
    10e8:	80 93 35 01 	sts	0x0135, r24
	MesPattes[ AVANT_DROITE ].coude.index = CONF_SERVO_PATTE_AVANT_DROITE_COUDE_INDEX;
    10ec:	89 e0       	ldi	r24, 0x09	; 9
    10ee:	80 93 36 01 	sts	0x0136, r24
	MesPattes[ AVANT_DROITE ].coude.angle = NEUTRE_COUDE_AVANT_DROITE;
    10f2:	10 93 37 01 	sts	0x0137, r17
	MesPattes[ AVANT_DROITE ].coude.offset = 0U;
    10f6:	10 92 38 01 	sts	0x0138, r1
	DrvAddServo( MesPattes[ AVANT_DROITE ].coude.pin ,MesPattes[ AVANT_DROITE ].coude.angle );
    10fa:	87 e1       	ldi	r24, 0x17	; 23
    10fc:	6a e5       	ldi	r22, 0x5A	; 90
    10fe:	70 e0       	ldi	r23, 0x00	; 0
    1100:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
					
	//milieu droite
	MesPattes[ MILIEU_DROITE ].epaule.pin = CONF_SERVO_PATTE_MILIEU_DROITE_EPAULE;
    1104:	8e e1       	ldi	r24, 0x1E	; 30
    1106:	80 93 39 01 	sts	0x0139, r24
	MesPattes[ MILIEU_DROITE ].epaule.index = CONF_SERVO_PATTE_MILIEU_DROITE_EPAULE_INDEX;
    110a:	e0 92 3a 01 	sts	0x013A, r14
	MesPattes[ MILIEU_DROITE ].epaule.angle = NEUTRE_EPAULE_MILIEU_DROITE;
    110e:	10 93 3b 01 	sts	0x013B, r17
	MesPattes[ MILIEU_DROITE ].epaule.offset = 0U;
    1112:	10 92 3c 01 	sts	0x013C, r1
	DrvAddServo( MesPattes[ MILIEU_DROITE ].epaule.pin ,MesPattes[ MILIEU_DROITE ].epaule.angle );
    1116:	6a e5       	ldi	r22, 0x5A	; 90
    1118:	70 e0       	ldi	r23, 0x00	; 0
    111a:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
		
	MesPattes[ MILIEU_DROITE ].coude.pin = CONF_SERVO_PATTE_MILIEU_DROITE_COUDE;
    111e:	8f e1       	ldi	r24, 0x1F	; 31
    1120:	80 93 3d 01 	sts	0x013D, r24
	MesPattes[ MILIEU_DROITE ].coude.index = CONF_SERVO_PATTE_MILIEU_DROITE_COUDE_INDEX;
    1124:	f0 92 3e 01 	sts	0x013E, r15
	MesPattes[ MILIEU_DROITE ].coude.angle = NEUTRE_COUDE_MILIEU_DROITE;
    1128:	10 93 3f 01 	sts	0x013F, r17
	MesPattes[ MILIEU_DROITE ].coude.offset = 0U;
    112c:	10 92 40 01 	sts	0x0140, r1
	DrvAddServo( MesPattes[ MILIEU_DROITE ].coude.pin ,MesPattes[ MILIEU_DROITE ].coude.angle );
    1130:	6a e5       	ldi	r22, 0x5A	; 90
    1132:	70 e0       	ldi	r23, 0x00	; 0
    1134:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
					
	//arriere droite
	MesPattes[ ARRIERE_DROITE ].epaule.pin = CONF_SERVO_PATTE_ARRIERE_DROITE_EPAULE;
    1138:	8c e1       	ldi	r24, 0x1C	; 28
    113a:	80 93 41 01 	sts	0x0141, r24
	MesPattes[ ARRIERE_DROITE ].epaule.index = CONF_SERVO_PATTE_ARRIERE_DROITE_EPAULE_INDEX;
    113e:	00 93 42 01 	sts	0x0142, r16
	MesPattes[ ARRIERE_DROITE ].epaule.angle = NEUTRE_EPAULE_MILIEU_DROITE;
    1142:	10 93 43 01 	sts	0x0143, r17
	MesPattes[ ARRIERE_DROITE ].epaule.offset = -7;
    1146:	d0 92 44 01 	sts	0x0144, r13
	DrvAddServo( MesPattes[ ARRIERE_DROITE ].epaule.pin ,MesPattes[ ARRIERE_DROITE ].epaule.angle );
    114a:	6a e5       	ldi	r22, 0x5A	; 90
    114c:	70 e0       	ldi	r23, 0x00	; 0
    114e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
		
	MesPattes[ ARRIERE_DROITE ].coude.pin = CONF_SERVO_PATTE_ARRIERE_DROITE_COUDE;
    1152:	8d e1       	ldi	r24, 0x1D	; 29
    1154:	80 93 45 01 	sts	0x0145, r24
	MesPattes[ ARRIERE_DROITE ].coude.index = CONF_SERVO_PATTE_ARRIERE_DROITE_COUDE_INDEX;
    1158:	c0 92 46 01 	sts	0x0146, r12
	MesPattes[ ARRIERE_DROITE ].coude.angle = NEUTRE_COUDE_ARRIERE_DROITE;
    115c:	10 93 47 01 	sts	0x0147, r17
	MesPattes[ ARRIERE_DROITE ].coude.offset = 2;
    1160:	b0 92 48 01 	sts	0x0148, r11
	DrvAddServo( MesPattes[ ARRIERE_DROITE ].coude.pin ,MesPattes[ ARRIERE_DROITE ].coude.angle );
    1164:	6a e5       	ldi	r22, 0x5A	; 90
    1166:	70 e0       	ldi	r23, 0x00	; 0
    1168:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
		
}
    116c:	1f 91       	pop	r17
    116e:	0f 91       	pop	r16
    1170:	ff 90       	pop	r15
    1172:	ef 90       	pop	r14
    1174:	df 90       	pop	r13
    1176:	cf 90       	pop	r12
    1178:	bf 90       	pop	r11
    117a:	08 95       	ret

0000117c <CtrlPatteMove>:

//on bouge une patte
Boolean CtrlPatteMove( Int8U index, Int8U angle_epaule, Int8U angle_coude, EServoVitesse vitesse )
{
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	02 2f       	mov	r16, r18
	Int8U ret = 0x00;
	MesPattes[ index ].epaule.angle = angle_epaule;
    1186:	c8 2f       	mov	r28, r24
    1188:	d0 e0       	ldi	r29, 0x00	; 0
    118a:	fe 01       	movw	r30, r28
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	ee 0f       	add	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	ee 0f       	add	r30, r30
    1196:	ff 1f       	adc	r31, r31
    1198:	e7 5e       	subi	r30, 0xE7	; 231
    119a:	fe 4f       	sbci	r31, 0xFE	; 254
    119c:	62 83       	std	Z+2, r22	; 0x02
	MesPattes[ index ].coude.angle = angle_coude;
    119e:	46 83       	std	Z+6, r20	; 0x06
	
	if ( DrvServoMoveToPosition( MesPattes[ index ].epaule.index, MesPattes[ index ].epaule.angle + MesPattes[ index ].epaule.offset , vitesse ) == TRUE )	
    11a0:	83 81       	ldd	r24, Z+3	; 0x03
    11a2:	99 27       	eor	r25, r25
    11a4:	87 fd       	sbrc	r24, 7
    11a6:	90 95       	com	r25
    11a8:	9c 01       	movw	r18, r24
    11aa:	26 0f       	add	r18, r22
    11ac:	31 1d       	adc	r19, r1
    11ae:	b9 01       	movw	r22, r18
    11b0:	81 81       	ldd	r24, Z+1	; 0x01
    11b2:	40 2f       	mov	r20, r16
    11b4:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
}

//on bouge une patte
Boolean CtrlPatteMove( Int8U index, Int8U angle_epaule, Int8U angle_coude, EServoVitesse vitesse )
{
	Int8U ret = 0x00;
    11b8:	11 e0       	ldi	r17, 0x01	; 1
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <CtrlPatteMove+0x44>
    11be:	10 e0       	ldi	r17, 0x00	; 0
	{
		//si on a atteind la position
		ret = (1U << 0U);
	}
	//on deplace tjrs le coude a sa vitesse max
	if ( DrvServoMoveToPosition( MesPattes[ index ].coude.index, MesPattes[ index ].coude.angle + MesPattes[ index ].coude.offset, vitesse ) == TRUE )	
    11c0:	cc 0f       	add	r28, r28
    11c2:	dd 1f       	adc	r29, r29
    11c4:	cc 0f       	add	r28, r28
    11c6:	dd 1f       	adc	r29, r29
    11c8:	cc 0f       	add	r28, r28
    11ca:	dd 1f       	adc	r29, r29
    11cc:	c7 5e       	subi	r28, 0xE7	; 231
    11ce:	de 4f       	sbci	r29, 0xFE	; 254
    11d0:	6f 81       	ldd	r22, Y+7	; 0x07
    11d2:	77 27       	eor	r23, r23
    11d4:	67 fd       	sbrc	r22, 7
    11d6:	70 95       	com	r23
    11d8:	8e 81       	ldd	r24, Y+6	; 0x06
    11da:	68 0f       	add	r22, r24
    11dc:	71 1d       	adc	r23, r1
    11de:	8d 81       	ldd	r24, Y+5	; 0x05
    11e0:	40 2f       	mov	r20, r16
    11e2:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	09 f4       	brne	.+2      	; 0x11ec <CtrlPatteMove+0x70>
	{
		//si on a atteind la position
		ret |= (1U << 1U);
    11ea:	12 60       	ori	r17, 0x02	; 2
	}
	
	if(ret == 0x03)
	{
		return TRUE;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	13 30       	cpi	r17, 0x03	; 3
    11f0:	09 f0       	breq	.+2      	; 0x11f4 <CtrlPatteMove+0x78>
    11f2:	80 e0       	ldi	r24, 0x00	; 0
	}
	else 
	{
		return FALSE;
	}
}
    11f4:	df 91       	pop	r29
    11f6:	cf 91       	pop	r28
    11f8:	1f 91       	pop	r17
    11fa:	0f 91       	pop	r16
    11fc:	08 95       	ret

000011fe <CtrlPatteDirectMove>:

//on bouge une patte direct sans attendre quel finisse son mouvement
Boolean CtrlPatteDirectMove( Int8U index, Int8U angle_epaule, Int8U angle_coude, EServoVitesse vitesse )
{
    11fe:	0f 93       	push	r16
    1200:	1f 93       	push	r17
    1202:	cf 93       	push	r28
    1204:	df 93       	push	r29
    1206:	02 2f       	mov	r16, r18
	Int8U ret = 0x00;
	MesPattes[ index ].epaule.angle = angle_epaule;
    1208:	c8 2f       	mov	r28, r24
    120a:	d0 e0       	ldi	r29, 0x00	; 0
    120c:	fe 01       	movw	r30, r28
    120e:	ee 0f       	add	r30, r30
    1210:	ff 1f       	adc	r31, r31
    1212:	ee 0f       	add	r30, r30
    1214:	ff 1f       	adc	r31, r31
    1216:	ee 0f       	add	r30, r30
    1218:	ff 1f       	adc	r31, r31
    121a:	e7 5e       	subi	r30, 0xE7	; 231
    121c:	fe 4f       	sbci	r31, 0xFE	; 254
    121e:	62 83       	std	Z+2, r22	; 0x02
	MesPattes[ index ].coude.angle = angle_coude;
    1220:	46 83       	std	Z+6, r20	; 0x06
	
	if ( DrvServoDirectMoveToPosition( MesPattes[ index ].epaule.index, MesPattes[ index ].epaule.angle + MesPattes[ index ].epaule.offset, vitesse ) == TRUE )	
    1222:	83 81       	ldd	r24, Z+3	; 0x03
    1224:	99 27       	eor	r25, r25
    1226:	87 fd       	sbrc	r24, 7
    1228:	90 95       	com	r25
    122a:	9c 01       	movw	r18, r24
    122c:	26 0f       	add	r18, r22
    122e:	31 1d       	adc	r19, r1
    1230:	b9 01       	movw	r22, r18
    1232:	81 81       	ldd	r24, Z+1	; 0x01
    1234:	40 2f       	mov	r20, r16
    1236:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DrvServoDirectMoveToPosition>
}

//on bouge une patte direct sans attendre quel finisse son mouvement
Boolean CtrlPatteDirectMove( Int8U index, Int8U angle_epaule, Int8U angle_coude, EServoVitesse vitesse )
{
	Int8U ret = 0x00;
    123a:	11 e0       	ldi	r17, 0x01	; 1
    123c:	81 30       	cpi	r24, 0x01	; 1
    123e:	09 f0       	breq	.+2      	; 0x1242 <CtrlPatteDirectMove+0x44>
    1240:	10 e0       	ldi	r17, 0x00	; 0
	{
		//si on a atteind la position
		ret = (1U << 0U);
	}
	//on deplace tjrs le coude a sa vitesse max
	if ( DrvServoDirectMoveToPosition( MesPattes[ index ].coude.index, MesPattes[ index ].coude.angle + MesPattes[ index ].coude.offset, vitesse ) == TRUE )	
    1242:	cc 0f       	add	r28, r28
    1244:	dd 1f       	adc	r29, r29
    1246:	cc 0f       	add	r28, r28
    1248:	dd 1f       	adc	r29, r29
    124a:	cc 0f       	add	r28, r28
    124c:	dd 1f       	adc	r29, r29
    124e:	c7 5e       	subi	r28, 0xE7	; 231
    1250:	de 4f       	sbci	r29, 0xFE	; 254
    1252:	6f 81       	ldd	r22, Y+7	; 0x07
    1254:	77 27       	eor	r23, r23
    1256:	67 fd       	sbrc	r22, 7
    1258:	70 95       	com	r23
    125a:	8e 81       	ldd	r24, Y+6	; 0x06
    125c:	68 0f       	add	r22, r24
    125e:	71 1d       	adc	r23, r1
    1260:	8d 81       	ldd	r24, Y+5	; 0x05
    1262:	40 2f       	mov	r20, r16
    1264:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DrvServoDirectMoveToPosition>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	09 f4       	brne	.+2      	; 0x126e <CtrlPatteDirectMove+0x70>
	{
		//si on a atteind la position
		ret |= (1U << 1U);
    126c:	12 60       	ori	r17, 0x02	; 2
	}
	
	if(ret == 0x03)
	{
		return TRUE;
    126e:	81 e0       	ldi	r24, 0x01	; 1
    1270:	13 30       	cpi	r17, 0x03	; 3
    1272:	09 f0       	breq	.+2      	; 0x1276 <CtrlPatteDirectMove+0x78>
    1274:	80 e0       	ldi	r24, 0x00	; 0
	}
	else 
	{
		return FALSE;
	}
}
    1276:	df 91       	pop	r29
    1278:	cf 91       	pop	r28
    127a:	1f 91       	pop	r17
    127c:	0f 91       	pop	r16
    127e:	08 95       	ret

00001280 <CtrlTete>:


/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////
//init
void CtrlTete( void ) 
{ 
    1280:	cf 93       	push	r28
    1282:	df 93       	push	r29
	//on fixe les variables
	MaTete.is_scaning = FALSE;
    1284:	10 92 4c 01 	sts	0x014C, r1
	index_scan_position = 0U;
    1288:	10 92 49 01 	sts	0x0149, r1
		
	//on ajoute les 2 servo a la tete
	MaTete.angle_h = NEUTRE_TETE_HORIZONTAL;
    128c:	ca e4       	ldi	r28, 0x4A	; 74
    128e:	d1 e0       	ldi	r29, 0x01	; 1
    1290:	83 e5       	ldi	r24, 0x53	; 83
    1292:	88 83       	st	Y, r24
	MaTete.angle_v = NEUTRE_TETE_VERTICAL;
    1294:	86 e9       	ldi	r24, 0x96	; 150
    1296:	89 83       	std	Y+1, r24	; 0x01
	DrvAddServo( CONF_SERVO_TETE_H , MaTete.angle_h );
    1298:	88 e0       	ldi	r24, 0x08	; 8
    129a:	63 e5       	ldi	r22, 0x53	; 83
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
	DrvAddServo( CONF_SERVO_TETE_V , MaTete.angle_v );
    12a2:	69 81       	ldd	r22, Y+1	; 0x01
    12a4:	89 e0       	ldi	r24, 0x09	; 9
    12a6:	70 e0       	ldi	r23, 0x00	; 0
    12a8:	0e 94 55 0c 	call	0x18aa	; 0x18aa <DrvAddServo>
}
    12ac:	df 91       	pop	r29
    12ae:	cf 91       	pop	r28
    12b0:	08 95       	ret

000012b2 <CtrlTeteDispatcher>:

//dispatacher d'event
void CtrlTeteDispatcher( Event_t event )  
{
	if ( DrvEventTestEvent(event ,CONF_EVENT_TIMER_1S ))
    12b2:	62 e0       	ldi	r22, 0x02	; 2
    12b4:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DrvEventTestEvent>
    12b8:	88 23       	and	r24, r24
    12ba:	f9 f0       	breq	.+62     	; 0x12fa <CtrlTeteDispatcher+0x48>
	{	
		//si le scan est activé
		if( MaTete.is_scaning == TRUE )	
    12bc:	80 91 4c 01 	lds	r24, 0x014C
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	d9 f4       	brne	.+54     	; 0x12fa <CtrlTeteDispatcher+0x48>
		{
			//on fait un balayage horizontal de la tete
			if (DrvServoMoveToPosition( CONF_SERVO_TETE_H_INDEX, scan_position[index_scan_position], E_SERVO_VITESSE_5) == TRUE)
    12c4:	80 91 49 01 	lds	r24, 0x0149
    12c8:	e1 e0       	ldi	r30, 0x01	; 1
    12ca:	f1 e0       	ldi	r31, 0x01	; 1
    12cc:	e8 0f       	add	r30, r24
    12ce:	f1 1d       	adc	r31, r1
    12d0:	60 81       	ld	r22, Z
    12d2:	80 e0       	ldi	r24, 0x00	; 0
    12d4:	70 e0       	ldi	r23, 0x00	; 0
    12d6:	40 e0       	ldi	r20, 0x00	; 0
    12d8:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	29 f4       	brne	.+10     	; 0x12ea <CtrlTeteDispatcher+0x38>
			{
				index_scan_position++;
    12e0:	80 91 49 01 	lds	r24, 0x0149
    12e4:	8f 5f       	subi	r24, 0xFF	; 255
    12e6:	80 93 49 01 	sts	0x0149, r24
			}
			if(index_scan_position == NB_SCAN_POSTION)
    12ea:	80 91 49 01 	lds	r24, 0x0149
    12ee:	8b 30       	cpi	r24, 0x0B	; 11
    12f0:	21 f4       	brne	.+8      	; 0x12fa <CtrlTeteDispatcher+0x48>
			{
				//on a fini de scanner
				index_scan_position = 0U;
    12f2:	10 92 49 01 	sts	0x0149, r1
				MaTete.is_scaning = FALSE;
    12f6:	10 92 4c 01 	sts	0x014C, r1
    12fa:	08 95       	ret

000012fc <CtrlTeteStartScan>:
}	

//on start le scan de la tete
void CtrlTeteStartScan( void )
{
	index_scan_position = 0U;	
    12fc:	10 92 49 01 	sts	0x0149, r1
	MaTete.is_scaning = TRUE;
    1300:	81 e0       	ldi	r24, 0x01	; 1
    1302:	80 93 4c 01 	sts	0x014C, r24
}
    1306:	08 95       	ret

00001308 <CtrlTeteStopScan>:

//on stop le scan de la tete
void CtrlTeteStopScan( void )
{
	MaTete.is_scaning = FALSE;
    1308:	10 92 4c 01 	sts	0x014C, r1
}	
    130c:	08 95       	ret

0000130e <CtrlTeteGetStruct>:

//on recupere la structure
head_member_t* CtrlTeteGetStruct( void )
{
	return &MaTete;	
}
    130e:	8a e4       	ldi	r24, 0x4A	; 74
    1310:	91 e0       	ldi	r25, 0x01	; 1
    1312:	08 95       	ret

00001314 <CtrlTeteMove>:

//on bouge la tete
void CtrlTeteMove( Int8U angle_tete_hor, Int8U angle_tete_ver, Int8U vitesse )
{
    1314:	1f 93       	push	r17
    1316:	98 2f       	mov	r25, r24
    1318:	14 2f       	mov	r17, r20
	MaTete.angle_h = angle_tete_hor;
    131a:	80 93 4a 01 	sts	0x014A, r24
	MaTete.angle_v = angle_tete_ver;
    131e:	60 93 4b 01 	sts	0x014B, r22
	DrvServoMoveToPosition( CONF_SERVO_TETE_H_INDEX, MaTete.angle_h, vitesse);		
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	69 2f       	mov	r22, r25
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
	DrvServoMoveToPosition( CONF_SERVO_TETE_V_INDEX, MaTete.angle_v, vitesse);
    132c:	60 91 4b 01 	lds	r22, 0x014B
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	70 e0       	ldi	r23, 0x00	; 0
    1334:	41 2f       	mov	r20, r17
    1336:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
}
    133a:	1f 91       	pop	r17
    133c:	08 95       	ret

0000133e <CtrlUartProtocole>:

/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////
//init
void CtrlUartProtocole( void )
{
}
    133e:	08 95       	ret

00001340 <CtrlUartProtocoleDispatcher>:

//dispatcher
void CtrlUartProtocoleDispatcher( Event_t event )
{	
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	ec 01       	movw	r28, r24
	//si on a recu un message provenant de la tete
	if ( DrvEventTestEvent(event ,CONF_EVENT_HEAD_MSG_RCV ))
    134a:	66 e0       	ldi	r22, 0x06	; 6
    134c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DrvEventTestEvent>
    1350:	88 23       	and	r24, r24
    1352:	21 f1       	breq	.+72     	; 0x139c <CtrlUartProtocoleDispatcher+0x5c>
	{
		//on allume la led pendant le traitement
		DrvLedOn(CONF_LED_RX_HEAD);
    1354:	82 e0       	ldi	r24, 0x02	; 2
    1356:	0e 94 0d 0b 	call	0x161a	; 0x161a <DrvLedOn>
		//on lit le message
		DrvUart0ReadMessage( i_message_from_head, &i_message_len_from_head );
    135a:	0e e1       	ldi	r16, 0x1E	; 30
    135c:	12 e0       	ldi	r17, 0x02	; 2
    135e:	c8 01       	movw	r24, r16
    1360:	6e e4       	ldi	r22, 0x4E	; 78
    1362:	71 e0       	ldi	r23, 0x01	; 1
    1364:	0e 94 61 13 	call	0x26c2	; 0x26c2 <DrvUart0ReadMessage>
		//on envoie direct le message sur le wifi
		DrvUart1SendMessage( i_message_from_head, i_message_len_from_head );
    1368:	c8 01       	movw	r24, r16
    136a:	60 91 4e 01 	lds	r22, 0x014E
    136e:	0e 94 b1 13 	call	0x2762	; 0x2762 <DrvUart1SendMessage>
		//on test si on prend des infos
		if( i_message_len_from_head > 0U )
    1372:	80 91 4e 01 	lds	r24, 0x014E
    1376:	88 23       	and	r24, r24
    1378:	71 f0       	breq	.+28     	; 0x1396 <CtrlUartProtocoleDispatcher+0x56>
		{
			//message ultrason
			//----------------
			if( i_message_from_head[ 2 ] == 0U )
    137a:	80 91 20 02 	lds	r24, 0x0220
    137e:	88 23       	and	r24, r24
    1380:	51 f4       	brne	.+20     	; 0x1396 <CtrlUartProtocoleDispatcher+0x56>
	DrvUart0SendMessage( message, 5U );
}

static void CtrlUartProtocoleHeadUs( void ) 
{
	ultrason_mesure = (Int16U)((Int16U)(i_message_from_head[ 3U ] >> 8U )| i_message_from_head[ 4U ]);
    1382:	80 91 22 02 	lds	r24, 0x0222
    1386:	80 93 4f 01 	sts	0x014F, r24
    138a:	10 92 50 01 	sts	0x0150, r1
	//on lance l'event
	DrvEventAddEvent( CONF_EVENT_ALERT_US_PROX );
    138e:	87 e0       	ldi	r24, 0x07	; 7
    1390:	90 e0       	ldi	r25, 0x00	; 0
    1392:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DrvEventAddEvent>
			{
				
			}		
		}
		//on eteinds la led apres le traitement
		DrvLedOff(CONF_LED_RX_HEAD);
    1396:	82 e0       	ldi	r24, 0x02	; 2
    1398:	0e 94 46 0b 	call	0x168c	; 0x168c <DrvLedOff>
	}	
	
	//si on a recu un message provenant du wifi
	if ( DrvEventTestEvent(event ,CONF_EVENT_DIGI_MSG_RCV ))
    139c:	ce 01       	movw	r24, r28
    139e:	65 e0       	ldi	r22, 0x05	; 5
    13a0:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DrvEventTestEvent>
    13a4:	88 23       	and	r24, r24
    13a6:	09 f4       	brne	.+2      	; 0x13aa <CtrlUartProtocoleDispatcher+0x6a>
    13a8:	cf c0       	rjmp	.+414    	; 0x1548 <CtrlUartProtocoleDispatcher+0x208>
	{
		//on allume la led pendant le traitement
		DrvLedOn(CONF_LED_RX_DIGI);
    13aa:	83 e0       	ldi	r24, 0x03	; 3
    13ac:	0e 94 0d 0b 	call	0x161a	; 0x161a <DrvLedOn>
		//on lit le message provenant du wifi
		DrvUart1ReadMessage( i_message_from_digi, &i_message_len_from_digi );
    13b0:	8c ee       	ldi	r24, 0xEC	; 236
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	6d e4       	ldi	r22, 0x4D	; 77
    13b6:	71 e0       	ldi	r23, 0x01	; 1
    13b8:	0e 94 94 13 	call	0x2728	; 0x2728 <DrvUart1ReadMessage>
		//on test si on prend des infos
		if( i_message_len_from_digi > 0U )
    13bc:	60 91 4d 01 	lds	r22, 0x014D
    13c0:	66 23       	and	r22, r22
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <CtrlUartProtocoleDispatcher+0x86>
    13c4:	be c0       	rjmp	.+380    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
		{
			//si le message nous concerne
			//---------------------------
			if( i_message_from_digi[ 1U ] == 1U )
    13c6:	80 91 ed 01 	lds	r24, 0x01ED
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	09 f0       	breq	.+2      	; 0x13d0 <CtrlUartProtocoleDispatcher+0x90>
    13ce:	b5 c0       	rjmp	.+362    	; 0x153a <CtrlUartProtocoleDispatcher+0x1fa>
			{
				//on dispatch selon les controls
				
				//servos				 
				if( i_message_from_digi[ 2U ] == 0U )
    13d0:	80 91 ee 01 	lds	r24, 0x01EE
    13d4:	88 23       	and	r24, r24
    13d6:	09 f0       	breq	.+2      	; 0x13da <CtrlUartProtocoleDispatcher+0x9a>
    13d8:	89 c0       	rjmp	.+274    	; 0x14ec <CtrlUartProtocoleDispatcher+0x1ac>
////////////////////////////////////////PRIVATE FUNCTIONS/////////////////////////////////////////
static void CtrlUartProtocoleBodyServo( void ) 
{
	EServoVitesse vit;
	//on cherche la vitesse
	if( i_message_from_digi[ 5U ] == 0U )
    13da:	80 91 f1 01 	lds	r24, 0x01F1
    13de:	88 23       	and	r24, r24
    13e0:	51 f0       	breq	.+20     	; 0x13f6 <CtrlUartProtocoleDispatcher+0xb6>
	{
		vit = E_SERVO_VITESSE_0;
	}
	else if( i_message_from_digi[ 5U ] == 1U )
    13e2:	81 30       	cpi	r24, 0x01	; 1
    13e4:	51 f0       	breq	.+20     	; 0x13fa <CtrlUartProtocoleDispatcher+0xba>
	{
		vit = E_SERVO_VITESSE_1;
	}
	else if( i_message_from_digi[ 5U ] == 2U )
    13e6:	82 30       	cpi	r24, 0x02	; 2
    13e8:	51 f0       	breq	.+20     	; 0x13fe <CtrlUartProtocoleDispatcher+0xbe>
	{
		vit = E_SERVO_VITESSE_2;
	}
	else if( i_message_from_digi[ 5U ] == 3U )
    13ea:	83 30       	cpi	r24, 0x03	; 3
    13ec:	51 f0       	breq	.+20     	; 0x1402 <CtrlUartProtocoleDispatcher+0xc2>
	{
		vit = E_SERVO_VITESSE_3;
	}
	else if( i_message_from_digi[ 5U ] == 4U )
    13ee:	84 30       	cpi	r24, 0x04	; 4
    13f0:	51 f4       	brne	.+20     	; 0x1406 <CtrlUartProtocoleDispatcher+0xc6>
	{
		vit = E_SERVO_VITESSE_4;
    13f2:	44 e1       	ldi	r20, 0x14	; 20
    13f4:	09 c0       	rjmp	.+18     	; 0x1408 <CtrlUartProtocoleDispatcher+0xc8>
{
	EServoVitesse vit;
	//on cherche la vitesse
	if( i_message_from_digi[ 5U ] == 0U )
	{
		vit = E_SERVO_VITESSE_0;
    13f6:	44 e6       	ldi	r20, 0x64	; 100
    13f8:	07 c0       	rjmp	.+14     	; 0x1408 <CtrlUartProtocoleDispatcher+0xc8>
	}
	else if( i_message_from_digi[ 5U ] == 1U )
	{
		vit = E_SERVO_VITESSE_1;
    13fa:	40 e5       	ldi	r20, 0x50	; 80
    13fc:	05 c0       	rjmp	.+10     	; 0x1408 <CtrlUartProtocoleDispatcher+0xc8>
	}
	else if( i_message_from_digi[ 5U ] == 2U )
	{
		vit = E_SERVO_VITESSE_2;
    13fe:	4c e3       	ldi	r20, 0x3C	; 60
    1400:	03 c0       	rjmp	.+6      	; 0x1408 <CtrlUartProtocoleDispatcher+0xc8>
	}
	else if( i_message_from_digi[ 5U ] == 3U )
	{
		vit = E_SERVO_VITESSE_3;
    1402:	48 e2       	ldi	r20, 0x28	; 40
    1404:	01 c0       	rjmp	.+2      	; 0x1408 <CtrlUartProtocoleDispatcher+0xc8>
	{
		vit = E_SERVO_VITESSE_4;
	}
	else 
	{
		vit = E_SERVO_VITESSE_5;
    1406:	40 e0       	ldi	r20, 0x00	; 0
	}
					
	//on cherche le servo
	if( i_message_from_digi[ 3U ] == 0U )
    1408:	80 91 ef 01 	lds	r24, 0x01EF
    140c:	88 23       	and	r24, r24
    140e:	31 f4       	brne	.+12     	; 0x141c <CtrlUartProtocoleDispatcher+0xdc>
	{
		DrvServoMoveToPosition( CONF_SERVO_TETE_H_INDEX, i_message_from_digi[ 4U ], vit);	
    1410:	60 91 f0 01 	lds	r22, 0x01F0
    1414:	70 e0       	ldi	r23, 0x00	; 0
    1416:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    141a:	93 c0       	rjmp	.+294    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 1U )
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	31 f4       	brne	.+12     	; 0x142c <CtrlUartProtocoleDispatcher+0xec>
	{
		DrvServoMoveToPosition( CONF_SERVO_TETE_V_INDEX, i_message_from_digi[ 4U ], vit);	
    1420:	60 91 f0 01 	lds	r22, 0x01F0
    1424:	70 e0       	ldi	r23, 0x00	; 0
    1426:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    142a:	8b c0       	rjmp	.+278    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 2U )
    142c:	82 30       	cpi	r24, 0x02	; 2
    142e:	31 f4       	brne	.+12     	; 0x143c <CtrlUartProtocoleDispatcher+0xfc>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_AVANT_GAUCHE_EPAULE_INDEX, i_message_from_digi[ 4U ], vit);	
    1430:	60 91 f0 01 	lds	r22, 0x01F0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    143a:	83 c0       	rjmp	.+262    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 3U )
    143c:	83 30       	cpi	r24, 0x03	; 3
    143e:	31 f4       	brne	.+12     	; 0x144c <CtrlUartProtocoleDispatcher+0x10c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_AVANT_GAUCHE_COUDE_INDEX, i_message_from_digi[ 4U ], vit);	
    1440:	60 91 f0 01 	lds	r22, 0x01F0
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    144a:	7b c0       	rjmp	.+246    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 4U )
    144c:	84 30       	cpi	r24, 0x04	; 4
    144e:	31 f4       	brne	.+12     	; 0x145c <CtrlUartProtocoleDispatcher+0x11c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_MILIEU_GAUCHE_EPAULE_INDEX, i_message_from_digi[ 4U ], vit);	
    1450:	60 91 f0 01 	lds	r22, 0x01F0
    1454:	70 e0       	ldi	r23, 0x00	; 0
    1456:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    145a:	73 c0       	rjmp	.+230    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}	
	else if( i_message_from_digi[ 3U ] == 5U )
    145c:	85 30       	cpi	r24, 0x05	; 5
    145e:	31 f4       	brne	.+12     	; 0x146c <CtrlUartProtocoleDispatcher+0x12c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_MILIEU_GAUCHE_COUDE_INDEX, i_message_from_digi[ 4U ], vit);	
    1460:	60 91 f0 01 	lds	r22, 0x01F0
    1464:	70 e0       	ldi	r23, 0x00	; 0
    1466:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    146a:	6b c0       	rjmp	.+214    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 6U )
    146c:	86 30       	cpi	r24, 0x06	; 6
    146e:	31 f4       	brne	.+12     	; 0x147c <CtrlUartProtocoleDispatcher+0x13c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_ARRIERE_GAUCHE_EPAULE_INDEX, i_message_from_digi[ 4U ], vit);	
    1470:	60 91 f0 01 	lds	r22, 0x01F0
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    147a:	63 c0       	rjmp	.+198    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}	
	else if( i_message_from_digi[ 3U ] == 7U )
    147c:	87 30       	cpi	r24, 0x07	; 7
    147e:	31 f4       	brne	.+12     	; 0x148c <CtrlUartProtocoleDispatcher+0x14c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_ARRIERE_GAUCHE_COUDE_INDEX, i_message_from_digi[ 4U ], vit);	
    1480:	60 91 f0 01 	lds	r22, 0x01F0
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    148a:	5b c0       	rjmp	.+182    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 8U )
    148c:	88 30       	cpi	r24, 0x08	; 8
    148e:	31 f4       	brne	.+12     	; 0x149c <CtrlUartProtocoleDispatcher+0x15c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_AVANT_DROITE_EPAULE_INDEX, i_message_from_digi[ 4U ], vit);	
    1490:	60 91 f0 01 	lds	r22, 0x01F0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    149a:	53 c0       	rjmp	.+166    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 9U )
    149c:	89 30       	cpi	r24, 0x09	; 9
    149e:	31 f4       	brne	.+12     	; 0x14ac <CtrlUartProtocoleDispatcher+0x16c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_AVANT_DROITE_COUDE_INDEX, i_message_from_digi[ 4U ], vit);	
    14a0:	60 91 f0 01 	lds	r22, 0x01F0
    14a4:	70 e0       	ldi	r23, 0x00	; 0
    14a6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    14aa:	4b c0       	rjmp	.+150    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 10U )
    14ac:	8a 30       	cpi	r24, 0x0A	; 10
    14ae:	31 f4       	brne	.+12     	; 0x14bc <CtrlUartProtocoleDispatcher+0x17c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_MILIEU_DROITE_EPAULE_INDEX, i_message_from_digi[ 4U ], vit);	
    14b0:	60 91 f0 01 	lds	r22, 0x01F0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    14ba:	43 c0       	rjmp	.+134    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}	
	else if( i_message_from_digi[ 3U ] == 11U )
    14bc:	8b 30       	cpi	r24, 0x0B	; 11
    14be:	31 f4       	brne	.+12     	; 0x14cc <CtrlUartProtocoleDispatcher+0x18c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_MILIEU_DROITE_COUDE_INDEX, i_message_from_digi[ 4U ], vit);	
    14c0:	60 91 f0 01 	lds	r22, 0x01F0
    14c4:	70 e0       	ldi	r23, 0x00	; 0
    14c6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    14ca:	3b c0       	rjmp	.+118    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}
	else if( i_message_from_digi[ 3U ] == 12U )
    14cc:	8c 30       	cpi	r24, 0x0C	; 12
    14ce:	31 f4       	brne	.+12     	; 0x14dc <CtrlUartProtocoleDispatcher+0x19c>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_ARRIERE_DROITE_EPAULE_INDEX, i_message_from_digi[ 4U ], vit);	
    14d0:	60 91 f0 01 	lds	r22, 0x01F0
    14d4:	70 e0       	ldi	r23, 0x00	; 0
    14d6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    14da:	33 c0       	rjmp	.+102    	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	}	
	else if( i_message_from_digi[ 3U ] == 13U )
    14dc:	8d 30       	cpi	r24, 0x0D	; 13
    14de:	89 f5       	brne	.+98     	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	{
		DrvServoMoveToPosition( CONF_SERVO_PATTE_ARRIERE_DROITE_COUDE_INDEX, i_message_from_digi[ 4U ], vit);	
    14e0:	60 91 f0 01 	lds	r22, 0x01F0
    14e4:	70 e0       	ldi	r23, 0x00	; 0
    14e6:	0e 94 d5 0e 	call	0x1daa	; 0x1daa <DrvServoMoveToPosition>
    14ea:	2b c0       	rjmp	.+86     	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
				{
					CtrlUartProtocoleBodyServo();		
				}
							
				//controle des fonctions de la tete
				else if( i_message_from_digi[ 2U ] == 1U )
    14ec:	81 30       	cpi	r24, 0x01	; 1
    14ee:	39 f4       	brne	.+14     	; 0x14fe <CtrlUartProtocoleDispatcher+0x1be>
}

static void CtrlUartProtocoleBodyHead( void ) 
{
	//on lance un scan
	if( i_message_from_digi[ 3U ] == 0U )
    14f0:	80 91 ef 01 	lds	r24, 0x01EF
    14f4:	88 23       	and	r24, r24
    14f6:	29 f5       	brne	.+74     	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
	{
		CtrlTeteStartScan();
    14f8:	0e 94 7e 09 	call	0x12fc	; 0x12fc <CtrlTeteStartScan>
    14fc:	22 c0       	rjmp	.+68     	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
				{
					CtrlUartProtocoleBodyHead();
				}
				
				//marche			 
				else if( i_message_from_digi[ 2U ] == 2U )
    14fe:	82 30       	cpi	r24, 0x02	; 2
    1500:	01 f5       	brne	.+64     	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>

static void CtrlUartProtocoleBodyMarche( void ) 
{
	EServoVitesse vit;
	//on cherche la vitesse
	if( i_message_from_digi[ 4U ] == 0U )
    1502:	80 91 f0 01 	lds	r24, 0x01F0
    1506:	88 23       	and	r24, r24
    1508:	51 f0       	breq	.+20     	; 0x151e <CtrlUartProtocoleDispatcher+0x1de>
	{
		vit = E_SERVO_VITESSE_0;
	}
	else if( i_message_from_digi[ 4U ] == 1U )
    150a:	81 30       	cpi	r24, 0x01	; 1
    150c:	51 f0       	breq	.+20     	; 0x1522 <CtrlUartProtocoleDispatcher+0x1e2>
	{
		vit = E_SERVO_VITESSE_1;
	}
	else if( i_message_from_digi[ 4U ] == 2U )
    150e:	82 30       	cpi	r24, 0x02	; 2
    1510:	51 f0       	breq	.+20     	; 0x1526 <CtrlUartProtocoleDispatcher+0x1e6>
	{
		vit = E_SERVO_VITESSE_2;
	}
	else if( i_message_from_digi[ 4U ] == 3U )
    1512:	83 30       	cpi	r24, 0x03	; 3
    1514:	51 f0       	breq	.+20     	; 0x152a <CtrlUartProtocoleDispatcher+0x1ea>
	{
		vit = E_SERVO_VITESSE_3;
	}
	else if( i_message_from_digi[ 4U ] == 4U )
    1516:	84 30       	cpi	r24, 0x04	; 4
    1518:	51 f4       	brne	.+20     	; 0x152e <CtrlUartProtocoleDispatcher+0x1ee>
	{
		vit = E_SERVO_VITESSE_4;
    151a:	64 e1       	ldi	r22, 0x14	; 20
    151c:	09 c0       	rjmp	.+18     	; 0x1530 <CtrlUartProtocoleDispatcher+0x1f0>
{
	EServoVitesse vit;
	//on cherche la vitesse
	if( i_message_from_digi[ 4U ] == 0U )
	{
		vit = E_SERVO_VITESSE_0;
    151e:	64 e6       	ldi	r22, 0x64	; 100
    1520:	07 c0       	rjmp	.+14     	; 0x1530 <CtrlUartProtocoleDispatcher+0x1f0>
	}
	else if( i_message_from_digi[ 4U ] == 1U )
	{
		vit = E_SERVO_VITESSE_1;
    1522:	60 e5       	ldi	r22, 0x50	; 80
    1524:	05 c0       	rjmp	.+10     	; 0x1530 <CtrlUartProtocoleDispatcher+0x1f0>
	}
	else if( i_message_from_digi[ 4U ] == 2U )
	{
		vit = E_SERVO_VITESSE_2;
    1526:	6c e3       	ldi	r22, 0x3C	; 60
    1528:	03 c0       	rjmp	.+6      	; 0x1530 <CtrlUartProtocoleDispatcher+0x1f0>
	}
	else if( i_message_from_digi[ 4U ] == 3U )
	{
		vit = E_SERVO_VITESSE_3;
    152a:	68 e2       	ldi	r22, 0x28	; 40
    152c:	01 c0       	rjmp	.+2      	; 0x1530 <CtrlUartProtocoleDispatcher+0x1f0>
	{
		vit = E_SERVO_VITESSE_4;
	}
	else 
	{
		vit = E_SERVO_VITESSE_5;
    152e:	60 e0       	ldi	r22, 0x00	; 0
	}
					
	//on cherche la marche a suivre
	CtrlMarcheMove(i_message_from_digi[ 3U ], vit);	
    1530:	80 91 ef 01 	lds	r24, 0x01EF
    1534:	0e 94 eb 07 	call	0xfd6	; 0xfd6 <CtrlMarcheMove>
    1538:	04 c0       	rjmp	.+8      	; 0x1542 <CtrlUartProtocoleDispatcher+0x202>
			//si le message nous concerne pas
			//-------------------------------
			else
			{
				//on l'envoie a la tete
				DrvUart0SendMessage( i_message_from_digi, i_message_len_from_digi );
    153a:	8c ee       	ldi	r24, 0xEC	; 236
    153c:	91 e0       	ldi	r25, 0x01	; 1
    153e:	0e 94 7e 13 	call	0x26fc	; 0x26fc <DrvUart0SendMessage>
			}			
		}
		//on eteinds la led apres le traitement
		DrvLedOff(CONF_LED_RX_DIGI);			
    1542:	83 e0       	ldi	r24, 0x03	; 3
    1544:	0e 94 46 0b 	call	0x168c	; 0x168c <DrvLedOff>
	}	
}	
    1548:	df 91       	pop	r29
    154a:	cf 91       	pop	r28
    154c:	1f 91       	pop	r17
    154e:	0f 91       	pop	r16
    1550:	08 95       	ret

00001552 <CtrlUartProtocoleReadHeadUs>:

//on lit la mesure US
Int16U CtrlUartProtocoleReadHeadUs( void ) 
{
	return ultrason_mesure;
}	
    1552:	80 91 4f 01 	lds	r24, 0x014F
    1556:	90 91 50 01 	lds	r25, 0x0150
    155a:	08 95       	ret

0000155c <CtrlUartProtocoleSendReadHeadUs>:
	}
}

//valeur mesurer par l'us
void CtrlUartProtocoleSendReadHeadUs( void ) 
{
    155c:	df 93       	push	r29
    155e:	cf 93       	push	r28
    1560:	00 d0       	rcall	.+0      	; 0x1562 <CtrlUartProtocoleSendReadHeadUs+0x6>
    1562:	00 d0       	rcall	.+0      	; 0x1564 <CtrlUartProtocoleSendReadHeadUs+0x8>
    1564:	0f 92       	push	r0
    1566:	cd b7       	in	r28, 0x3d	; 61
    1568:	de b7       	in	r29, 0x3e	; 62
	Int8U message[ 5U ] = {'*',0,0,'#','#'};
    156a:	de 01       	movw	r26, r28
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	ec e0       	ldi	r30, 0x0C	; 12
    1570:	f1 e0       	ldi	r31, 0x01	; 1
    1572:	85 e0       	ldi	r24, 0x05	; 5
    1574:	01 90       	ld	r0, Z+
    1576:	0d 92       	st	X+, r0
    1578:	81 50       	subi	r24, 0x01	; 1
    157a:	e1 f7       	brne	.-8      	; 0x1574 <CtrlUartProtocoleSendReadHeadUs+0x18>
	//on l'envoie a la tete
	DrvUart0SendMessage( message, 5U );
    157c:	ce 01       	movw	r24, r28
    157e:	01 96       	adiw	r24, 0x01	; 1
    1580:	65 e0       	ldi	r22, 0x05	; 5
    1582:	0e 94 7e 13 	call	0x26fc	; 0x26fc <DrvUart0SendMessage>
}
    1586:	0f 90       	pop	r0
    1588:	0f 90       	pop	r0
    158a:	0f 90       	pop	r0
    158c:	0f 90       	pop	r0
    158e:	0f 90       	pop	r0
    1590:	cf 91       	pop	r28
    1592:	df 91       	pop	r29
    1594:	08 95       	ret

00001596 <DrvEvent>:
  
/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////
// Init du Drv Event 
void DrvEvent( void )
{
	event_flags = 0;
    1596:	10 92 52 01 	sts	0x0152, r1
    159a:	10 92 51 01 	sts	0x0151, r1
}
    159e:	08 95       	ret

000015a0 <DrvEventKillEvent>:
////////////////////////////////////////PRIVATE FUNCTIONS/////////////////////////////////////////

//
inline void DrvEventKillEvent(Event_t in_event) 
{
	ATOMIC(
    15a0:	f8 94       	cli
    15a2:	20 91 51 01 	lds	r18, 0x0151
    15a6:	30 91 52 01 	lds	r19, 0x0152
    15aa:	80 95       	com	r24
    15ac:	90 95       	com	r25
    15ae:	82 23       	and	r24, r18
    15b0:	93 23       	and	r25, r19
    15b2:	90 93 52 01 	sts	0x0152, r25
    15b6:	80 93 51 01 	sts	0x0151, r24
    15ba:	78 94       	sei
		event_flags = ~(in_event | ~event_flags);
	)
}
    15bc:	08 95       	ret

000015be <DrvEventGetEvent>:

//
inline Event_t DrvEventGetEvent(void)
{
  return event_flags;
}
    15be:	80 91 51 01 	lds	r24, 0x0151
    15c2:	90 91 52 01 	lds	r25, 0x0152
    15c6:	08 95       	ret

000015c8 <DrvEventTestEvent>:

//
inline Boolean DrvEventTestEvent(Event_t in_event,Int8U conf_event ) 
{
	if (( in_event & ( 1 << conf_event)) > 0 )
    15c8:	21 e0       	ldi	r18, 0x01	; 1
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	a9 01       	movw	r20, r18
    15ce:	02 c0       	rjmp	.+4      	; 0x15d4 <DrvEventTestEvent+0xc>
    15d0:	44 0f       	add	r20, r20
    15d2:	55 1f       	adc	r21, r21
    15d4:	6a 95       	dec	r22
    15d6:	e2 f7       	brpl	.-8      	; 0x15d0 <DrvEventTestEvent+0x8>
    15d8:	ba 01       	movw	r22, r20
    15da:	68 23       	and	r22, r24
    15dc:	79 23       	and	r23, r25
	{
		return TRUE;
    15de:	81 e0       	ldi	r24, 0x01	; 1
    15e0:	61 15       	cp	r22, r1
    15e2:	71 05       	cpc	r23, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <DrvEventTestEvent+0x20>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		return FALSE;
	}
}
    15e8:	08 95       	ret

000015ea <DrvEventAddEvent>:

//
inline Boolean DrvEventAddEvent(Event_t event)
{
	Boolean o_success = FALSE;
	event_flags |= (1<<event) ;
    15ea:	21 e0       	ldi	r18, 0x01	; 1
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	a9 01       	movw	r20, r18
    15f0:	02 c0       	rjmp	.+4      	; 0x15f6 <DrvEventAddEvent+0xc>
    15f2:	44 0f       	add	r20, r20
    15f4:	55 1f       	adc	r21, r21
    15f6:	8a 95       	dec	r24
    15f8:	e2 f7       	brpl	.-8      	; 0x15f2 <DrvEventAddEvent+0x8>
    15fa:	20 91 51 01 	lds	r18, 0x0151
    15fe:	30 91 52 01 	lds	r19, 0x0152
    1602:	24 2b       	or	r18, r20
    1604:	35 2b       	or	r19, r21
    1606:	30 93 52 01 	sts	0x0152, r19
    160a:	20 93 51 01 	sts	0x0151, r18
	o_success = TRUE;
	return o_success;
}
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	08 95       	ret

00001612 <DrvInterruptClearAllInterrupts>:
  
/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////
// On clear toutes les ITs 
void DrvInterruptClearAllInterrupts( void )
{
	cli();
    1612:	f8 94       	cli
}	
    1614:	08 95       	ret

00001616 <DrvInterruptSetAllInterrupts>:

// On clear toutes les ITs 
void DrvInterruptSetAllInterrupts( void )
{
	sei();
    1616:	78 94       	sei
}
    1618:	08 95       	ret

0000161a <DrvLedOn>:
}

// Allume la led
void DrvLedOn ( Int8U led_name )
{
	if( MesLeds[ led_name ].active_level == IO_LEVEL_VCC )
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	9c 01       	movw	r18, r24
    161e:	22 0f       	add	r18, r18
    1620:	33 1f       	adc	r19, r19
    1622:	28 0f       	add	r18, r24
    1624:	39 1f       	adc	r19, r25
    1626:	f9 01       	movw	r30, r18
    1628:	ee 0f       	add	r30, r30
    162a:	ff 1f       	adc	r31, r31
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	2e 0f       	add	r18, r30
    1632:	3f 1f       	adc	r19, r31
    1634:	f9 01       	movw	r30, r18
    1636:	e0 5b       	subi	r30, 0xB0	; 176
    1638:	fd 4f       	sbci	r31, 0xFD	; 253
    163a:	21 81       	ldd	r18, Z+1	; 0x01
    163c:	21 30       	cpi	r18, 0x01	; 1
    163e:	99 f4       	brne	.+38     	; 0x1666 <DrvLedOn+0x4c>
	{
		micIoPortsConfigureToHighLevel(MesLeds[ led_name ].pin_name);
    1640:	9c 01       	movw	r18, r24
    1642:	22 0f       	add	r18, r18
    1644:	33 1f       	adc	r19, r19
    1646:	82 0f       	add	r24, r18
    1648:	93 1f       	adc	r25, r19
    164a:	fc 01       	movw	r30, r24
    164c:	ee 0f       	add	r30, r30
    164e:	ff 1f       	adc	r31, r31
    1650:	ee 0f       	add	r30, r30
    1652:	ff 1f       	adc	r31, r31
    1654:	8e 0f       	add	r24, r30
    1656:	9f 1f       	adc	r25, r31
    1658:	fc 01       	movw	r30, r24
    165a:	e0 5b       	subi	r30, 0xB0	; 176
    165c:	fd 4f       	sbci	r31, 0xFD	; 253
    165e:	80 81       	ld	r24, Z
    1660:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <micIoPortsConfigureToHighLevel>
    1664:	08 95       	ret
	}
	else
	{
		micIoPortsConfigureToLowLevel(MesLeds[ led_name ].pin_name);
    1666:	9c 01       	movw	r18, r24
    1668:	22 0f       	add	r18, r18
    166a:	33 1f       	adc	r19, r19
    166c:	82 0f       	add	r24, r18
    166e:	93 1f       	adc	r25, r19
    1670:	fc 01       	movw	r30, r24
    1672:	ee 0f       	add	r30, r30
    1674:	ff 1f       	adc	r31, r31
    1676:	ee 0f       	add	r30, r30
    1678:	ff 1f       	adc	r31, r31
    167a:	8e 0f       	add	r24, r30
    167c:	9f 1f       	adc	r25, r31
    167e:	fc 01       	movw	r30, r24
    1680:	e0 5b       	subi	r30, 0xB0	; 176
    1682:	fd 4f       	sbci	r31, 0xFD	; 253
    1684:	80 81       	ld	r24, Z
    1686:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <micIoPortsConfigureToLowLevel>
    168a:	08 95       	ret

0000168c <DrvLedOff>:
}

// Etiends la led
void DrvLedOff ( Int8U led_name )
{
	if( MesLeds[ led_name ].active_level == IO_LEVEL_VCC )
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	9c 01       	movw	r18, r24
    1690:	22 0f       	add	r18, r18
    1692:	33 1f       	adc	r19, r19
    1694:	28 0f       	add	r18, r24
    1696:	39 1f       	adc	r19, r25
    1698:	f9 01       	movw	r30, r18
    169a:	ee 0f       	add	r30, r30
    169c:	ff 1f       	adc	r31, r31
    169e:	ee 0f       	add	r30, r30
    16a0:	ff 1f       	adc	r31, r31
    16a2:	2e 0f       	add	r18, r30
    16a4:	3f 1f       	adc	r19, r31
    16a6:	f9 01       	movw	r30, r18
    16a8:	e0 5b       	subi	r30, 0xB0	; 176
    16aa:	fd 4f       	sbci	r31, 0xFD	; 253
    16ac:	21 81       	ldd	r18, Z+1	; 0x01
    16ae:	21 30       	cpi	r18, 0x01	; 1
    16b0:	99 f4       	brne	.+38     	; 0x16d8 <DrvLedOff+0x4c>
	{
		micIoPortsConfigureToLowLevel(MesLeds[ led_name ].pin_name);
    16b2:	9c 01       	movw	r18, r24
    16b4:	22 0f       	add	r18, r18
    16b6:	33 1f       	adc	r19, r19
    16b8:	82 0f       	add	r24, r18
    16ba:	93 1f       	adc	r25, r19
    16bc:	fc 01       	movw	r30, r24
    16be:	ee 0f       	add	r30, r30
    16c0:	ff 1f       	adc	r31, r31
    16c2:	ee 0f       	add	r30, r30
    16c4:	ff 1f       	adc	r31, r31
    16c6:	8e 0f       	add	r24, r30
    16c8:	9f 1f       	adc	r25, r31
    16ca:	fc 01       	movw	r30, r24
    16cc:	e0 5b       	subi	r30, 0xB0	; 176
    16ce:	fd 4f       	sbci	r31, 0xFD	; 253
    16d0:	80 81       	ld	r24, Z
    16d2:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <micIoPortsConfigureToLowLevel>
    16d6:	08 95       	ret
	}
	else
	{
		micIoPortsConfigureToHighLevel(MesLeds[ led_name ].pin_name);
    16d8:	9c 01       	movw	r18, r24
    16da:	22 0f       	add	r18, r18
    16dc:	33 1f       	adc	r19, r19
    16de:	82 0f       	add	r24, r18
    16e0:	93 1f       	adc	r25, r19
    16e2:	fc 01       	movw	r30, r24
    16e4:	ee 0f       	add	r30, r30
    16e6:	ff 1f       	adc	r31, r31
    16e8:	ee 0f       	add	r30, r30
    16ea:	ff 1f       	adc	r31, r31
    16ec:	8e 0f       	add	r24, r30
    16ee:	9f 1f       	adc	r25, r31
    16f0:	fc 01       	movw	r30, r24
    16f2:	e0 5b       	subi	r30, 0xB0	; 176
    16f4:	fd 4f       	sbci	r31, 0xFD	; 253
    16f6:	80 81       	ld	r24, Z
    16f8:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <micIoPortsConfigureToHighLevel>
    16fc:	08 95       	ret

000016fe <DrvLedFlash_ISR>:


/////////////////////////////////////ISR PUBLIC FUNCTIONS////////////////////////////////////////
//ISR de flash de la led
void DrvLedFlash_ISR( void )
{
    16fe:	ef 92       	push	r14
    1700:	ff 92       	push	r15
    1702:	0f 93       	push	r16
    1704:	1f 93       	push	r17
    1706:	cf 93       	push	r28
    1708:	df 93       	push	r29
	for (Int8U loop_index = 0U ; loop_index < CONF_LED_NB ; loop_index++ )
    170a:	c3 e5       	ldi	r28, 0x53	; 83
    170c:	d2 e0       	ldi	r29, 0x02	; 2
    170e:	10 e0       	ldi	r17, 0x00	; 0
					MesLeds[ loop_index ].cpt_time_on++;
					if( MesLeds[ loop_index ].cpt_time_on == MesLeds[ loop_index ].time_on )
					{
						//fin de period de ON on met a OFF	
						DrvLedOff( loop_index );
						MesLeds[ loop_index ].actual_state = STATE_LED_OFF;
    1710:	01 e0       	ldi	r16, 0x01	; 1



/////////////////////////////////////ISR PUBLIC FUNCTIONS////////////////////////////////////////
//ISR de flash de la led
void DrvLedFlash_ISR( void )
    1712:	7e 01       	movw	r14, r28
{
	for (Int8U loop_index = 0U ; loop_index < CONF_LED_NB ; loop_index++ )
	{
		if( MesLeds[ loop_index ].flash_active == TRUE )
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	c9 f5       	brne	.+114    	; 0x178c <DrvLedFlash_ISR+0x8e>
		{
			if(MesLeds[ loop_index ].cpt_nb_flash < MesLeds[ loop_index ].nb_flash)
    171a:	9b 85       	ldd	r25, Y+11	; 0x0b
    171c:	8a 85       	ldd	r24, Y+10	; 0x0a
    171e:	98 17       	cp	r25, r24
    1720:	50 f5       	brcc	.+84     	; 0x1776 <DrvLedFlash_ISR+0x78>
			{
				//paire on allume
				if( MesLeds[ loop_index ].actual_state == STATE_LED_OFF )
    1722:	88 81       	ld	r24, Y
    1724:	81 30       	cpi	r24, 0x01	; 1
    1726:	89 f4       	brne	.+34     	; 0x174a <DrvLedFlash_ISR+0x4c>
				{
					MesLeds[ loop_index ].cpt_time_off++;
    1728:	88 85       	ldd	r24, Y+8	; 0x08
    172a:	99 85       	ldd	r25, Y+9	; 0x09
    172c:	01 96       	adiw	r24, 0x01	; 1
    172e:	99 87       	std	Y+9, r25	; 0x09
    1730:	88 87       	std	Y+8, r24	; 0x08
					if( MesLeds[ loop_index ].cpt_time_off == MesLeds[ loop_index ].time_off )
    1732:	2e 81       	ldd	r18, Y+6	; 0x06
    1734:	3f 81       	ldd	r19, Y+7	; 0x07
    1736:	82 17       	cp	r24, r18
    1738:	93 07       	cpc	r25, r19
    173a:	41 f5       	brne	.+80     	; 0x178c <DrvLedFlash_ISR+0x8e>
					{
						//fin de period de OFF on met a ON	
						DrvLedOn( loop_index );
    173c:	81 2f       	mov	r24, r17
    173e:	0e 94 0d 0b 	call	0x161a	; 0x161a <DrvLedOn>
						MesLeds[ loop_index ].actual_state = STATE_LED_ON;
    1742:	18 82       	st	Y, r1
						MesLeds[ loop_index ].cpt_time_off = 0;		
    1744:	19 86       	std	Y+9, r1	; 0x09
    1746:	18 86       	std	Y+8, r1	; 0x08
    1748:	21 c0       	rjmp	.+66     	; 0x178c <DrvLedFlash_ISR+0x8e>
					}			
				}	
				//impaire on eteinds
				else
				{
					MesLeds[ loop_index ].cpt_time_on++;
    174a:	f7 01       	movw	r30, r14
    174c:	84 81       	ldd	r24, Z+4	; 0x04
    174e:	95 81       	ldd	r25, Z+5	; 0x05
    1750:	01 96       	adiw	r24, 0x01	; 1
    1752:	95 83       	std	Z+5, r25	; 0x05
    1754:	84 83       	std	Z+4, r24	; 0x04
					if( MesLeds[ loop_index ].cpt_time_on == MesLeds[ loop_index ].time_on )
    1756:	22 81       	ldd	r18, Z+2	; 0x02
    1758:	33 81       	ldd	r19, Z+3	; 0x03
    175a:	82 17       	cp	r24, r18
    175c:	93 07       	cpc	r25, r19
    175e:	b1 f4       	brne	.+44     	; 0x178c <DrvLedFlash_ISR+0x8e>
					{
						//fin de period de ON on met a OFF	
						DrvLedOff( loop_index );
    1760:	81 2f       	mov	r24, r17
    1762:	0e 94 46 0b 	call	0x168c	; 0x168c <DrvLedOff>
						MesLeds[ loop_index ].actual_state = STATE_LED_OFF;
    1766:	f7 01       	movw	r30, r14
    1768:	00 83       	st	Z, r16
						MesLeds[ loop_index ].cpt_time_on = 0;	
    176a:	15 82       	std	Z+5, r1	; 0x05
    176c:	14 82       	std	Z+4, r1	; 0x04
						//on incremente le nombre de flash a chaque passage a off
						MesLeds[ loop_index ].cpt_nb_flash++;
    176e:	83 85       	ldd	r24, Z+11	; 0x0b
    1770:	8f 5f       	subi	r24, 0xFF	; 255
    1772:	83 87       	std	Z+11, r24	; 0x0b
    1774:	0b c0       	rjmp	.+22     	; 0x178c <DrvLedFlash_ISR+0x8e>
				}
			}	
			//plus de flash a faire
			else
			{
				MesLeds[ loop_index ].flash_active	= FALSE;
    1776:	19 82       	std	Y+1, r1	; 0x01
				MesLeds[ loop_index ].time_on		= 0U;
    1778:	1b 82       	std	Y+3, r1	; 0x03
    177a:	1a 82       	std	Y+2, r1	; 0x02
				MesLeds[ loop_index ].cpt_time_on	= 0U;
    177c:	1d 82       	std	Y+5, r1	; 0x05
    177e:	1c 82       	std	Y+4, r1	; 0x04
				MesLeds[ loop_index ].time_off		= 0U;
    1780:	1f 82       	std	Y+7, r1	; 0x07
    1782:	1e 82       	std	Y+6, r1	; 0x06
				MesLeds[ loop_index ].cpt_time_off	= 0U;
    1784:	19 86       	std	Y+9, r1	; 0x09
    1786:	18 86       	std	Y+8, r1	; 0x08
				MesLeds[ loop_index ].nb_flash		= 0U;
    1788:	1a 86       	std	Y+10, r1	; 0x0a
				MesLeds[ loop_index ].cpt_nb_flash	= 0U;
    178a:	1b 86       	std	Y+11, r1	; 0x0b

/////////////////////////////////////ISR PUBLIC FUNCTIONS////////////////////////////////////////
//ISR de flash de la led
void DrvLedFlash_ISR( void )
{
	for (Int8U loop_index = 0U ; loop_index < CONF_LED_NB ; loop_index++ )
    178c:	1f 5f       	subi	r17, 0xFF	; 255
    178e:	2f 96       	adiw	r28, 0x0f	; 15
    1790:	14 30       	cpi	r17, 0x04	; 4
    1792:	09 f0       	breq	.+2      	; 0x1796 <DrvLedFlash_ISR+0x98>
    1794:	be cf       	rjmp	.-132    	; 0x1712 <DrvLedFlash_ISR+0x14>
				MesLeds[ loop_index ].nb_flash		= 0U;
				MesLeds[ loop_index ].cpt_nb_flash	= 0U;
			}
		}
	}
    1796:	df 91       	pop	r29
    1798:	cf 91       	pop	r28
    179a:	1f 91       	pop	r17
    179c:	0f 91       	pop	r16
    179e:	ff 90       	pop	r15
    17a0:	ef 90       	pop	r14
    17a2:	08 95       	ret

000017a4 <DrvLed>:
	
  
/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////
// Init du Drv LED 
void DrvLed ( void )
{
    17a4:	ef 92       	push	r14
    17a6:	ff 92       	push	r15
    17a8:	0f 93       	push	r16
    17aa:	1f 93       	push	r17
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
	//on configure chaque LED
	for (Int8U loop_led = 0 ; loop_led < CONF_LED_NB ; loop_led++)
    17b0:	0f 2e       	mov	r0, r31
    17b2:	f1 e1       	ldi	r31, 0x11	; 17
    17b4:	ef 2e       	mov	r14, r31
    17b6:	f1 e0       	ldi	r31, 0x01	; 1
    17b8:	ff 2e       	mov	r15, r31
    17ba:	f0 2d       	mov	r31, r0
    17bc:	c0 e5       	ldi	r28, 0x50	; 80
    17be:	d2 e0       	ldi	r29, 0x02	; 2
    17c0:	10 e0       	ldi	r17, 0x00	; 0
	{
		MesLeds[ loop_led ].pin_name		= led_pin_name[ loop_led ];
		MesLeds[ loop_led ].active_level	= IO_LEVEL_GND;
		MesLeds[ loop_led ].init_state		= STATE_LED_OFF;
    17c2:	01 e0       	ldi	r16, 0x01	; 1
void DrvLed ( void )
{
	//on configure chaque LED
	for (Int8U loop_led = 0 ; loop_led < CONF_LED_NB ; loop_led++)
	{
		MesLeds[ loop_led ].pin_name		= led_pin_name[ loop_led ];
    17c4:	f7 01       	movw	r30, r14
    17c6:	81 91       	ld	r24, Z+
    17c8:	7f 01       	movw	r14, r30
    17ca:	88 83       	st	Y, r24
		MesLeds[ loop_led ].active_level	= IO_LEVEL_GND;
    17cc:	19 82       	std	Y+1, r1	; 0x01
		MesLeds[ loop_led ].init_state		= STATE_LED_OFF;
    17ce:	0a 83       	std	Y+2, r16	; 0x02
		MesLeds[ loop_led ].actual_state	= STATE_LED_OFF;
    17d0:	0b 83       	std	Y+3, r16	; 0x03
		MesLeds[ loop_led ].flash_active	= FALSE;
    17d2:	1c 82       	std	Y+4, r1	; 0x04
		MesLeds[ loop_led ].time_on			= 0U;
    17d4:	1e 82       	std	Y+6, r1	; 0x06
    17d6:	1d 82       	std	Y+5, r1	; 0x05
		MesLeds[ loop_led ].cpt_time_on		= 0U;
    17d8:	18 86       	std	Y+8, r1	; 0x08
    17da:	1f 82       	std	Y+7, r1	; 0x07
		MesLeds[ loop_led ].time_off		= 0U;
    17dc:	1a 86       	std	Y+10, r1	; 0x0a
    17de:	19 86       	std	Y+9, r1	; 0x09
		MesLeds[ loop_led ].cpt_time_off	= 0U;
    17e0:	1c 86       	std	Y+12, r1	; 0x0c
    17e2:	1b 86       	std	Y+11, r1	; 0x0b
		MesLeds[ loop_led ].nb_flash		= 0U;
    17e4:	1d 86       	std	Y+13, r1	; 0x0d
		MesLeds[ loop_led ].cpt_nb_flash	= 0U;
    17e6:	1e 86       	std	Y+14, r1	; 0x0e
		
		//on configure l'IO en sortie
		micIoPortsConfigureOutput(MesLeds[ loop_led ].pin_name);
    17e8:	0e 94 3b 18 	call	0x3076	; 0x3076 <micIoPortsConfigureOutput>
		//on init l'etat initial de la led
		if( MesLeds[ loop_led ].init_state == STATE_LED_ON )
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	88 23       	and	r24, r24
    17f0:	21 f4       	brne	.+8      	; 0x17fa <DrvLed+0x56>
		{
			DrvLedOn( loop_led );
    17f2:	81 2f       	mov	r24, r17
    17f4:	0e 94 0d 0b 	call	0x161a	; 0x161a <DrvLedOn>
    17f8:	03 c0       	rjmp	.+6      	; 0x1800 <DrvLed+0x5c>
		}
		else
		{
			DrvLedOff( loop_led );
    17fa:	81 2f       	mov	r24, r17
    17fc:	0e 94 46 0b 	call	0x168c	; 0x168c <DrvLedOff>
/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////
// Init du Drv LED 
void DrvLed ( void )
{
	//on configure chaque LED
	for (Int8U loop_led = 0 ; loop_led < CONF_LED_NB ; loop_led++)
    1800:	1f 5f       	subi	r17, 0xFF	; 255
    1802:	2f 96       	adiw	r28, 0x0f	; 15
    1804:	14 30       	cpi	r17, 0x04	; 4
    1806:	f1 f6       	brne	.-68     	; 0x17c4 <DrvLed+0x20>
			DrvLedOff( loop_led );
		}
	}
	
	//on met le timer pour la fonction flash des leds
	DrvTimerPlayTimer( CONF_TIMER_LED, 1, E_TIMER_MODE_PERIODIC, DrvLedFlash_ISR );
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	41 e0       	ldi	r20, 0x01	; 1
    1810:	2f e7       	ldi	r18, 0x7F	; 127
    1812:	3b e0       	ldi	r19, 0x0B	; 11
    1814:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <DrvTimerPlayTimer>
}
    1818:	df 91       	pop	r29
    181a:	cf 91       	pop	r28
    181c:	1f 91       	pop	r17
    181e:	0f 91       	pop	r16
    1820:	ff 90       	pop	r15
    1822:	ef 90       	pop	r14
    1824:	08 95       	ret

00001826 <DrvLedToggle>:
}

// Toggle la led
void DrvLedToggle ( Int8U led_name )
{
	micIoPortsConfigureToToggleLevel(MesLeds[ led_name ].pin_name);
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	9c 01       	movw	r18, r24
    182a:	22 0f       	add	r18, r18
    182c:	33 1f       	adc	r19, r19
    182e:	82 0f       	add	r24, r18
    1830:	93 1f       	adc	r25, r19
    1832:	fc 01       	movw	r30, r24
    1834:	ee 0f       	add	r30, r30
    1836:	ff 1f       	adc	r31, r31
    1838:	ee 0f       	add	r30, r30
    183a:	ff 1f       	adc	r31, r31
    183c:	8e 0f       	add	r24, r30
    183e:	9f 1f       	adc	r25, r31
    1840:	fc 01       	movw	r30, r24
    1842:	e0 5b       	subi	r30, 0xB0	; 176
    1844:	fd 4f       	sbci	r31, 0xFD	; 253
    1846:	80 81       	ld	r24, Z
    1848:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <micIoPortsConfigureToToggleLevel>
}
    184c:	08 95       	ret

0000184e <DrvLedFlash>:

// Flash la led
void DrvLedFlash ( Int8U led_name, Int8U nb_flash, Int16U time_on, Int16U time_off )
{
	MesLeds[ led_name ].time_on			= time_on;
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	fc 01       	movw	r30, r24
    1852:	ee 0f       	add	r30, r30
    1854:	ff 1f       	adc	r31, r31
    1856:	e8 0f       	add	r30, r24
    1858:	f9 1f       	adc	r31, r25
    185a:	cf 01       	movw	r24, r30
    185c:	88 0f       	add	r24, r24
    185e:	99 1f       	adc	r25, r25
    1860:	88 0f       	add	r24, r24
    1862:	99 1f       	adc	r25, r25
    1864:	e8 0f       	add	r30, r24
    1866:	f9 1f       	adc	r31, r25
    1868:	e0 5b       	subi	r30, 0xB0	; 176
    186a:	fd 4f       	sbci	r31, 0xFD	; 253
    186c:	56 83       	std	Z+6, r21	; 0x06
    186e:	45 83       	std	Z+5, r20	; 0x05
	MesLeds[ led_name ].cpt_time_on		= 0U;
    1870:	10 86       	std	Z+8, r1	; 0x08
    1872:	17 82       	std	Z+7, r1	; 0x07
	MesLeds[ led_name ].time_off		= time_off;
    1874:	32 87       	std	Z+10, r19	; 0x0a
    1876:	21 87       	std	Z+9, r18	; 0x09
	MesLeds[ led_name ].cpt_time_off	= 0U;
    1878:	14 86       	std	Z+12, r1	; 0x0c
    187a:	13 86       	std	Z+11, r1	; 0x0b
	MesLeds[ led_name ].nb_flash		= nb_flash;
    187c:	65 87       	std	Z+13, r22	; 0x0d
	MesLeds[ led_name ].cpt_nb_flash	= 0U;
    187e:	16 86       	std	Z+14, r1	; 0x0e
	MesLeds[ led_name ].flash_active	= TRUE;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	84 83       	std	Z+4, r24	; 0x04
}
    1884:	08 95       	ret

00001886 <DrvServo>:
/////////////////////////////////////////PUBLIC FUNCTIONS/////////////////////////////////////////
// Init du Drv servo 
void DrvServo( void )
{
	//on init le timer 1 tick = 1us
	TCCR1A	= 0;             
    1886:	10 92 80 00 	sts	0x0080, r1
    TCCR1B	|= _BV(CS11);     
    188a:	e1 e8       	ldi	r30, 0x81	; 129
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	82 60       	ori	r24, 0x02	; 2
    1892:	80 83       	st	Z, r24
    TCNT1	= 0;               
    1894:	10 92 85 00 	sts	0x0085, r1
    1898:	10 92 84 00 	sts	0x0084, r1
    TIFR1	|= _BV(OCF1A);     
    189c:	b1 9a       	sbi	0x16, 1	; 22
    TIMSK1	|= _BV(OCIE1A) ;
    189e:	ef e6       	ldi	r30, 0x6F	; 111
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	82 60       	ori	r24, 0x02	; 2
    18a6:	80 83       	st	Z, r24
}
    18a8:	08 95       	ret

000018aa <DrvAddServo>:

// Ajout d'un Drv Servo 
void DrvAddServo( EIoPin pin , Int16U angle) 
{
    18aa:	e8 2f       	mov	r30, r24
	MesServos[ nb_servo_active ].active			= TRUE;
    18ac:	40 91 df 01 	lds	r20, 0x01DF
    18b0:	23 e5       	ldi	r18, 0x53	; 83
    18b2:	31 e0       	ldi	r19, 0x01	; 1
    18b4:	84 2f       	mov	r24, r20
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	dc 01       	movw	r26, r24
    18ba:	aa 0f       	add	r26, r26
    18bc:	bb 1f       	adc	r27, r27
    18be:	88 0f       	add	r24, r24
    18c0:	99 1f       	adc	r25, r25
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	88 0f       	add	r24, r24
    18c8:	99 1f       	adc	r25, r25
    18ca:	a8 0f       	add	r26, r24
    18cc:	b9 1f       	adc	r27, r25
    18ce:	a2 0f       	add	r26, r18
    18d0:	b3 1f       	adc	r27, r19
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	19 96       	adiw	r26, 0x09	; 9
    18d6:	8c 93       	st	X, r24
	MesServos[ nb_servo_active ].moving			= FALSE;
    18d8:	40 91 df 01 	lds	r20, 0x01DF
    18dc:	84 2f       	mov	r24, r20
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	dc 01       	movw	r26, r24
    18e2:	aa 0f       	add	r26, r26
    18e4:	bb 1f       	adc	r27, r27
    18e6:	88 0f       	add	r24, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	88 0f       	add	r24, r24
    18ec:	99 1f       	adc	r25, r25
    18ee:	88 0f       	add	r24, r24
    18f0:	99 1f       	adc	r25, r25
    18f2:	a8 0f       	add	r26, r24
    18f4:	b9 1f       	adc	r27, r25
    18f6:	a2 0f       	add	r26, r18
    18f8:	b3 1f       	adc	r27, r19
    18fa:	18 96       	adiw	r26, 0x08	; 8
    18fc:	1c 92       	st	X, r1
	MesServos[ nb_servo_active ].pin			= pin;
    18fe:	40 91 df 01 	lds	r20, 0x01DF
    1902:	84 2f       	mov	r24, r20
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	dc 01       	movw	r26, r24
    1908:	aa 0f       	add	r26, r26
    190a:	bb 1f       	adc	r27, r27
    190c:	88 0f       	add	r24, r24
    190e:	99 1f       	adc	r25, r25
    1910:	88 0f       	add	r24, r24
    1912:	99 1f       	adc	r25, r25
    1914:	88 0f       	add	r24, r24
    1916:	99 1f       	adc	r25, r25
    1918:	a8 0f       	add	r26, r24
    191a:	b9 1f       	adc	r27, r25
    191c:	a2 0f       	add	r26, r18
    191e:	b3 1f       	adc	r27, r19
    1920:	ec 93       	st	X, r30
	MesServos[ nb_servo_active ].ticks			= ConvertAngleToTick(angle);
    1922:	f0 91 df 01 	lds	r31, 0x01DF
    1926:	4e eb       	ldi	r20, 0xBE	; 190
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	64 9f       	mul	r22, r20
    192c:	c0 01       	movw	r24, r0
    192e:	65 9f       	mul	r22, r21
    1930:	90 0d       	add	r25, r0
    1932:	74 9f       	mul	r23, r20
    1934:	90 0d       	add	r25, r0
    1936:	11 24       	eor	r1, r1
    1938:	62 e1       	ldi	r22, 0x12	; 18
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodhi4>
    1940:	60 57       	subi	r22, 0x70	; 112
    1942:	7e 4f       	sbci	r23, 0xFE	; 254
    1944:	66 0f       	add	r22, r22
    1946:	77 1f       	adc	r23, r23
    1948:	4f 2f       	mov	r20, r31
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	da 01       	movw	r26, r20
    194e:	aa 0f       	add	r26, r26
    1950:	bb 1f       	adc	r27, r27
    1952:	44 0f       	add	r20, r20
    1954:	55 1f       	adc	r21, r21
    1956:	44 0f       	add	r20, r20
    1958:	55 1f       	adc	r21, r21
    195a:	44 0f       	add	r20, r20
    195c:	55 1f       	adc	r21, r21
    195e:	a4 0f       	add	r26, r20
    1960:	b5 1f       	adc	r27, r21
    1962:	a2 0f       	add	r26, r18
    1964:	b3 1f       	adc	r27, r19
    1966:	12 96       	adiw	r26, 0x02	; 2
    1968:	7c 93       	st	X, r23
    196a:	6e 93       	st	-X, r22
    196c:	11 97       	sbiw	r26, 0x01	; 1
	MesServos[ nb_servo_active ].ticks_consigne = MesServos[ nb_servo_active ].ticks;
    196e:	60 91 df 01 	lds	r22, 0x01DF
    1972:	80 91 df 01 	lds	r24, 0x01DF
    1976:	48 2f       	mov	r20, r24
    1978:	50 e0       	ldi	r21, 0x00	; 0
    197a:	da 01       	movw	r26, r20
    197c:	aa 0f       	add	r26, r26
    197e:	bb 1f       	adc	r27, r27
    1980:	44 0f       	add	r20, r20
    1982:	55 1f       	adc	r21, r21
    1984:	44 0f       	add	r20, r20
    1986:	55 1f       	adc	r21, r21
    1988:	44 0f       	add	r20, r20
    198a:	55 1f       	adc	r21, r21
    198c:	a4 0f       	add	r26, r20
    198e:	b5 1f       	adc	r27, r21
    1990:	a2 0f       	add	r26, r18
    1992:	b3 1f       	adc	r27, r19
    1994:	11 96       	adiw	r26, 0x01	; 1
    1996:	8d 91       	ld	r24, X+
    1998:	9c 91       	ld	r25, X
    199a:	12 97       	sbiw	r26, 0x02	; 2
    199c:	46 2f       	mov	r20, r22
    199e:	50 e0       	ldi	r21, 0x00	; 0
    19a0:	da 01       	movw	r26, r20
    19a2:	aa 0f       	add	r26, r26
    19a4:	bb 1f       	adc	r27, r27
    19a6:	44 0f       	add	r20, r20
    19a8:	55 1f       	adc	r21, r21
    19aa:	44 0f       	add	r20, r20
    19ac:	55 1f       	adc	r21, r21
    19ae:	44 0f       	add	r20, r20
    19b0:	55 1f       	adc	r21, r21
    19b2:	a4 0f       	add	r26, r20
    19b4:	b5 1f       	adc	r27, r21
    19b6:	a2 0f       	add	r26, r18
    19b8:	b3 1f       	adc	r27, r19
    19ba:	14 96       	adiw	r26, 0x04	; 4
    19bc:	9c 93       	st	X, r25
    19be:	8e 93       	st	-X, r24
    19c0:	13 97       	sbiw	r26, 0x03	; 3
	MesServos[ nb_servo_active ].vitesse		= E_SERVO_VITESSE_0;
    19c2:	80 91 df 01 	lds	r24, 0x01DF
    19c6:	48 2f       	mov	r20, r24
    19c8:	50 e0       	ldi	r21, 0x00	; 0
    19ca:	ca 01       	movw	r24, r20
    19cc:	88 0f       	add	r24, r24
    19ce:	99 1f       	adc	r25, r25
    19d0:	44 0f       	add	r20, r20
    19d2:	55 1f       	adc	r21, r21
    19d4:	44 0f       	add	r20, r20
    19d6:	55 1f       	adc	r21, r21
    19d8:	44 0f       	add	r20, r20
    19da:	55 1f       	adc	r21, r21
    19dc:	48 0f       	add	r20, r24
    19de:	59 1f       	adc	r21, r25
    19e0:	24 0f       	add	r18, r20
    19e2:	35 1f       	adc	r19, r21
    19e4:	84 e6       	ldi	r24, 0x64	; 100
    19e6:	d9 01       	movw	r26, r18
    19e8:	15 96       	adiw	r26, 0x05	; 5
    19ea:	8c 93       	st	X, r24
	
	micIoPortsConfigureOutput( pin );
    19ec:	8e 2f       	mov	r24, r30
    19ee:	0e 94 3b 18 	call	0x3076	; 0x3076 <micIoPortsConfigureOutput>
	nb_servo_active++;
    19f2:	80 91 df 01 	lds	r24, 0x01DF
    19f6:	8f 5f       	subi	r24, 0xFF	; 255
    19f8:	80 93 df 01 	sts	0x01DF, r24
}
    19fc:	08 95       	ret

000019fe <DrvDeleteServo>:

// Ajout d'un Drv Servo 
void DrvDeleteServo( EIoPin pin ) 
{
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
	Int8U remove_index_servo = 0xFF;
	
	for(Int8U loop_servo = 0U ; loop_servo < nb_servo_active ; loop_servo++)
    1a02:	90 91 df 01 	lds	r25, 0x01DF
    1a06:	99 23       	and	r25, r25
    1a08:	09 f4       	brne	.+2      	; 0x1a0c <DrvDeleteServo+0xe>
    1a0a:	56 c0       	rjmp	.+172    	; 0x1ab8 <DrvDeleteServo+0xba>
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
}

// Ajout d'un Drv Servo 
void DrvDeleteServo( EIoPin pin ) 
{
	Int8U remove_index_servo = 0xFF;
    1a0e:	1f ef       	ldi	r17, 0xFF	; 255
	
	for(Int8U loop_servo = 0U ; loop_servo < nb_servo_active ; loop_servo++)
	{
		if(MesServos[ nb_servo_active ].pin == pin)
    1a10:	63 e5       	ldi	r22, 0x53	; 83
    1a12:	71 e0       	ldi	r23, 0x01	; 1
		{
			remove_index_servo = loop_servo;
		}
		if( loop_servo >= remove_index_servo ) 
		{
			MesServos[ loop_servo ] = MesServos[ loop_servo + 1 ];
    1a14:	0a e0       	ldi	r16, 0x0A	; 10
{
	Int8U remove_index_servo = 0xFF;
	
	for(Int8U loop_servo = 0U ; loop_servo < nb_servo_active ; loop_servo++)
	{
		if(MesServos[ nb_servo_active ].pin == pin)
    1a16:	40 91 df 01 	lds	r20, 0x01DF
    1a1a:	24 2f       	mov	r18, r20
    1a1c:	30 e0       	ldi	r19, 0x00	; 0
    1a1e:	f9 01       	movw	r30, r18
    1a20:	ee 0f       	add	r30, r30
    1a22:	ff 1f       	adc	r31, r31
    1a24:	22 0f       	add	r18, r18
    1a26:	33 1f       	adc	r19, r19
    1a28:	22 0f       	add	r18, r18
    1a2a:	33 1f       	adc	r19, r19
    1a2c:	22 0f       	add	r18, r18
    1a2e:	33 1f       	adc	r19, r19
    1a30:	e2 0f       	add	r30, r18
    1a32:	f3 1f       	adc	r31, r19
    1a34:	e6 0f       	add	r30, r22
    1a36:	f7 1f       	adc	r31, r23
    1a38:	20 81       	ld	r18, Z
    1a3a:	28 17       	cp	r18, r24
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <DrvDeleteServo+0x46>
		{
			remove_index_servo = loop_servo;
		}
		if( loop_servo >= remove_index_servo ) 
    1a3e:	91 17       	cp	r25, r17
    1a40:	30 f1       	brcs	.+76     	; 0x1a8e <DrvDeleteServo+0x90>
    1a42:	01 c0       	rjmp	.+2      	; 0x1a46 <DrvDeleteServo+0x48>
{
	Int8U remove_index_servo = 0xFF;
	
	for(Int8U loop_servo = 0U ; loop_servo < nb_servo_active ; loop_servo++)
	{
		if(MesServos[ nb_servo_active ].pin == pin)
    1a44:	19 2f       	mov	r17, r25
		{
			remove_index_servo = loop_servo;
		}
		if( loop_servo >= remove_index_servo ) 
		{
			MesServos[ loop_servo ] = MesServos[ loop_servo + 1 ];
    1a46:	29 2f       	mov	r18, r25
    1a48:	30 e0       	ldi	r19, 0x00	; 0
    1a4a:	a9 01       	movw	r20, r18
    1a4c:	4f 5f       	subi	r20, 0xFF	; 255
    1a4e:	5f 4f       	sbci	r21, 0xFF	; 255
    1a50:	d9 01       	movw	r26, r18
    1a52:	aa 0f       	add	r26, r26
    1a54:	bb 1f       	adc	r27, r27
    1a56:	22 0f       	add	r18, r18
    1a58:	33 1f       	adc	r19, r19
    1a5a:	22 0f       	add	r18, r18
    1a5c:	33 1f       	adc	r19, r19
    1a5e:	22 0f       	add	r18, r18
    1a60:	33 1f       	adc	r19, r19
    1a62:	a2 0f       	add	r26, r18
    1a64:	b3 1f       	adc	r27, r19
    1a66:	fa 01       	movw	r30, r20
    1a68:	ee 0f       	add	r30, r30
    1a6a:	ff 1f       	adc	r31, r31
    1a6c:	44 0f       	add	r20, r20
    1a6e:	55 1f       	adc	r21, r21
    1a70:	44 0f       	add	r20, r20
    1a72:	55 1f       	adc	r21, r21
    1a74:	44 0f       	add	r20, r20
    1a76:	55 1f       	adc	r21, r21
    1a78:	e4 0f       	add	r30, r20
    1a7a:	f5 1f       	adc	r31, r21
    1a7c:	ad 5a       	subi	r26, 0xAD	; 173
    1a7e:	be 4f       	sbci	r27, 0xFE	; 254
    1a80:	ed 5a       	subi	r30, 0xAD	; 173
    1a82:	fe 4f       	sbci	r31, 0xFE	; 254
    1a84:	20 2f       	mov	r18, r16
    1a86:	01 90       	ld	r0, Z+
    1a88:	0d 92       	st	X+, r0
    1a8a:	21 50       	subi	r18, 0x01	; 1
    1a8c:	e1 f7       	brne	.-8      	; 0x1a86 <DrvDeleteServo+0x88>
		}
		if( loop_servo == (nb_servo_active - 1U) ) 
    1a8e:	20 91 df 01 	lds	r18, 0x01DF
    1a92:	49 2f       	mov	r20, r25
    1a94:	50 e0       	ldi	r21, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	21 50       	subi	r18, 0x01	; 1
    1a9a:	30 40       	sbci	r19, 0x00	; 0
    1a9c:	42 17       	cp	r20, r18
    1a9e:	53 07       	cpc	r21, r19
    1aa0:	29 f4       	brne	.+10     	; 0x1aac <DrvDeleteServo+0xae>
		{
			nb_servo_active--;
    1aa2:	20 91 df 01 	lds	r18, 0x01DF
    1aa6:	21 50       	subi	r18, 0x01	; 1
    1aa8:	20 93 df 01 	sts	0x01DF, r18
// Ajout d'un Drv Servo 
void DrvDeleteServo( EIoPin pin ) 
{
	Int8U remove_index_servo = 0xFF;
	
	for(Int8U loop_servo = 0U ; loop_servo < nb_servo_active ; loop_servo++)
    1aac:	9f 5f       	subi	r25, 0xFF	; 255
    1aae:	20 91 df 01 	lds	r18, 0x01DF
    1ab2:	92 17       	cp	r25, r18
    1ab4:	08 f4       	brcc	.+2      	; 0x1ab8 <DrvDeleteServo+0xba>
    1ab6:	af cf       	rjmp	.-162    	; 0x1a16 <DrvDeleteServo+0x18>
		if( loop_servo == (nb_servo_active - 1U) ) 
		{
			nb_servo_active--;
		}
	}
}
    1ab8:	1f 91       	pop	r17
    1aba:	0f 91       	pop	r16
    1abc:	08 95       	ret

00001abe <DrvServoDirectMoveToPosition>:
}


// bouge le servo a la position voulu en angle sans savoir si il été deja en mouvement
Boolean DrvServoDirectMoveToPosition( Int8U index, Int16U angle, EServoVitesse vitesse)
{
    1abe:	cf 93       	push	r28
    1ac0:	df 93       	push	r29
    1ac2:	e8 2f       	mov	r30, r24
	Boolean ret = FALSE; 
	
	//consigne
	MesServos[ index ].ticks_consigne = ConvertAngleToTick(angle);
    1ac4:	2e eb       	ldi	r18, 0xBE	; 190
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	62 9f       	mul	r22, r18
    1aca:	c0 01       	movw	r24, r0
    1acc:	63 9f       	mul	r22, r19
    1ace:	90 0d       	add	r25, r0
    1ad0:	72 9f       	mul	r23, r18
    1ad2:	90 0d       	add	r25, r0
    1ad4:	11 24       	eor	r1, r1
    1ad6:	62 e1       	ldi	r22, 0x12	; 18
    1ad8:	70 e0       	ldi	r23, 0x00	; 0
    1ada:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodhi4>
    1ade:	60 57       	subi	r22, 0x70	; 112
    1ae0:	7e 4f       	sbci	r23, 0xFE	; 254
    1ae2:	66 0f       	add	r22, r22
    1ae4:	77 1f       	adc	r23, r23
    1ae6:	a3 e5       	ldi	r26, 0x53	; 83
    1ae8:	b1 e0       	ldi	r27, 0x01	; 1
    1aea:	2e 2f       	mov	r18, r30
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	e9 01       	movw	r28, r18
    1af0:	cc 0f       	add	r28, r28
    1af2:	dd 1f       	adc	r29, r29
    1af4:	22 0f       	add	r18, r18
    1af6:	33 1f       	adc	r19, r19
    1af8:	22 0f       	add	r18, r18
    1afa:	33 1f       	adc	r19, r19
    1afc:	22 0f       	add	r18, r18
    1afe:	33 1f       	adc	r19, r19
    1b00:	c2 0f       	add	r28, r18
    1b02:	d3 1f       	adc	r29, r19
    1b04:	ca 0f       	add	r28, r26
    1b06:	db 1f       	adc	r29, r27
    1b08:	7c 83       	std	Y+4, r23	; 0x04
    1b0a:	6b 83       	std	Y+3, r22	; 0x03
	if( MesServos[ index ].ticks_consigne != MesServos[index].ticks )
    1b0c:	2e 2f       	mov	r18, r30
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	e9 01       	movw	r28, r18
    1b12:	cc 0f       	add	r28, r28
    1b14:	dd 1f       	adc	r29, r29
    1b16:	22 0f       	add	r18, r18
    1b18:	33 1f       	adc	r19, r19
    1b1a:	22 0f       	add	r18, r18
    1b1c:	33 1f       	adc	r19, r19
    1b1e:	22 0f       	add	r18, r18
    1b20:	33 1f       	adc	r19, r19
    1b22:	c2 0f       	add	r28, r18
    1b24:	d3 1f       	adc	r29, r19
    1b26:	ca 0f       	add	r28, r26
    1b28:	db 1f       	adc	r29, r27
    1b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b2e:	8e 2f       	mov	r24, r30
    1b30:	90 e0       	ldi	r25, 0x00	; 0
    1b32:	bc 01       	movw	r22, r24
    1b34:	66 0f       	add	r22, r22
    1b36:	77 1f       	adc	r23, r23
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	88 0f       	add	r24, r24
    1b3e:	99 1f       	adc	r25, r25
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	86 0f       	add	r24, r22
    1b46:	97 1f       	adc	r25, r23
    1b48:	a8 0f       	add	r26, r24
    1b4a:	b9 1f       	adc	r27, r25
    1b4c:	11 96       	adiw	r26, 0x01	; 1
    1b4e:	8d 91       	ld	r24, X+
    1b50:	9c 91       	ld	r25, X
    1b52:	12 97       	sbiw	r26, 0x02	; 2
    1b54:	28 17       	cp	r18, r24
    1b56:	39 07       	cpc	r19, r25
    1b58:	09 f4       	brne	.+2      	; 0x1b5c <DrvServoDirectMoveToPosition+0x9e>
    1b5a:	21 c1       	rjmp	.+578    	; 0x1d9e <DrvServoDirectMoveToPosition+0x2e0>
	{
		MesServos[ index ].vitesse	= vitesse;
    1b5c:	83 e5       	ldi	r24, 0x53	; 83
    1b5e:	91 e0       	ldi	r25, 0x01	; 1
    1b60:	2e 2f       	mov	r18, r30
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	d9 01       	movw	r26, r18
    1b66:	aa 0f       	add	r26, r26
    1b68:	bb 1f       	adc	r27, r27
    1b6a:	22 0f       	add	r18, r18
    1b6c:	33 1f       	adc	r19, r19
    1b6e:	22 0f       	add	r18, r18
    1b70:	33 1f       	adc	r19, r19
    1b72:	22 0f       	add	r18, r18
    1b74:	33 1f       	adc	r19, r19
    1b76:	a2 0f       	add	r26, r18
    1b78:	b3 1f       	adc	r27, r19
    1b7a:	a8 0f       	add	r26, r24
    1b7c:	b9 1f       	adc	r27, r25
    1b7e:	15 96       	adiw	r26, 0x05	; 5
    1b80:	4c 93       	st	X, r20
		MesServos[ index ].moving	= TRUE;		
    1b82:	2e 2f       	mov	r18, r30
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	d9 01       	movw	r26, r18
    1b88:	aa 0f       	add	r26, r26
    1b8a:	bb 1f       	adc	r27, r27
    1b8c:	22 0f       	add	r18, r18
    1b8e:	33 1f       	adc	r19, r19
    1b90:	22 0f       	add	r18, r18
    1b92:	33 1f       	adc	r19, r19
    1b94:	22 0f       	add	r18, r18
    1b96:	33 1f       	adc	r19, r19
    1b98:	a2 0f       	add	r26, r18
    1b9a:	b3 1f       	adc	r27, r19
    1b9c:	a8 0f       	add	r26, r24
    1b9e:	b9 1f       	adc	r27, r25
    1ba0:	21 e0       	ldi	r18, 0x01	; 1
    1ba2:	18 96       	adiw	r26, 0x08	; 8
    1ba4:	2c 93       	st	X, r18
		//calcul de la vitesse d'incrementation pour atteindre la consigne
		if( MesServos[index].ticks < MesServos[index].ticks_consigne )
    1ba6:	2e 2f       	mov	r18, r30
    1ba8:	30 e0       	ldi	r19, 0x00	; 0
    1baa:	d9 01       	movw	r26, r18
    1bac:	aa 0f       	add	r26, r26
    1bae:	bb 1f       	adc	r27, r27
    1bb0:	22 0f       	add	r18, r18
    1bb2:	33 1f       	adc	r19, r19
    1bb4:	22 0f       	add	r18, r18
    1bb6:	33 1f       	adc	r19, r19
    1bb8:	22 0f       	add	r18, r18
    1bba:	33 1f       	adc	r19, r19
    1bbc:	a2 0f       	add	r26, r18
    1bbe:	b3 1f       	adc	r27, r19
    1bc0:	a8 0f       	add	r26, r24
    1bc2:	b9 1f       	adc	r27, r25
    1bc4:	11 96       	adiw	r26, 0x01	; 1
    1bc6:	4d 91       	ld	r20, X+
    1bc8:	5c 91       	ld	r21, X
    1bca:	12 97       	sbiw	r26, 0x02	; 2
    1bcc:	2e 2f       	mov	r18, r30
    1bce:	30 e0       	ldi	r19, 0x00	; 0
    1bd0:	b9 01       	movw	r22, r18
    1bd2:	66 0f       	add	r22, r22
    1bd4:	77 1f       	adc	r23, r23
    1bd6:	22 0f       	add	r18, r18
    1bd8:	33 1f       	adc	r19, r19
    1bda:	22 0f       	add	r18, r18
    1bdc:	33 1f       	adc	r19, r19
    1bde:	22 0f       	add	r18, r18
    1be0:	33 1f       	adc	r19, r19
    1be2:	26 0f       	add	r18, r22
    1be4:	37 1f       	adc	r19, r23
    1be6:	82 0f       	add	r24, r18
    1be8:	93 1f       	adc	r25, r19
    1bea:	dc 01       	movw	r26, r24
    1bec:	13 96       	adiw	r26, 0x03	; 3
    1bee:	8d 91       	ld	r24, X+
    1bf0:	9c 91       	ld	r25, X
    1bf2:	14 97       	sbiw	r26, 0x04	; 4
    1bf4:	48 17       	cp	r20, r24
    1bf6:	59 07       	cpc	r21, r25
    1bf8:	08 f0       	brcs	.+2      	; 0x1bfc <DrvServoDirectMoveToPosition+0x13e>
    1bfa:	54 c0       	rjmp	.+168    	; 0x1ca4 <DrvServoDirectMoveToPosition+0x1e6>
		{
			MesServos[index].increment = ( MesServos[index].ticks_consigne - MesServos[index].ticks ) / (1+ MesServos[ index ].vitesse);
    1bfc:	23 e5       	ldi	r18, 0x53	; 83
    1bfe:	31 e0       	ldi	r19, 0x01	; 1
    1c00:	8e 2f       	mov	r24, r30
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	dc 01       	movw	r26, r24
    1c06:	aa 0f       	add	r26, r26
    1c08:	bb 1f       	adc	r27, r27
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	88 0f       	add	r24, r24
    1c10:	99 1f       	adc	r25, r25
    1c12:	88 0f       	add	r24, r24
    1c14:	99 1f       	adc	r25, r25
    1c16:	a8 0f       	add	r26, r24
    1c18:	b9 1f       	adc	r27, r25
    1c1a:	a2 0f       	add	r26, r18
    1c1c:	b3 1f       	adc	r27, r19
    1c1e:	13 96       	adiw	r26, 0x03	; 3
    1c20:	8d 91       	ld	r24, X+
    1c22:	9c 91       	ld	r25, X
    1c24:	14 97       	sbiw	r26, 0x04	; 4
    1c26:	4e 2f       	mov	r20, r30
    1c28:	50 e0       	ldi	r21, 0x00	; 0
    1c2a:	da 01       	movw	r26, r20
    1c2c:	aa 0f       	add	r26, r26
    1c2e:	bb 1f       	adc	r27, r27
    1c30:	44 0f       	add	r20, r20
    1c32:	55 1f       	adc	r21, r21
    1c34:	44 0f       	add	r20, r20
    1c36:	55 1f       	adc	r21, r21
    1c38:	44 0f       	add	r20, r20
    1c3a:	55 1f       	adc	r21, r21
    1c3c:	a4 0f       	add	r26, r20
    1c3e:	b5 1f       	adc	r27, r21
    1c40:	a2 0f       	add	r26, r18
    1c42:	b3 1f       	adc	r27, r19
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	0d 90       	ld	r0, X+
    1c48:	bc 91       	ld	r27, X
    1c4a:	a0 2d       	mov	r26, r0
    1c4c:	4e 2f       	mov	r20, r30
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	ea 01       	movw	r28, r20
    1c52:	cc 0f       	add	r28, r28
    1c54:	dd 1f       	adc	r29, r29
    1c56:	44 0f       	add	r20, r20
    1c58:	55 1f       	adc	r21, r21
    1c5a:	44 0f       	add	r20, r20
    1c5c:	55 1f       	adc	r21, r21
    1c5e:	44 0f       	add	r20, r20
    1c60:	55 1f       	adc	r21, r21
    1c62:	c4 0f       	add	r28, r20
    1c64:	d5 1f       	adc	r29, r21
    1c66:	c2 0f       	add	r28, r18
    1c68:	d3 1f       	adc	r29, r19
    1c6a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c6c:	8a 1b       	sub	r24, r26
    1c6e:	9b 0b       	sbc	r25, r27
    1c70:	70 e0       	ldi	r23, 0x00	; 0
    1c72:	6f 5f       	subi	r22, 0xFF	; 255
    1c74:	7f 4f       	sbci	r23, 0xFF	; 255
    1c76:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodhi4>
    1c7a:	8e 2f       	mov	r24, r30
    1c7c:	90 e0       	ldi	r25, 0x00	; 0
    1c7e:	ac 01       	movw	r20, r24
    1c80:	44 0f       	add	r20, r20
    1c82:	55 1f       	adc	r21, r21
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	88 0f       	add	r24, r24
    1c8a:	99 1f       	adc	r25, r25
    1c8c:	88 0f       	add	r24, r24
    1c8e:	99 1f       	adc	r25, r25
    1c90:	84 0f       	add	r24, r20
    1c92:	95 1f       	adc	r25, r21
    1c94:	28 0f       	add	r18, r24
    1c96:	39 1f       	adc	r19, r25
    1c98:	d9 01       	movw	r26, r18
    1c9a:	17 96       	adiw	r26, 0x07	; 7
    1c9c:	7c 93       	st	X, r23
    1c9e:	6e 93       	st	-X, r22
    1ca0:	16 97       	sbiw	r26, 0x06	; 6
    1ca2:	53 c0       	rjmp	.+166    	; 0x1d4a <DrvServoDirectMoveToPosition+0x28c>
		}
		else
		{
			MesServos[index].increment = ( MesServos[index].ticks - MesServos[index].ticks_consigne ) / (1+ MesServos[ index ].vitesse);
    1ca4:	23 e5       	ldi	r18, 0x53	; 83
    1ca6:	31 e0       	ldi	r19, 0x01	; 1
    1ca8:	8e 2f       	mov	r24, r30
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	dc 01       	movw	r26, r24
    1cae:	aa 0f       	add	r26, r26
    1cb0:	bb 1f       	adc	r27, r27
    1cb2:	88 0f       	add	r24, r24
    1cb4:	99 1f       	adc	r25, r25
    1cb6:	88 0f       	add	r24, r24
    1cb8:	99 1f       	adc	r25, r25
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	a8 0f       	add	r26, r24
    1cc0:	b9 1f       	adc	r27, r25
    1cc2:	a2 0f       	add	r26, r18
    1cc4:	b3 1f       	adc	r27, r19
    1cc6:	11 96       	adiw	r26, 0x01	; 1
    1cc8:	8d 91       	ld	r24, X+
    1cca:	9c 91       	ld	r25, X
    1ccc:	12 97       	sbiw	r26, 0x02	; 2
    1cce:	4e 2f       	mov	r20, r30
    1cd0:	50 e0       	ldi	r21, 0x00	; 0
    1cd2:	da 01       	movw	r26, r20
    1cd4:	aa 0f       	add	r26, r26
    1cd6:	bb 1f       	adc	r27, r27
    1cd8:	44 0f       	add	r20, r20
    1cda:	55 1f       	adc	r21, r21
    1cdc:	44 0f       	add	r20, r20
    1cde:	55 1f       	adc	r21, r21
    1ce0:	44 0f       	add	r20, r20
    1ce2:	55 1f       	adc	r21, r21
    1ce4:	a4 0f       	add	r26, r20
    1ce6:	b5 1f       	adc	r27, r21
    1ce8:	a2 0f       	add	r26, r18
    1cea:	b3 1f       	adc	r27, r19
    1cec:	13 96       	adiw	r26, 0x03	; 3
    1cee:	0d 90       	ld	r0, X+
    1cf0:	bc 91       	ld	r27, X
    1cf2:	a0 2d       	mov	r26, r0
    1cf4:	4e 2f       	mov	r20, r30
    1cf6:	50 e0       	ldi	r21, 0x00	; 0
    1cf8:	ea 01       	movw	r28, r20
    1cfa:	cc 0f       	add	r28, r28
    1cfc:	dd 1f       	adc	r29, r29
    1cfe:	44 0f       	add	r20, r20
    1d00:	55 1f       	adc	r21, r21
    1d02:	44 0f       	add	r20, r20
    1d04:	55 1f       	adc	r21, r21
    1d06:	44 0f       	add	r20, r20
    1d08:	55 1f       	adc	r21, r21
    1d0a:	c4 0f       	add	r28, r20
    1d0c:	d5 1f       	adc	r29, r21
    1d0e:	c2 0f       	add	r28, r18
    1d10:	d3 1f       	adc	r29, r19
    1d12:	6d 81       	ldd	r22, Y+5	; 0x05
    1d14:	8a 1b       	sub	r24, r26
    1d16:	9b 0b       	sbc	r25, r27
    1d18:	70 e0       	ldi	r23, 0x00	; 0
    1d1a:	6f 5f       	subi	r22, 0xFF	; 255
    1d1c:	7f 4f       	sbci	r23, 0xFF	; 255
    1d1e:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodhi4>
    1d22:	8e 2f       	mov	r24, r30
    1d24:	90 e0       	ldi	r25, 0x00	; 0
    1d26:	ac 01       	movw	r20, r24
    1d28:	44 0f       	add	r20, r20
    1d2a:	55 1f       	adc	r21, r21
    1d2c:	88 0f       	add	r24, r24
    1d2e:	99 1f       	adc	r25, r25
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	88 0f       	add	r24, r24
    1d36:	99 1f       	adc	r25, r25
    1d38:	84 0f       	add	r24, r20
    1d3a:	95 1f       	adc	r25, r21
    1d3c:	28 0f       	add	r18, r24
    1d3e:	39 1f       	adc	r19, r25
    1d40:	d9 01       	movw	r26, r18
    1d42:	17 96       	adiw	r26, 0x07	; 7
    1d44:	7c 93       	st	X, r23
    1d46:	6e 93       	st	-X, r22
    1d48:	16 97       	sbiw	r26, 0x06	; 6
		}
			
		//si le calcul renvoit 0 on le met a 1
		if(MesServos[index].increment == 0U)
    1d4a:	8e 2f       	mov	r24, r30
    1d4c:	90 e0       	ldi	r25, 0x00	; 0
    1d4e:	dc 01       	movw	r26, r24
    1d50:	aa 0f       	add	r26, r26
    1d52:	bb 1f       	adc	r27, r27
    1d54:	88 0f       	add	r24, r24
    1d56:	99 1f       	adc	r25, r25
    1d58:	88 0f       	add	r24, r24
    1d5a:	99 1f       	adc	r25, r25
    1d5c:	88 0f       	add	r24, r24
    1d5e:	99 1f       	adc	r25, r25
    1d60:	a8 0f       	add	r26, r24
    1d62:	b9 1f       	adc	r27, r25
    1d64:	ad 5a       	subi	r26, 0xAD	; 173
    1d66:	be 4f       	sbci	r27, 0xFE	; 254
    1d68:	16 96       	adiw	r26, 0x06	; 6
    1d6a:	8d 91       	ld	r24, X+
    1d6c:	9c 91       	ld	r25, X
    1d6e:	17 97       	sbiw	r26, 0x07	; 7
    1d70:	00 97       	sbiw	r24, 0x00	; 0
    1d72:	b9 f4       	brne	.+46     	; 0x1da2 <DrvServoDirectMoveToPosition+0x2e4>
		{
			MesServos[index].increment = 1U;
    1d74:	8e 2f       	mov	r24, r30
    1d76:	90 e0       	ldi	r25, 0x00	; 0
    1d78:	fc 01       	movw	r30, r24
    1d7a:	ee 0f       	add	r30, r30
    1d7c:	ff 1f       	adc	r31, r31
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	88 0f       	add	r24, r24
    1d84:	99 1f       	adc	r25, r25
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	e8 0f       	add	r30, r24
    1d8c:	f9 1f       	adc	r31, r25
    1d8e:	ed 5a       	subi	r30, 0xAD	; 173
    1d90:	fe 4f       	sbci	r31, 0xFE	; 254
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	90 e0       	ldi	r25, 0x00	; 0
    1d96:	97 83       	std	Z+7, r25	; 0x07
    1d98:	86 83       	std	Z+6, r24	; 0x06


// bouge le servo a la position voulu en angle sans savoir si il été deja en mouvement
Boolean DrvServoDirectMoveToPosition( Int8U index, Int16U angle, EServoVitesse vitesse)
{
	Boolean ret = FALSE; 
    1d9a:	80 e0       	ldi	r24, 0x00	; 0
    1d9c:	03 c0       	rjmp	.+6      	; 0x1da4 <DrvServoDirectMoveToPosition+0x2e6>
			MesServos[index].increment = 1U;
		}
	}
	else
	{
		ret = TRUE;
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	01 c0       	rjmp	.+2      	; 0x1da4 <DrvServoDirectMoveToPosition+0x2e6>


// bouge le servo a la position voulu en angle sans savoir si il été deja en mouvement
Boolean DrvServoDirectMoveToPosition( Int8U index, Int16U angle, EServoVitesse vitesse)
{
	Boolean ret = FALSE; 
    1da2:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		ret = TRUE;
	}
	return ret;
}
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	08 95       	ret

00001daa <DrvServoMoveToPosition>:
// bouge le servo a la position voulu en angle
Boolean DrvServoMoveToPosition( Int8U index, Int16U angle, EServoVitesse vitesse)
{
	Boolean ret = FALSE; 
	
	if(MesServos[ index ].moving != TRUE)
    1daa:	28 2f       	mov	r18, r24
    1dac:	30 e0       	ldi	r19, 0x00	; 0
    1dae:	f9 01       	movw	r30, r18
    1db0:	ee 0f       	add	r30, r30
    1db2:	ff 1f       	adc	r31, r31
    1db4:	22 0f       	add	r18, r18
    1db6:	33 1f       	adc	r19, r19
    1db8:	22 0f       	add	r18, r18
    1dba:	33 1f       	adc	r19, r19
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	e2 0f       	add	r30, r18
    1dc2:	f3 1f       	adc	r31, r19
    1dc4:	ed 5a       	subi	r30, 0xAD	; 173
    1dc6:	fe 4f       	sbci	r31, 0xFE	; 254
    1dc8:	90 85       	ldd	r25, Z+8	; 0x08
    1dca:	91 30       	cpi	r25, 0x01	; 1
    1dcc:	19 f0       	breq	.+6      	; 0x1dd4 <DrvServoMoveToPosition+0x2a>
	{
		ret = DrvServoDirectMoveToPosition(index, angle, vitesse);
    1dce:	0e 94 5f 0d 	call	0x1abe	; 0x1abe <DrvServoDirectMoveToPosition>
    1dd2:	08 95       	ret


// bouge le servo a la position voulu en angle
Boolean DrvServoMoveToPosition( Int8U index, Int16U angle, EServoVitesse vitesse)
{
	Boolean ret = FALSE; 
    1dd4:	80 e0       	ldi	r24, 0x00	; 0
	if(MesServos[ index ].moving != TRUE)
	{
		ret = DrvServoDirectMoveToPosition(index, angle, vitesse);
	}
	return ret;
}
    1dd6:	08 95       	ret

00001dd8 <DrvServoMoving>:
}

// si le servo a une consigne ne cours
Boolean DrvServoMoving( Int8U index ) 
{
	return MesServos[ index ].moving;
    1dd8:	28 2f       	mov	r18, r24
    1dda:	30 e0       	ldi	r19, 0x00	; 0
    1ddc:	f9 01       	movw	r30, r18
    1dde:	ee 0f       	add	r30, r30
    1de0:	ff 1f       	adc	r31, r31
    1de2:	22 0f       	add	r18, r18
    1de4:	33 1f       	adc	r19, r19
    1de6:	22 0f       	add	r18, r18
    1de8:	33 1f       	adc	r19, r19
    1dea:	22 0f       	add	r18, r18
    1dec:	33 1f       	adc	r19, r19
    1dee:	e2 0f       	add	r30, r18
    1df0:	f3 1f       	adc	r31, r19
    1df2:	ed 5a       	subi	r30, 0xAD	; 173
    1df4:	fe 4f       	sbci	r31, 0xFE	; 254
    1df6:	80 85       	ldd	r24, Z+8	; 0x08
}
    1df8:	08 95       	ret

00001dfa <DrvServoGetPosition>:

// donne la position du servo en angle
Int16U DrvServoGetPosition( Int8U index ) 
{
	return ConvertTickToAngle(MesServos[ index ].ticks);
    1dfa:	28 2f       	mov	r18, r24
    1dfc:	30 e0       	ldi	r19, 0x00	; 0
    1dfe:	f9 01       	movw	r30, r18
    1e00:	ee 0f       	add	r30, r30
    1e02:	ff 1f       	adc	r31, r31
    1e04:	22 0f       	add	r18, r18
    1e06:	33 1f       	adc	r19, r19
    1e08:	22 0f       	add	r18, r18
    1e0a:	33 1f       	adc	r19, r19
    1e0c:	22 0f       	add	r18, r18
    1e0e:	33 1f       	adc	r19, r19
    1e10:	e2 0f       	add	r30, r18
    1e12:	f3 1f       	adc	r31, r19
    1e14:	ed 5a       	subi	r30, 0xAD	; 173
    1e16:	fe 4f       	sbci	r31, 0xFE	; 254
    1e18:	81 81       	ldd	r24, Z+1	; 0x01
    1e1a:	92 81       	ldd	r25, Z+2	; 0x02
    1e1c:	80 52       	subi	r24, 0x20	; 32
    1e1e:	93 40       	sbci	r25, 0x03	; 3
    1e20:	65 e1       	ldi	r22, 0x15	; 21
    1e22:	70 e0       	ldi	r23, 0x00	; 0
    1e24:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodhi4>
}	
    1e28:	86 2f       	mov	r24, r22
    1e2a:	97 2f       	mov	r25, r23
    1e2c:	08 95       	ret

00001e2e <DrvServoSendUartPosition>:


// envoie la position de tout les servo sur l'UART
void DrvServoSendUartPosition( void ) 
{
    1e2e:	ef 92       	push	r14
    1e30:	ff 92       	push	r15
    1e32:	0f 93       	push	r16
    1e34:	1f 93       	push	r17
    1e36:	df 93       	push	r29
    1e38:	cf 93       	push	r28
    1e3a:	cd b7       	in	r28, 0x3d	; 61
    1e3c:	de b7       	in	r29, 0x3e	; 62
    1e3e:	63 97       	sbiw	r28, 0x13	; 19
    1e40:	0f b6       	in	r0, 0x3f	; 63
    1e42:	f8 94       	cli
    1e44:	de bf       	out	0x3e, r29	; 62
    1e46:	0f be       	out	0x3f, r0	; 63
    1e48:	cd bf       	out	0x3d, r28	; 61
	Int8U o_message[ 19U ];
		
	//on envoie la position des servos
	o_message[ 0U ] = '*';
    1e4a:	8a e2       	ldi	r24, 0x2A	; 42
    1e4c:	89 83       	std	Y+1, r24	; 0x01
	o_message[ 1U ] = 1;
    1e4e:	81 e0       	ldi	r24, 0x01	; 1
    1e50:	8a 83       	std	Y+2, r24	; 0x02
	o_message[ 2U ] = 0;
    1e52:	1b 82       	std	Y+3, r1	; 0x03
	for(Int8U loop_servo = 0U ; loop_servo < nb_servo_active ; loop_servo++)
    1e54:	80 91 df 01 	lds	r24, 0x01DF
    1e58:	88 23       	and	r24, r24
    1e5a:	51 f1       	breq	.+84     	; 0x1eb0 <DrvServoSendUartPosition+0x82>
    1e5c:	40 e0       	ldi	r20, 0x00	; 0
	{
		o_message[ 3U + loop_servo ] = ConvertTickToAngle( MesServos[ loop_servo ].ticks_consigne );
    1e5e:	03 e5       	ldi	r16, 0x53	; 83
    1e60:	11 e0       	ldi	r17, 0x01	; 1
    1e62:	ee 24       	eor	r14, r14
    1e64:	ff 24       	eor	r15, r15
    1e66:	68 94       	set
    1e68:	e2 f8       	bld	r14, 2
    1e6a:	ec 0e       	add	r14, r28
    1e6c:	fd 1e       	adc	r15, r29
    1e6e:	25 e1       	ldi	r18, 0x15	; 21
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	84 2f       	mov	r24, r20
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	fc 01       	movw	r30, r24
    1e78:	ee 0f       	add	r30, r30
    1e7a:	ff 1f       	adc	r31, r31
    1e7c:	88 0f       	add	r24, r24
    1e7e:	99 1f       	adc	r25, r25
    1e80:	88 0f       	add	r24, r24
    1e82:	99 1f       	adc	r25, r25
    1e84:	88 0f       	add	r24, r24
    1e86:	99 1f       	adc	r25, r25
    1e88:	e8 0f       	add	r30, r24
    1e8a:	f9 1f       	adc	r31, r25
    1e8c:	e0 0f       	add	r30, r16
    1e8e:	f1 1f       	adc	r31, r17
    1e90:	83 81       	ldd	r24, Z+3	; 0x03
    1e92:	94 81       	ldd	r25, Z+4	; 0x04
    1e94:	f7 01       	movw	r30, r14
    1e96:	e4 0f       	add	r30, r20
    1e98:	f1 1d       	adc	r31, r1
    1e9a:	80 52       	subi	r24, 0x20	; 32
    1e9c:	93 40       	sbci	r25, 0x03	; 3
    1e9e:	b9 01       	movw	r22, r18
    1ea0:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__udivmodhi4>
    1ea4:	60 83       	st	Z, r22
		
	//on envoie la position des servos
	o_message[ 0U ] = '*';
	o_message[ 1U ] = 1;
	o_message[ 2U ] = 0;
	for(Int8U loop_servo = 0U ; loop_servo < nb_servo_active ; loop_servo++)
    1ea6:	4f 5f       	subi	r20, 0xFF	; 255
    1ea8:	80 91 df 01 	lds	r24, 0x01DF
    1eac:	48 17       	cp	r20, r24
    1eae:	08 f3       	brcs	.-62     	; 0x1e72 <DrvServoSendUartPosition+0x44>
	{
		o_message[ 3U + loop_servo ] = ConvertTickToAngle( MesServos[ loop_servo ].ticks_consigne );
	}		
	o_message[ 3U + nb_servo_active ] = '#';
    1eb0:	80 91 df 01 	lds	r24, 0x01DF
    1eb4:	fe 01       	movw	r30, r28
    1eb6:	e8 0f       	add	r30, r24
    1eb8:	f1 1d       	adc	r31, r1
    1eba:	83 e2       	ldi	r24, 0x23	; 35
    1ebc:	84 83       	std	Z+4, r24	; 0x04
	o_message[ 4U + nb_servo_active ] = '#';
    1ebe:	90 91 df 01 	lds	r25, 0x01DF
    1ec2:	fe 01       	movw	r30, r28
    1ec4:	e9 0f       	add	r30, r25
    1ec6:	f1 1d       	adc	r31, r1
    1ec8:	85 83       	std	Z+5, r24	; 0x05
	DrvUart1SendMessage( o_message, 19U );		
    1eca:	ce 01       	movw	r24, r28
    1ecc:	01 96       	adiw	r24, 0x01	; 1
    1ece:	63 e1       	ldi	r22, 0x13	; 19
    1ed0:	0e 94 b1 13 	call	0x2762	; 0x2762 <DrvUart1SendMessage>
	
}
    1ed4:	63 96       	adiw	r28, 0x13	; 19
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	de bf       	out	0x3e, r29	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	cd bf       	out	0x3d, r28	; 61
    1ee0:	cf 91       	pop	r28
    1ee2:	df 91       	pop	r29
    1ee4:	1f 91       	pop	r17
    1ee6:	0f 91       	pop	r16
    1ee8:	ff 90       	pop	r15
    1eea:	ef 90       	pop	r14
    1eec:	08 95       	ret

00001eee <__vector_13>:
////////////////////////////////////////PRIVATE FUNCTIONS/////////////////////////////////////////


///////////////////////////////////////////ISR FUNCTIONS//////////////////////////////////////////
SIGNAL (TIMER1_COMPA_vect) 
{ 
    1eee:	1f 92       	push	r1
    1ef0:	0f 92       	push	r0
    1ef2:	0f b6       	in	r0, 0x3f	; 63
    1ef4:	0f 92       	push	r0
    1ef6:	0b b6       	in	r0, 0x3b	; 59
    1ef8:	0f 92       	push	r0
    1efa:	11 24       	eor	r1, r1
    1efc:	2f 93       	push	r18
    1efe:	3f 93       	push	r19
    1f00:	4f 93       	push	r20
    1f02:	5f 93       	push	r21
    1f04:	6f 93       	push	r22
    1f06:	7f 93       	push	r23
    1f08:	8f 93       	push	r24
    1f0a:	9f 93       	push	r25
    1f0c:	af 93       	push	r26
    1f0e:	bf 93       	push	r27
    1f10:	cf 93       	push	r28
    1f12:	df 93       	push	r29
    1f14:	ef 93       	push	r30
    1f16:	ff 93       	push	r31
	if(pin_servo < 0)
    1f18:	80 91 15 01 	lds	r24, 0x0115
    1f1c:	88 23       	and	r24, r24
    1f1e:	2c f4       	brge	.+10     	; 0x1f2a <__vector_13+0x3c>
	{
		TCNT1 = 0U;
    1f20:	10 92 85 00 	sts	0x0085, r1
    1f24:	10 92 84 00 	sts	0x0084, r1
    1f28:	35 c0       	rjmp	.+106    	; 0x1f94 <__vector_13+0xa6>
	}
	else
	{
		if( ( MesServos[pin_servo].active == TRUE ) && ( pin_servo < nb_servo_active ) )
    1f2a:	80 91 15 01 	lds	r24, 0x0115
    1f2e:	99 27       	eor	r25, r25
    1f30:	87 fd       	sbrc	r24, 7
    1f32:	90 95       	com	r25
    1f34:	fc 01       	movw	r30, r24
    1f36:	ee 0f       	add	r30, r30
    1f38:	ff 1f       	adc	r31, r31
    1f3a:	88 0f       	add	r24, r24
    1f3c:	99 1f       	adc	r25, r25
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	88 0f       	add	r24, r24
    1f44:	99 1f       	adc	r25, r25
    1f46:	e8 0f       	add	r30, r24
    1f48:	f9 1f       	adc	r31, r25
    1f4a:	ed 5a       	subi	r30, 0xAD	; 173
    1f4c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f4e:	81 85       	ldd	r24, Z+9	; 0x09
    1f50:	81 30       	cpi	r24, 0x01	; 1
    1f52:	01 f5       	brne	.+64     	; 0x1f94 <__vector_13+0xa6>
    1f54:	20 91 15 01 	lds	r18, 0x0115
    1f58:	80 91 df 01 	lds	r24, 0x01DF
    1f5c:	33 27       	eor	r19, r19
    1f5e:	27 fd       	sbrc	r18, 7
    1f60:	30 95       	com	r19
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	28 17       	cp	r18, r24
    1f66:	39 07       	cpc	r19, r25
    1f68:	ac f4       	brge	.+42     	; 0x1f94 <__vector_13+0xa6>
		{
			micIoPortsConfigureToLowLevel(MesServos[pin_servo].pin);
    1f6a:	80 91 15 01 	lds	r24, 0x0115
    1f6e:	99 27       	eor	r25, r25
    1f70:	87 fd       	sbrc	r24, 7
    1f72:	90 95       	com	r25
    1f74:	fc 01       	movw	r30, r24
    1f76:	ee 0f       	add	r30, r30
    1f78:	ff 1f       	adc	r31, r31
    1f7a:	88 0f       	add	r24, r24
    1f7c:	99 1f       	adc	r25, r25
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	88 0f       	add	r24, r24
    1f84:	99 1f       	adc	r25, r25
    1f86:	e8 0f       	add	r30, r24
    1f88:	f9 1f       	adc	r31, r25
    1f8a:	ed 5a       	subi	r30, 0xAD	; 173
    1f8c:	fe 4f       	sbci	r31, 0xFE	; 254
    1f8e:	80 81       	ld	r24, Z
    1f90:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <micIoPortsConfigureToLowLevel>
		}
	}
		
	pin_servo++;
    1f94:	80 91 15 01 	lds	r24, 0x0115
    1f98:	8f 5f       	subi	r24, 0xFF	; 255
    1f9a:	80 93 15 01 	sts	0x0115, r24
	if(pin_servo < nb_servo_active)
    1f9e:	20 91 15 01 	lds	r18, 0x0115
    1fa2:	80 91 df 01 	lds	r24, 0x01DF
    1fa6:	33 27       	eor	r19, r19
    1fa8:	27 fd       	sbrc	r18, 7
    1faa:	30 95       	com	r19
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	28 17       	cp	r18, r24
    1fb0:	39 07       	cpc	r19, r25
    1fb2:	0c f0       	brlt	.+2      	; 0x1fb6 <__vector_13+0xc8>
    1fb4:	d8 c1       	rjmp	.+944    	; 0x2366 <__vector_13+0x478>
	{
		OCR1A = TCNT1 + MesServos[pin_servo].ticks ;
    1fb6:	40 91 84 00 	lds	r20, 0x0084
    1fba:	50 91 85 00 	lds	r21, 0x0085
    1fbe:	20 91 15 01 	lds	r18, 0x0115
    1fc2:	33 27       	eor	r19, r19
    1fc4:	27 fd       	sbrc	r18, 7
    1fc6:	30 95       	com	r19
    1fc8:	83 e5       	ldi	r24, 0x53	; 83
    1fca:	91 e0       	ldi	r25, 0x01	; 1
    1fcc:	f9 01       	movw	r30, r18
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	22 0f       	add	r18, r18
    1fd4:	33 1f       	adc	r19, r19
    1fd6:	22 0f       	add	r18, r18
    1fd8:	33 1f       	adc	r19, r19
    1fda:	22 0f       	add	r18, r18
    1fdc:	33 1f       	adc	r19, r19
    1fde:	e2 0f       	add	r30, r18
    1fe0:	f3 1f       	adc	r31, r19
    1fe2:	e8 0f       	add	r30, r24
    1fe4:	f9 1f       	adc	r31, r25
    1fe6:	21 81       	ldd	r18, Z+1	; 0x01
    1fe8:	32 81       	ldd	r19, Z+2	; 0x02
    1fea:	24 0f       	add	r18, r20
    1fec:	35 1f       	adc	r19, r21
    1fee:	30 93 89 00 	sts	0x0089, r19
    1ff2:	20 93 88 00 	sts	0x0088, r18
		if( ( MesServos[pin_servo].active == TRUE ) && ( pin_servo < nb_servo_active ) )
    1ff6:	20 91 15 01 	lds	r18, 0x0115
    1ffa:	33 27       	eor	r19, r19
    1ffc:	27 fd       	sbrc	r18, 7
    1ffe:	30 95       	com	r19
    2000:	a9 01       	movw	r20, r18
    2002:	44 0f       	add	r20, r20
    2004:	55 1f       	adc	r21, r21
    2006:	22 0f       	add	r18, r18
    2008:	33 1f       	adc	r19, r19
    200a:	22 0f       	add	r18, r18
    200c:	33 1f       	adc	r19, r19
    200e:	22 0f       	add	r18, r18
    2010:	33 1f       	adc	r19, r19
    2012:	24 0f       	add	r18, r20
    2014:	35 1f       	adc	r19, r21
    2016:	82 0f       	add	r24, r18
    2018:	93 1f       	adc	r25, r19
    201a:	fc 01       	movw	r30, r24
    201c:	81 85       	ldd	r24, Z+9	; 0x09
    201e:	81 30       	cpi	r24, 0x01	; 1
    2020:	09 f0       	breq	.+2      	; 0x2024 <__vector_13+0x136>
    2022:	bc c1       	rjmp	.+888    	; 0x239c <__vector_13+0x4ae>
    2024:	20 91 15 01 	lds	r18, 0x0115
    2028:	80 91 df 01 	lds	r24, 0x01DF
    202c:	33 27       	eor	r19, r19
    202e:	27 fd       	sbrc	r18, 7
    2030:	30 95       	com	r19
    2032:	90 e0       	ldi	r25, 0x00	; 0
    2034:	28 17       	cp	r18, r24
    2036:	39 07       	cpc	r19, r25
    2038:	0c f0       	brlt	.+2      	; 0x203c <__vector_13+0x14e>
    203a:	b0 c1       	rjmp	.+864    	; 0x239c <__vector_13+0x4ae>
		{
			micIoPortsConfigureToHighLevel(MesServos[pin_servo].pin);
    203c:	80 91 15 01 	lds	r24, 0x0115
    2040:	99 27       	eor	r25, r25
    2042:	87 fd       	sbrc	r24, 7
    2044:	90 95       	com	r25
    2046:	c3 e5       	ldi	r28, 0x53	; 83
    2048:	d1 e0       	ldi	r29, 0x01	; 1
    204a:	fc 01       	movw	r30, r24
    204c:	ee 0f       	add	r30, r30
    204e:	ff 1f       	adc	r31, r31
    2050:	88 0f       	add	r24, r24
    2052:	99 1f       	adc	r25, r25
    2054:	88 0f       	add	r24, r24
    2056:	99 1f       	adc	r25, r25
    2058:	88 0f       	add	r24, r24
    205a:	99 1f       	adc	r25, r25
    205c:	e8 0f       	add	r30, r24
    205e:	f9 1f       	adc	r31, r25
    2060:	ec 0f       	add	r30, r28
    2062:	fd 1f       	adc	r31, r29
    2064:	80 81       	ld	r24, Z
    2066:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <micIoPortsConfigureToHighLevel>
			//servo en mouvement
			if( MesServos[pin_servo].moving == TRUE )
    206a:	80 91 15 01 	lds	r24, 0x0115
    206e:	99 27       	eor	r25, r25
    2070:	87 fd       	sbrc	r24, 7
    2072:	90 95       	com	r25
    2074:	9c 01       	movw	r18, r24
    2076:	22 0f       	add	r18, r18
    2078:	33 1f       	adc	r19, r19
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	88 0f       	add	r24, r24
    2080:	99 1f       	adc	r25, r25
    2082:	88 0f       	add	r24, r24
    2084:	99 1f       	adc	r25, r25
    2086:	82 0f       	add	r24, r18
    2088:	93 1f       	adc	r25, r19
    208a:	c8 0f       	add	r28, r24
    208c:	d9 1f       	adc	r29, r25
    208e:	88 85       	ldd	r24, Y+8	; 0x08
    2090:	81 30       	cpi	r24, 0x01	; 1
    2092:	09 f0       	breq	.+2      	; 0x2096 <__vector_13+0x1a8>
    2094:	83 c1       	rjmp	.+774    	; 0x239c <__vector_13+0x4ae>
			{
				//on souhaite atteindre la consigne
				if( MesServos[pin_servo].ticks < MesServos[pin_servo].ticks_consigne )
    2096:	20 91 15 01 	lds	r18, 0x0115
    209a:	33 27       	eor	r19, r19
    209c:	27 fd       	sbrc	r18, 7
    209e:	30 95       	com	r19
    20a0:	83 e5       	ldi	r24, 0x53	; 83
    20a2:	91 e0       	ldi	r25, 0x01	; 1
    20a4:	f9 01       	movw	r30, r18
    20a6:	ee 0f       	add	r30, r30
    20a8:	ff 1f       	adc	r31, r31
    20aa:	22 0f       	add	r18, r18
    20ac:	33 1f       	adc	r19, r19
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	22 0f       	add	r18, r18
    20b4:	33 1f       	adc	r19, r19
    20b6:	e2 0f       	add	r30, r18
    20b8:	f3 1f       	adc	r31, r19
    20ba:	e8 0f       	add	r30, r24
    20bc:	f9 1f       	adc	r31, r25
    20be:	41 81       	ldd	r20, Z+1	; 0x01
    20c0:	52 81       	ldd	r21, Z+2	; 0x02
    20c2:	20 91 15 01 	lds	r18, 0x0115
    20c6:	33 27       	eor	r19, r19
    20c8:	27 fd       	sbrc	r18, 7
    20ca:	30 95       	com	r19
    20cc:	b9 01       	movw	r22, r18
    20ce:	66 0f       	add	r22, r22
    20d0:	77 1f       	adc	r23, r23
    20d2:	22 0f       	add	r18, r18
    20d4:	33 1f       	adc	r19, r19
    20d6:	22 0f       	add	r18, r18
    20d8:	33 1f       	adc	r19, r19
    20da:	22 0f       	add	r18, r18
    20dc:	33 1f       	adc	r19, r19
    20de:	26 0f       	add	r18, r22
    20e0:	37 1f       	adc	r19, r23
    20e2:	82 0f       	add	r24, r18
    20e4:	93 1f       	adc	r25, r19
    20e6:	fc 01       	movw	r30, r24
    20e8:	83 81       	ldd	r24, Z+3	; 0x03
    20ea:	94 81       	ldd	r25, Z+4	; 0x04
    20ec:	48 17       	cp	r20, r24
    20ee:	59 07       	cpc	r21, r25
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <__vector_13+0x206>
    20f2:	9c c0       	rjmp	.+312    	; 0x222c <__vector_13+0x33e>
				{
					//on applique la nouvelle consigne				
					MesServos[pin_servo].ticks += MesServos[pin_servo].increment;
    20f4:	20 91 15 01 	lds	r18, 0x0115
    20f8:	33 27       	eor	r19, r19
    20fa:	27 fd       	sbrc	r18, 7
    20fc:	30 95       	com	r19
    20fe:	83 e5       	ldi	r24, 0x53	; 83
    2100:	91 e0       	ldi	r25, 0x01	; 1
    2102:	f9 01       	movw	r30, r18
    2104:	ee 0f       	add	r30, r30
    2106:	ff 1f       	adc	r31, r31
    2108:	22 0f       	add	r18, r18
    210a:	33 1f       	adc	r19, r19
    210c:	22 0f       	add	r18, r18
    210e:	33 1f       	adc	r19, r19
    2110:	22 0f       	add	r18, r18
    2112:	33 1f       	adc	r19, r19
    2114:	e2 0f       	add	r30, r18
    2116:	f3 1f       	adc	r31, r19
    2118:	e8 0f       	add	r30, r24
    211a:	f9 1f       	adc	r31, r25
    211c:	41 81       	ldd	r20, Z+1	; 0x01
    211e:	52 81       	ldd	r21, Z+2	; 0x02
    2120:	20 91 15 01 	lds	r18, 0x0115
    2124:	33 27       	eor	r19, r19
    2126:	27 fd       	sbrc	r18, 7
    2128:	30 95       	com	r19
    212a:	d9 01       	movw	r26, r18
    212c:	aa 0f       	add	r26, r26
    212e:	bb 1f       	adc	r27, r27
    2130:	22 0f       	add	r18, r18
    2132:	33 1f       	adc	r19, r19
    2134:	22 0f       	add	r18, r18
    2136:	33 1f       	adc	r19, r19
    2138:	22 0f       	add	r18, r18
    213a:	33 1f       	adc	r19, r19
    213c:	a2 0f       	add	r26, r18
    213e:	b3 1f       	adc	r27, r19
    2140:	a8 0f       	add	r26, r24
    2142:	b9 1f       	adc	r27, r25
    2144:	16 96       	adiw	r26, 0x06	; 6
    2146:	2d 91       	ld	r18, X+
    2148:	3c 91       	ld	r19, X
    214a:	17 97       	sbiw	r26, 0x07	; 7
    214c:	24 0f       	add	r18, r20
    214e:	35 1f       	adc	r19, r21
    2150:	32 83       	std	Z+2, r19	; 0x02
    2152:	21 83       	std	Z+1, r18	; 0x01

					//si on est en ovf on reajuste				
					if( MesServos[pin_servo].ticks >= MesServos[pin_servo].ticks_consigne )
    2154:	20 91 15 01 	lds	r18, 0x0115
    2158:	33 27       	eor	r19, r19
    215a:	27 fd       	sbrc	r18, 7
    215c:	30 95       	com	r19
    215e:	f9 01       	movw	r30, r18
    2160:	ee 0f       	add	r30, r30
    2162:	ff 1f       	adc	r31, r31
    2164:	22 0f       	add	r18, r18
    2166:	33 1f       	adc	r19, r19
    2168:	22 0f       	add	r18, r18
    216a:	33 1f       	adc	r19, r19
    216c:	22 0f       	add	r18, r18
    216e:	33 1f       	adc	r19, r19
    2170:	e2 0f       	add	r30, r18
    2172:	f3 1f       	adc	r31, r19
    2174:	e8 0f       	add	r30, r24
    2176:	f9 1f       	adc	r31, r25
    2178:	41 81       	ldd	r20, Z+1	; 0x01
    217a:	52 81       	ldd	r21, Z+2	; 0x02
    217c:	20 91 15 01 	lds	r18, 0x0115
    2180:	33 27       	eor	r19, r19
    2182:	27 fd       	sbrc	r18, 7
    2184:	30 95       	com	r19
    2186:	b9 01       	movw	r22, r18
    2188:	66 0f       	add	r22, r22
    218a:	77 1f       	adc	r23, r23
    218c:	22 0f       	add	r18, r18
    218e:	33 1f       	adc	r19, r19
    2190:	22 0f       	add	r18, r18
    2192:	33 1f       	adc	r19, r19
    2194:	22 0f       	add	r18, r18
    2196:	33 1f       	adc	r19, r19
    2198:	26 0f       	add	r18, r22
    219a:	37 1f       	adc	r19, r23
    219c:	82 0f       	add	r24, r18
    219e:	93 1f       	adc	r25, r19
    21a0:	fc 01       	movw	r30, r24
    21a2:	83 81       	ldd	r24, Z+3	; 0x03
    21a4:	94 81       	ldd	r25, Z+4	; 0x04
    21a6:	48 17       	cp	r20, r24
    21a8:	59 07       	cpc	r21, r25
    21aa:	08 f4       	brcc	.+2      	; 0x21ae <__vector_13+0x2c0>
    21ac:	f7 c0       	rjmp	.+494    	; 0x239c <__vector_13+0x4ae>
					{
						MesServos[pin_servo].ticks = MesServos[pin_servo].ticks_consigne;
    21ae:	20 91 15 01 	lds	r18, 0x0115
    21b2:	33 27       	eor	r19, r19
    21b4:	27 fd       	sbrc	r18, 7
    21b6:	30 95       	com	r19
    21b8:	40 91 15 01 	lds	r20, 0x0115
    21bc:	55 27       	eor	r21, r21
    21be:	47 fd       	sbrc	r20, 7
    21c0:	50 95       	com	r21
    21c2:	83 e5       	ldi	r24, 0x53	; 83
    21c4:	91 e0       	ldi	r25, 0x01	; 1
    21c6:	fa 01       	movw	r30, r20
    21c8:	ee 0f       	add	r30, r30
    21ca:	ff 1f       	adc	r31, r31
    21cc:	44 0f       	add	r20, r20
    21ce:	55 1f       	adc	r21, r21
    21d0:	44 0f       	add	r20, r20
    21d2:	55 1f       	adc	r21, r21
    21d4:	44 0f       	add	r20, r20
    21d6:	55 1f       	adc	r21, r21
    21d8:	e4 0f       	add	r30, r20
    21da:	f5 1f       	adc	r31, r21
    21dc:	e8 0f       	add	r30, r24
    21de:	f9 1f       	adc	r31, r25
    21e0:	43 81       	ldd	r20, Z+3	; 0x03
    21e2:	54 81       	ldd	r21, Z+4	; 0x04
    21e4:	f9 01       	movw	r30, r18
    21e6:	ee 0f       	add	r30, r30
    21e8:	ff 1f       	adc	r31, r31
    21ea:	22 0f       	add	r18, r18
    21ec:	33 1f       	adc	r19, r19
    21ee:	22 0f       	add	r18, r18
    21f0:	33 1f       	adc	r19, r19
    21f2:	22 0f       	add	r18, r18
    21f4:	33 1f       	adc	r19, r19
    21f6:	e2 0f       	add	r30, r18
    21f8:	f3 1f       	adc	r31, r19
    21fa:	e8 0f       	add	r30, r24
    21fc:	f9 1f       	adc	r31, r25
    21fe:	52 83       	std	Z+2, r21	; 0x02
    2200:	41 83       	std	Z+1, r20	; 0x01
						MesServos[pin_servo].moving = FALSE;
    2202:	20 91 15 01 	lds	r18, 0x0115
    2206:	33 27       	eor	r19, r19
    2208:	27 fd       	sbrc	r18, 7
    220a:	30 95       	com	r19
    220c:	a9 01       	movw	r20, r18
    220e:	44 0f       	add	r20, r20
    2210:	55 1f       	adc	r21, r21
    2212:	22 0f       	add	r18, r18
    2214:	33 1f       	adc	r19, r19
    2216:	22 0f       	add	r18, r18
    2218:	33 1f       	adc	r19, r19
    221a:	22 0f       	add	r18, r18
    221c:	33 1f       	adc	r19, r19
    221e:	24 0f       	add	r18, r20
    2220:	35 1f       	adc	r19, r21
    2222:	82 0f       	add	r24, r18
    2224:	93 1f       	adc	r25, r19
    2226:	fc 01       	movw	r30, r24
    2228:	10 86       	std	Z+8, r1	; 0x08
    222a:	b8 c0       	rjmp	.+368    	; 0x239c <__vector_13+0x4ae>
					}						
				}
				else
				{
					//on applique la nouvelle consigne				
					MesServos[pin_servo].ticks -= MesServos[pin_servo].increment;
    222c:	20 91 15 01 	lds	r18, 0x0115
    2230:	33 27       	eor	r19, r19
    2232:	27 fd       	sbrc	r18, 7
    2234:	30 95       	com	r19
    2236:	83 e5       	ldi	r24, 0x53	; 83
    2238:	91 e0       	ldi	r25, 0x01	; 1
    223a:	f9 01       	movw	r30, r18
    223c:	ee 0f       	add	r30, r30
    223e:	ff 1f       	adc	r31, r31
    2240:	22 0f       	add	r18, r18
    2242:	33 1f       	adc	r19, r19
    2244:	22 0f       	add	r18, r18
    2246:	33 1f       	adc	r19, r19
    2248:	22 0f       	add	r18, r18
    224a:	33 1f       	adc	r19, r19
    224c:	e2 0f       	add	r30, r18
    224e:	f3 1f       	adc	r31, r19
    2250:	e8 0f       	add	r30, r24
    2252:	f9 1f       	adc	r31, r25
    2254:	61 81       	ldd	r22, Z+1	; 0x01
    2256:	72 81       	ldd	r23, Z+2	; 0x02
    2258:	20 91 15 01 	lds	r18, 0x0115
    225c:	33 27       	eor	r19, r19
    225e:	27 fd       	sbrc	r18, 7
    2260:	30 95       	com	r19
    2262:	d9 01       	movw	r26, r18
    2264:	aa 0f       	add	r26, r26
    2266:	bb 1f       	adc	r27, r27
    2268:	22 0f       	add	r18, r18
    226a:	33 1f       	adc	r19, r19
    226c:	22 0f       	add	r18, r18
    226e:	33 1f       	adc	r19, r19
    2270:	22 0f       	add	r18, r18
    2272:	33 1f       	adc	r19, r19
    2274:	a2 0f       	add	r26, r18
    2276:	b3 1f       	adc	r27, r19
    2278:	a8 0f       	add	r26, r24
    227a:	b9 1f       	adc	r27, r25
    227c:	16 96       	adiw	r26, 0x06	; 6
    227e:	4d 91       	ld	r20, X+
    2280:	5c 91       	ld	r21, X
    2282:	17 97       	sbiw	r26, 0x07	; 7
    2284:	9b 01       	movw	r18, r22
    2286:	24 1b       	sub	r18, r20
    2288:	35 0b       	sbc	r19, r21
    228a:	32 83       	std	Z+2, r19	; 0x02
    228c:	21 83       	std	Z+1, r18	; 0x01
					
					//si on est en ovf on reajuste	
					if( MesServos[pin_servo].ticks <= MesServos[pin_servo].ticks_consigne )
    228e:	20 91 15 01 	lds	r18, 0x0115
    2292:	33 27       	eor	r19, r19
    2294:	27 fd       	sbrc	r18, 7
    2296:	30 95       	com	r19
    2298:	f9 01       	movw	r30, r18
    229a:	ee 0f       	add	r30, r30
    229c:	ff 1f       	adc	r31, r31
    229e:	22 0f       	add	r18, r18
    22a0:	33 1f       	adc	r19, r19
    22a2:	22 0f       	add	r18, r18
    22a4:	33 1f       	adc	r19, r19
    22a6:	22 0f       	add	r18, r18
    22a8:	33 1f       	adc	r19, r19
    22aa:	e2 0f       	add	r30, r18
    22ac:	f3 1f       	adc	r31, r19
    22ae:	e8 0f       	add	r30, r24
    22b0:	f9 1f       	adc	r31, r25
    22b2:	41 81       	ldd	r20, Z+1	; 0x01
    22b4:	52 81       	ldd	r21, Z+2	; 0x02
    22b6:	20 91 15 01 	lds	r18, 0x0115
    22ba:	33 27       	eor	r19, r19
    22bc:	27 fd       	sbrc	r18, 7
    22be:	30 95       	com	r19
    22c0:	b9 01       	movw	r22, r18
    22c2:	66 0f       	add	r22, r22
    22c4:	77 1f       	adc	r23, r23
    22c6:	22 0f       	add	r18, r18
    22c8:	33 1f       	adc	r19, r19
    22ca:	22 0f       	add	r18, r18
    22cc:	33 1f       	adc	r19, r19
    22ce:	22 0f       	add	r18, r18
    22d0:	33 1f       	adc	r19, r19
    22d2:	26 0f       	add	r18, r22
    22d4:	37 1f       	adc	r19, r23
    22d6:	82 0f       	add	r24, r18
    22d8:	93 1f       	adc	r25, r19
    22da:	fc 01       	movw	r30, r24
    22dc:	83 81       	ldd	r24, Z+3	; 0x03
    22de:	94 81       	ldd	r25, Z+4	; 0x04
    22e0:	84 17       	cp	r24, r20
    22e2:	95 07       	cpc	r25, r21
    22e4:	08 f4       	brcc	.+2      	; 0x22e8 <__vector_13+0x3fa>
    22e6:	5a c0       	rjmp	.+180    	; 0x239c <__vector_13+0x4ae>
					{
						MesServos[pin_servo].ticks = MesServos[pin_servo].ticks_consigne;
    22e8:	20 91 15 01 	lds	r18, 0x0115
    22ec:	33 27       	eor	r19, r19
    22ee:	27 fd       	sbrc	r18, 7
    22f0:	30 95       	com	r19
    22f2:	40 91 15 01 	lds	r20, 0x0115
    22f6:	55 27       	eor	r21, r21
    22f8:	47 fd       	sbrc	r20, 7
    22fa:	50 95       	com	r21
    22fc:	83 e5       	ldi	r24, 0x53	; 83
    22fe:	91 e0       	ldi	r25, 0x01	; 1
    2300:	fa 01       	movw	r30, r20
    2302:	ee 0f       	add	r30, r30
    2304:	ff 1f       	adc	r31, r31
    2306:	44 0f       	add	r20, r20
    2308:	55 1f       	adc	r21, r21
    230a:	44 0f       	add	r20, r20
    230c:	55 1f       	adc	r21, r21
    230e:	44 0f       	add	r20, r20
    2310:	55 1f       	adc	r21, r21
    2312:	e4 0f       	add	r30, r20
    2314:	f5 1f       	adc	r31, r21
    2316:	e8 0f       	add	r30, r24
    2318:	f9 1f       	adc	r31, r25
    231a:	43 81       	ldd	r20, Z+3	; 0x03
    231c:	54 81       	ldd	r21, Z+4	; 0x04
    231e:	f9 01       	movw	r30, r18
    2320:	ee 0f       	add	r30, r30
    2322:	ff 1f       	adc	r31, r31
    2324:	22 0f       	add	r18, r18
    2326:	33 1f       	adc	r19, r19
    2328:	22 0f       	add	r18, r18
    232a:	33 1f       	adc	r19, r19
    232c:	22 0f       	add	r18, r18
    232e:	33 1f       	adc	r19, r19
    2330:	e2 0f       	add	r30, r18
    2332:	f3 1f       	adc	r31, r19
    2334:	e8 0f       	add	r30, r24
    2336:	f9 1f       	adc	r31, r25
    2338:	52 83       	std	Z+2, r21	; 0x02
    233a:	41 83       	std	Z+1, r20	; 0x01
						MesServos[pin_servo].moving = FALSE;
    233c:	20 91 15 01 	lds	r18, 0x0115
    2340:	33 27       	eor	r19, r19
    2342:	27 fd       	sbrc	r18, 7
    2344:	30 95       	com	r19
    2346:	a9 01       	movw	r20, r18
    2348:	44 0f       	add	r20, r20
    234a:	55 1f       	adc	r21, r21
    234c:	22 0f       	add	r18, r18
    234e:	33 1f       	adc	r19, r19
    2350:	22 0f       	add	r18, r18
    2352:	33 1f       	adc	r19, r19
    2354:	22 0f       	add	r18, r18
    2356:	33 1f       	adc	r19, r19
    2358:	24 0f       	add	r18, r20
    235a:	35 1f       	adc	r19, r21
    235c:	82 0f       	add	r24, r18
    235e:	93 1f       	adc	r25, r19
    2360:	fc 01       	movw	r30, r24
    2362:	10 86       	std	Z+8, r1	; 0x08
    2364:	1b c0       	rjmp	.+54     	; 0x239c <__vector_13+0x4ae>
			}
		}
	}
	else
	{
		if( TCNT1 <  (unsigned int)(REFRESH_INTERVAL + OFFSET_TIMER) )
    2366:	80 91 84 00 	lds	r24, 0x0084
    236a:	90 91 85 00 	lds	r25, 0x0085
    236e:	fe e4       	ldi	r31, 0x4E	; 78
    2370:	87 32       	cpi	r24, 0x27	; 39
    2372:	9f 07       	cpc	r25, r31
    2374:	38 f4       	brcc	.+14     	; 0x2384 <__vector_13+0x496>
		{
			OCR1A = (unsigned int)REFRESH_INTERVAL;  
    2376:	80 e2       	ldi	r24, 0x20	; 32
    2378:	9e e4       	ldi	r25, 0x4E	; 78
    237a:	90 93 89 00 	sts	0x0089, r25
    237e:	80 93 88 00 	sts	0x0088, r24
    2382:	09 c0       	rjmp	.+18     	; 0x2396 <__vector_13+0x4a8>
		}
		else
		{
			OCR1A = TCNT1 + OFFSET_TIMER;
    2384:	80 91 84 00 	lds	r24, 0x0084
    2388:	90 91 85 00 	lds	r25, 0x0085
    238c:	07 96       	adiw	r24, 0x07	; 7
    238e:	90 93 89 00 	sts	0x0089, r25
    2392:	80 93 88 00 	sts	0x0088, r24
		}
		pin_servo = -1;
    2396:	8f ef       	ldi	r24, 0xFF	; 255
    2398:	80 93 15 01 	sts	0x0115, r24
	}				
    239c:	ff 91       	pop	r31
    239e:	ef 91       	pop	r30
    23a0:	df 91       	pop	r29
    23a2:	cf 91       	pop	r28
    23a4:	bf 91       	pop	r27
    23a6:	af 91       	pop	r26
    23a8:	9f 91       	pop	r25
    23aa:	8f 91       	pop	r24
    23ac:	7f 91       	pop	r23
    23ae:	6f 91       	pop	r22
    23b0:	5f 91       	pop	r21
    23b2:	4f 91       	pop	r20
    23b4:	3f 91       	pop	r19
    23b6:	2f 91       	pop	r18
    23b8:	0f 90       	pop	r0
    23ba:	0b be       	out	0x3b, r0	; 59
    23bc:	0f 90       	pop	r0
    23be:	0f be       	out	0x3f, r0	; 63
    23c0:	0f 90       	pop	r0
    23c2:	1f 90       	pop	r1
    23c4:	18 95       	reti

000023c6 <DrvTimerPlayTimer>:

	
//fct qui parametre le timer
void DrvTimerPlayTimer( Int8U index_timer, Int16U delay, ETimerMode mode, ptrfct_Isr_Callback_Timer ptrfct )
{
	MesTimer[ index_timer ].enable = TRUE;
    23c6:	e8 2f       	mov	r30, r24
    23c8:	f0 e0       	ldi	r31, 0x00	; 0
    23ca:	ee 0f       	add	r30, r30
    23cc:	ff 1f       	adc	r31, r31
    23ce:	ee 0f       	add	r30, r30
    23d0:	ff 1f       	adc	r31, r31
    23d2:	ee 0f       	add	r30, r30
    23d4:	ff 1f       	adc	r31, r31
    23d6:	e4 57       	subi	r30, 0x74	; 116
    23d8:	fd 4f       	sbci	r31, 0xFD	; 253
    23da:	81 e0       	ldi	r24, 0x01	; 1
    23dc:	80 83       	st	Z, r24
	MesTimer[ index_timer ].delay = delay;
    23de:	72 83       	std	Z+2, r23	; 0x02
    23e0:	61 83       	std	Z+1, r22	; 0x01
	MesTimer[ index_timer ].cpt_delay = 0U;
    23e2:	14 82       	std	Z+4, r1	; 0x04
    23e4:	13 82       	std	Z+3, r1	; 0x03
	MesTimer[ index_timer ].mode = mode;
    23e6:	45 83       	std	Z+5, r20	; 0x05
	MesTimer[ index_timer ].ptrfct = ptrfct;
    23e8:	37 83       	std	Z+7, r19	; 0x07
    23ea:	26 83       	std	Z+6, r18	; 0x06
}
    23ec:	08 95       	ret

000023ee <DrvTimerPauseTimer>:

//fct qui met en pause le timer
void DrvTimerPauseTimer( Int8U index_timer )
{	
	MesTimer[ index_timer ].enable = FALSE;
    23ee:	e8 2f       	mov	r30, r24
    23f0:	f0 e0       	ldi	r31, 0x00	; 0
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	ee 0f       	add	r30, r30
    23f8:	ff 1f       	adc	r31, r31
    23fa:	ee 0f       	add	r30, r30
    23fc:	ff 1f       	adc	r31, r31
    23fe:	e4 57       	subi	r30, 0x74	; 116
    2400:	fd 4f       	sbci	r31, 0xFD	; 253
    2402:	10 82       	st	Z, r1
}
    2404:	08 95       	ret

00002406 <DrvTimerStopTimer>:

//fct qui remet a zero les parametres du timer
void DrvTimerStopTimer( Int8U index_timer )
{	
	MesTimer[ index_timer ].enable    = FALSE;
    2406:	e8 2f       	mov	r30, r24
    2408:	f0 e0       	ldi	r31, 0x00	; 0
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	ee 0f       	add	r30, r30
    2410:	ff 1f       	adc	r31, r31
    2412:	ee 0f       	add	r30, r30
    2414:	ff 1f       	adc	r31, r31
    2416:	e4 57       	subi	r30, 0x74	; 116
    2418:	fd 4f       	sbci	r31, 0xFD	; 253
    241a:	10 82       	st	Z, r1
	MesTimer[ index_timer ].delay     = 0U ;
    241c:	12 82       	std	Z+2, r1	; 0x02
    241e:	11 82       	std	Z+1, r1	; 0x01
	MesTimer[ index_timer ].cpt_delay = 0U;
    2420:	14 82       	std	Z+4, r1	; 0x04
    2422:	13 82       	std	Z+3, r1	; 0x03
	MesTimer[ index_timer ].mode      = E_TIMER_MODE_NONE;
    2424:	82 e0       	ldi	r24, 0x02	; 2
    2426:	85 83       	std	Z+5, r24	; 0x05
	MesTimer[ index_timer ].ptrfct    = NULL;
    2428:	17 82       	std	Z+7, r1	; 0x07
    242a:	16 82       	std	Z+6, r1	; 0x06
}
    242c:	08 95       	ret

0000242e <DrvTimerResetTimer>:

//fct qui reseter le timer
void DrvTimerResetTimer( Int8U index_timer )
{
	MesTimer[ index_timer ].cpt_delay = 0U;	
    242e:	e8 2f       	mov	r30, r24
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	ee 0f       	add	r30, r30
    2438:	ff 1f       	adc	r31, r31
    243a:	ee 0f       	add	r30, r30
    243c:	ff 1f       	adc	r31, r31
    243e:	e4 57       	subi	r30, 0x74	; 116
    2440:	fd 4f       	sbci	r31, 0xFD	; 253
    2442:	14 82       	std	Z+4, r1	; 0x04
    2444:	13 82       	std	Z+3, r1	; 0x03
}
    2446:	08 95       	ret

00002448 <DrvTimerDelayTimer>:


//fct qui fixe un delay au timer
void DrvTimerDelayTimer( Int8U index_timer , Int16U delay)
{
	MesTimer[ index_timer ].cpt_delay = 0U;	
    2448:	e8 2f       	mov	r30, r24
    244a:	f0 e0       	ldi	r31, 0x00	; 0
    244c:	ee 0f       	add	r30, r30
    244e:	ff 1f       	adc	r31, r31
    2450:	ee 0f       	add	r30, r30
    2452:	ff 1f       	adc	r31, r31
    2454:	ee 0f       	add	r30, r30
    2456:	ff 1f       	adc	r31, r31
    2458:	e4 57       	subi	r30, 0x74	; 116
    245a:	fd 4f       	sbci	r31, 0xFD	; 253
    245c:	14 82       	std	Z+4, r1	; 0x04
    245e:	13 82       	std	Z+3, r1	; 0x03
	MesTimer[ index_timer ].delay	  = delay;
    2460:	72 83       	std	Z+2, r23	; 0x02
    2462:	61 83       	std	Z+1, r22	; 0x01
}
    2464:	08 95       	ret

00002466 <DrvTimerComputeOCR>:
	
}

//On calcule le registre OCR en fonction du temp souhaité
Int16U DrvTimerComputeOCR(Int32U us_time , ETimer0Clock *clock_div)
{  
    2466:	af 92       	push	r10
    2468:	bf 92       	push	r11
    246a:	cf 92       	push	r12
    246c:	df 92       	push	r13
    246e:	ef 92       	push	r14
    2470:	ff 92       	push	r15
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	cf 93       	push	r28
    2478:	df 93       	push	r29
    247a:	7b 01       	movw	r14, r22
    247c:	8c 01       	movw	r16, r24
    247e:	ea 01       	movw	r28, r20
	Int16U div;
	Int32U ocr;
	Int16U min_div;
	min_div = ( ( ( (CONF_FOSC_HZ / 1000UL ) * us_time ) + 255999UL ) / 256000UL );
    2480:	20 e8       	ldi	r18, 0x80	; 128
    2482:	3e e3       	ldi	r19, 0x3E	; 62
    2484:	40 e0       	ldi	r20, 0x00	; 0
    2486:	50 e0       	ldi	r21, 0x00	; 0
    2488:	0e 94 49 1c 	call	0x3892	; 0x3892 <__mulsi3>
    248c:	61 50       	subi	r22, 0x01	; 1
    248e:	78 41       	sbci	r23, 0x18	; 24
    2490:	8c 4f       	sbci	r24, 0xFC	; 252
    2492:	9f 4f       	sbci	r25, 0xFF	; 255
    2494:	20 e0       	ldi	r18, 0x00	; 0
    2496:	38 ee       	ldi	r19, 0xE8	; 232
    2498:	43 e0       	ldi	r20, 0x03	; 3
    249a:	50 e0       	ldi	r21, 0x00	; 0
    249c:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
	if(min_div >= 256)
    24a0:	2f 3f       	cpi	r18, 0xFF	; 255
    24a2:	31 05       	cpc	r19, r1
    24a4:	31 f0       	breq	.+12     	; 0x24b2 <DrvTimerComputeOCR+0x4c>
    24a6:	28 f0       	brcs	.+10     	; 0x24b2 <DrvTimerComputeOCR+0x4c>
	{
		div = 1024;
		*clock_div = TIMER_0_CLK_DIV_1024;
    24a8:	85 e0       	ldi	r24, 0x05	; 5
    24aa:	88 83       	st	Y, r24
	Int32U ocr;
	Int16U min_div;
	min_div = ( ( ( (CONF_FOSC_HZ / 1000UL ) * us_time ) + 255999UL ) / 256000UL );
	if(min_div >= 256)
	{
		div = 1024;
    24ac:	80 e0       	ldi	r24, 0x00	; 0
    24ae:	94 e0       	ldi	r25, 0x04	; 4
    24b0:	1c c0       	rjmp	.+56     	; 0x24ea <DrvTimerComputeOCR+0x84>
		*clock_div = TIMER_0_CLK_DIV_1024;
	}
	else if(min_div >= 128)
    24b2:	20 38       	cpi	r18, 0x80	; 128
    24b4:	31 05       	cpc	r19, r1
    24b6:	28 f0       	brcs	.+10     	; 0x24c2 <DrvTimerComputeOCR+0x5c>
	{
		div = 256;
		*clock_div = TIMER_0_CLK_DIV_256;
    24b8:	84 e0       	ldi	r24, 0x04	; 4
    24ba:	88 83       	st	Y, r24
		div = 1024;
		*clock_div = TIMER_0_CLK_DIV_1024;
	}
	else if(min_div >= 128)
	{
		div = 256;
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	91 e0       	ldi	r25, 0x01	; 1
    24c0:	14 c0       	rjmp	.+40     	; 0x24ea <DrvTimerComputeOCR+0x84>
		*clock_div = TIMER_0_CLK_DIV_256;
	}
	else if(min_div >= 8)
    24c2:	28 30       	cpi	r18, 0x08	; 8
    24c4:	31 05       	cpc	r19, r1
    24c6:	28 f0       	brcs	.+10     	; 0x24d2 <DrvTimerComputeOCR+0x6c>
	{
		div = 64;
		*clock_div = TIMER_0_CLK_DIV_64;
    24c8:	83 e0       	ldi	r24, 0x03	; 3
    24ca:	88 83       	st	Y, r24
		div = 256;
		*clock_div = TIMER_0_CLK_DIV_256;
	}
	else if(min_div >= 8)
	{
		div = 64;
    24cc:	80 e4       	ldi	r24, 0x40	; 64
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	0c c0       	rjmp	.+24     	; 0x24ea <DrvTimerComputeOCR+0x84>
		*clock_div = TIMER_0_CLK_DIV_64;
	}
	else if(min_div > 1)
    24d2:	22 30       	cpi	r18, 0x02	; 2
    24d4:	31 05       	cpc	r19, r1
    24d6:	28 f0       	brcs	.+10     	; 0x24e2 <DrvTimerComputeOCR+0x7c>
	{
		div = 8;
		*clock_div = TIMER_0_CLK_DIV_8;
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	88 83       	st	Y, r24
		div = 64;
		*clock_div = TIMER_0_CLK_DIV_64;
	}
	else if(min_div > 1)
	{
		div = 8;
    24dc:	88 e0       	ldi	r24, 0x08	; 8
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	04 c0       	rjmp	.+8      	; 0x24ea <DrvTimerComputeOCR+0x84>
		*clock_div = TIMER_0_CLK_DIV_8;
	}
	else
	{
		div = 1;
		*clock_div = TIMER_0_CLK_DIV_1;
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	88 83       	st	Y, r24
		div = 8;
		*clock_div = TIMER_0_CLK_DIV_8;
	}
	else
	{
		div = 1;
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	90 e0       	ldi	r25, 0x00	; 0
		*clock_div = TIMER_0_CLK_DIV_1;
	}
  
	ocr =  ( CONF_FOSC_HZ / (2 * div * ( 1000000 / us_time ) ) ) - 1;
    24ea:	5c 01       	movw	r10, r24
    24ec:	aa 0c       	add	r10, r10
    24ee:	bb 1c       	adc	r11, r11
    24f0:	cc 24       	eor	r12, r12
    24f2:	dd 24       	eor	r13, r13
    24f4:	60 e4       	ldi	r22, 0x40	; 64
    24f6:	72 e4       	ldi	r23, 0x42	; 66
    24f8:	8f e0       	ldi	r24, 0x0F	; 15
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	a8 01       	movw	r20, r16
    24fe:	97 01       	movw	r18, r14
    2500:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
    2504:	c6 01       	movw	r24, r12
    2506:	b5 01       	movw	r22, r10
    2508:	0e 94 49 1c 	call	0x3892	; 0x3892 <__mulsi3>
    250c:	9b 01       	movw	r18, r22
    250e:	ac 01       	movw	r20, r24
    2510:	60 e0       	ldi	r22, 0x00	; 0
    2512:	74 e2       	ldi	r23, 0x24	; 36
    2514:	84 ef       	ldi	r24, 0xF4	; 244
    2516:	90 e0       	ldi	r25, 0x00	; 0
    2518:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
	ocr *= 2;
	ocr += 2;
    251c:	22 0f       	add	r18, r18
    251e:	33 1f       	adc	r19, r19
    2520:	44 1f       	adc	r20, r20
    2522:	55 1f       	adc	r21, r21
  
  return ocr;
 
}
    2524:	82 2f       	mov	r24, r18
    2526:	93 2f       	mov	r25, r19
    2528:	df 91       	pop	r29
    252a:	cf 91       	pop	r28
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	df 90       	pop	r13
    2536:	cf 90       	pop	r12
    2538:	bf 90       	pop	r11
    253a:	af 90       	pop	r10
    253c:	08 95       	ret

0000253e <DrvTimerInitSystemTimer>:


////////////////////////////////////////PRIVATE FUNCTIONS/////////////////////////////////////////
// fait tourner le timer 0 compA a 1 ms
void DrvTimerInitSystemTimer( void )
{
    253e:	df 93       	push	r29
    2540:	cf 93       	push	r28
    2542:	0f 92       	push	r0
    2544:	cd b7       	in	r28, 0x3d	; 61
    2546:	de b7       	in	r29, 0x3e	; 62
	//timer system a la ms
	ETimer0Clock clock_div;
	Int8U ocr = DrvTimerComputeOCR( 1000U , &clock_div );
    2548:	68 ee       	ldi	r22, 0xE8	; 232
    254a:	73 e0       	ldi	r23, 0x03	; 3
    254c:	80 e0       	ldi	r24, 0x00	; 0
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	ae 01       	movw	r20, r28
    2552:	4f 5f       	subi	r20, 0xFF	; 255
    2554:	5f 4f       	sbci	r21, 0xFF	; 255
    2556:	0e 94 33 12 	call	0x2466	; 0x2466 <DrvTimerComputeOCR>
	micTimer0SetOutputCompareRegisterA( ocr );
    255a:	0e 94 b0 19 	call	0x3360	; 0x3360 <micTimer0SetOutputCompareRegisterA>
    micTimer0SetClockDivision( clock_div ) ;
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	0e 94 a6 19 	call	0x334c	; 0x334c <micTimer0SetClockDivision>
	micTimer0WaveformGenerationMode( TIMER_0_CLEAR_ON_COMPARE ); 
    2564:	82 e0       	ldi	r24, 0x02	; 2
    2566:	0e 94 83 19 	call	0x3306	; 0x3306 <micTimer0WaveformGenerationMode>
	micTimer0ClearTimerCounterInterruptFlagRegister( TIMER_0_COMPARE_A_FLAG );
    256a:	82 e0       	ldi	r24, 0x02	; 2
    256c:	0e 94 c7 19 	call	0x338e	; 0x338e <micTimer0ClearTimerCounterInterruptFlagRegister>
	micTimer0SetTimerCounterInterrupt( TIMER_0_COMPARE_A_INTERRUPT );
    2570:	82 e0       	ldi	r24, 0x02	; 2
    2572:	0e 94 b8 19 	call	0x3370	; 0x3370 <micTimer0SetTimerCounterInterrupt>
	
}
    2576:	0f 90       	pop	r0
    2578:	cf 91       	pop	r28
    257a:	df 91       	pop	r29
    257c:	08 95       	ret

0000257e <DrvTimer>:
	{
		MesTimer[ loop_index ].enable = FALSE;
		MesTimer[ loop_index ].ptrfct = NULL;
	}		
	//on init le timer system a 1 ms
	DrvTimerInitSystemTimer();
    257e:	0e 94 9f 12 	call	0x253e	; 0x253e <DrvTimerInitSystemTimer>
}
    2582:	08 95       	ret

00002584 <__vector_16>:
volatile Int8U timeout_ms =0;
volatile Int8U timeout_s =0;
volatile Int8U timeout_5s =0;
volatile Int8U timeout_10s =0;
ISR(TIMER0_COMPA_vect)
{
    2584:	1f 92       	push	r1
    2586:	0f 92       	push	r0
    2588:	0f b6       	in	r0, 0x3f	; 63
    258a:	0f 92       	push	r0
    258c:	0b b6       	in	r0, 0x3b	; 59
    258e:	0f 92       	push	r0
    2590:	11 24       	eor	r1, r1
    2592:	2f 93       	push	r18
    2594:	3f 93       	push	r19
    2596:	4f 93       	push	r20
    2598:	5f 93       	push	r21
    259a:	6f 93       	push	r22
    259c:	7f 93       	push	r23
    259e:	8f 93       	push	r24
    25a0:	9f 93       	push	r25
    25a2:	af 93       	push	r26
    25a4:	bf 93       	push	r27
    25a6:	ef 93       	push	r30
    25a8:	ff 93       	push	r31
	//on gere l'evenement 100 ms
	timeout_ms++;
    25aa:	80 91 e0 01 	lds	r24, 0x01E0
    25ae:	8f 5f       	subi	r24, 0xFF	; 255
    25b0:	80 93 e0 01 	sts	0x01E0, r24
	if(timeout_ms == 100)
    25b4:	80 91 e0 01 	lds	r24, 0x01E0
    25b8:	84 36       	cpi	r24, 0x64	; 100
    25ba:	a1 f5       	brne	.+104    	; 0x2624 <__vector_16+0xa0>
	{
		timeout_ms =0;
    25bc:	10 92 e0 01 	sts	0x01E0, r1
		DrvEventAddEvent( CONF_EVENT_TIMER_100MS );	
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	90 e0       	ldi	r25, 0x00	; 0
    25c4:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DrvEventAddEvent>
		//on gere l'evenement 1 s
		timeout_s++;
    25c8:	80 91 e1 01 	lds	r24, 0x01E1
    25cc:	8f 5f       	subi	r24, 0xFF	; 255
    25ce:	80 93 e1 01 	sts	0x01E1, r24
		if(timeout_s == 10)
    25d2:	80 91 e1 01 	lds	r24, 0x01E1
    25d6:	8a 30       	cpi	r24, 0x0A	; 10
    25d8:	59 f4       	brne	.+22     	; 0x25f0 <__vector_16+0x6c>
		{
			timeout_s = 0;
    25da:	10 92 e1 01 	sts	0x01E1, r1
			timeout_5s++;
    25de:	80 91 e2 01 	lds	r24, 0x01E2
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	80 93 e2 01 	sts	0x01E2, r24
			DrvEventAddEvent( CONF_EVENT_TIMER_1S );	
    25e8:	82 e0       	ldi	r24, 0x02	; 2
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DrvEventAddEvent>
		}
		if(timeout_5s == 5)
    25f0:	80 91 e2 01 	lds	r24, 0x01E2
    25f4:	85 30       	cpi	r24, 0x05	; 5
    25f6:	59 f4       	brne	.+22     	; 0x260e <__vector_16+0x8a>
		{
			timeout_5s = 0;
    25f8:	10 92 e2 01 	sts	0x01E2, r1
			timeout_10s++;
    25fc:	80 91 e3 01 	lds	r24, 0x01E3
    2600:	8f 5f       	subi	r24, 0xFF	; 255
    2602:	80 93 e3 01 	sts	0x01E3, r24
			DrvEventAddEvent( CONF_EVENT_TIMER_5S );	
    2606:	83 e0       	ldi	r24, 0x03	; 3
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DrvEventAddEvent>
		}
		if(timeout_10s == 2)
    260e:	80 91 e3 01 	lds	r24, 0x01E3
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	91 f4       	brne	.+36     	; 0x263a <__vector_16+0xb6>
		{
			timeout_10s = 0;
    2616:	10 92 e3 01 	sts	0x01E3, r1
			DrvEventAddEvent( CONF_EVENT_TIMER_10S );	
    261a:	84 e0       	ldi	r24, 0x04	; 4
    261c:	90 e0       	ldi	r25, 0x00	; 0
    261e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DrvEventAddEvent>
    2622:	0b c0       	rjmp	.+22     	; 0x263a <__vector_16+0xb6>
		}
	}
	else if( ( timeout_ms % 10 ) == 0)
    2624:	80 91 e0 01 	lds	r24, 0x01E0
    2628:	6a e0       	ldi	r22, 0x0A	; 10
    262a:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <__udivmodqi4>
    262e:	99 23       	and	r25, r25
    2630:	21 f4       	brne	.+8      	; 0x263a <__vector_16+0xb6>
	{
		DrvEventAddEvent( CONF_EVENT_TIMER_10MS );	
    2632:	80 e0       	ldi	r24, 0x00	; 0
    2634:	90 e0       	ldi	r25, 0x00	; 0
    2636:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DrvEventAddEvent>
					}
				}
			}
		}			
	}
    263a:	ff 91       	pop	r31
    263c:	ef 91       	pop	r30
    263e:	bf 91       	pop	r27
    2640:	af 91       	pop	r26
    2642:	9f 91       	pop	r25
    2644:	8f 91       	pop	r24
    2646:	7f 91       	pop	r23
    2648:	6f 91       	pop	r22
    264a:	5f 91       	pop	r21
    264c:	4f 91       	pop	r20
    264e:	3f 91       	pop	r19
    2650:	2f 91       	pop	r18
    2652:	0f 90       	pop	r0
    2654:	0b be       	out	0x3b, r0	; 59
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	0f 90       	pop	r0
    265c:	1f 90       	pop	r1
    265e:	18 95       	reti

00002660 <DrvUart>:
// Init du Drv Uart 
void DrvUart( )
{
	//on fixe les registres
	#ifdef CONF_UART_0_INDEX 
		UBRR0 = 0x0010U;		//57600 baud
    2660:	80 e1       	ldi	r24, 0x10	; 16
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	90 93 c5 00 	sts	0x00C5, r25
    2668:	80 93 c4 00 	sts	0x00C4, r24
		UCSR0B |= (1<<RXEN0);	//enable RX
    266c:	e1 ec       	ldi	r30, 0xC1	; 193
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	20 81       	ld	r18, Z
    2672:	20 61       	ori	r18, 0x10	; 16
    2674:	20 83       	st	Z, r18
		UCSR0B |= (1<<TXEN0);	//enable TX 
    2676:	20 81       	ld	r18, Z
    2678:	28 60       	ori	r18, 0x08	; 8
    267a:	20 83       	st	Z, r18
		UCSR0B |= (1<<RXCIE0);	//enable RX interrupt 
    267c:	20 81       	ld	r18, Z
    267e:	20 68       	ori	r18, 0x80	; 128
    2680:	20 83       	st	Z, r18
		UCSR0C|= (1<<UCSZ00); 	//8 bits, no parity, 1 stop 
    2682:	e2 ec       	ldi	r30, 0xC2	; 194
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	20 81       	ld	r18, Z
    2688:	22 60       	ori	r18, 0x02	; 2
    268a:	20 83       	st	Z, r18
		UCSR0C|= (1<<UCSZ01); 
    268c:	20 81       	ld	r18, Z
    268e:	24 60       	ori	r18, 0x04	; 4
    2690:	20 83       	st	Z, r18
	#endif
			
	#ifdef CONF_UART_1_INDEX
		UBRR1 = 0x0010U;		//57600 baud
    2692:	90 93 cd 00 	sts	0x00CD, r25
    2696:	80 93 cc 00 	sts	0x00CC, r24
		UCSR1B |= (1<<RXEN1);	//enable RX
    269a:	e9 ec       	ldi	r30, 0xC9	; 201
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	80 81       	ld	r24, Z
    26a0:	80 61       	ori	r24, 0x10	; 16
    26a2:	80 83       	st	Z, r24
		UCSR1B |= (1<<TXEN1);	//enable TX 
    26a4:	80 81       	ld	r24, Z
    26a6:	88 60       	ori	r24, 0x08	; 8
    26a8:	80 83       	st	Z, r24
		UCSR1B |= (1<<RXCIE1);	//enable RX interrupt 
    26aa:	80 81       	ld	r24, Z
    26ac:	80 68       	ori	r24, 0x80	; 128
    26ae:	80 83       	st	Z, r24
		UCSR1C|= (1<<UCSZ10); 	//8 bits, no parity, 1 stop 
    26b0:	ea ec       	ldi	r30, 0xCA	; 202
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	82 60       	ori	r24, 0x02	; 2
    26b8:	80 83       	st	Z, r24
		UCSR1C|= (1<<UCSZ11);  
    26ba:	80 81       	ld	r24, Z
    26bc:	84 60       	ori	r24, 0x04	; 4
    26be:	80 83       	st	Z, r24
	#endif
}
    26c0:	08 95       	ret

000026c2 <DrvUart0ReadMessage>:

//on recupere le message
void DrvUart0ReadMessage( Int8U *i_message, Int8U *i_message_len )
{
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < in_message_len_0 ; loop_send++)
    26c6:	20 91 e4 01 	lds	r18, 0x01E4
    26ca:	22 23       	and	r18, r18
    26cc:	91 f0       	breq	.+36     	; 0x26f2 <DrvUart0ReadMessage+0x30>
    26ce:	a0 e0       	ldi	r26, 0x00	; 0
	{
		i_message[ loop_send ] = in_message_0[ loop_send ];
    26d0:	44 e5       	ldi	r20, 0x54	; 84
    26d2:	53 e0       	ldi	r21, 0x03	; 3
    26d4:	2a 2f       	mov	r18, r26
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	fc 01       	movw	r30, r24
    26da:	e2 0f       	add	r30, r18
    26dc:	f3 1f       	adc	r31, r19
    26de:	24 0f       	add	r18, r20
    26e0:	35 1f       	adc	r19, r21
    26e2:	e9 01       	movw	r28, r18
    26e4:	28 81       	ld	r18, Y
    26e6:	20 83       	st	Z, r18

//on recupere le message
void DrvUart0ReadMessage( Int8U *i_message, Int8U *i_message_len )
{
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < in_message_len_0 ; loop_send++)
    26e8:	af 5f       	subi	r26, 0xFF	; 255
    26ea:	20 91 e4 01 	lds	r18, 0x01E4
    26ee:	a2 17       	cp	r26, r18
    26f0:	88 f3       	brcs	.-30     	; 0x26d4 <DrvUart0ReadMessage+0x12>
	{
		i_message[ loop_send ] = in_message_0[ loop_send ];
	} 
	*i_message_len = in_message_len_0;
    26f2:	fb 01       	movw	r30, r22
    26f4:	20 83       	st	Z, r18
}
    26f6:	df 91       	pop	r29
    26f8:	cf 91       	pop	r28
    26fa:	08 95       	ret

000026fc <DrvUart0SendMessage>:
//on recupere le message
void DrvUart0SendMessage( Int8U *i_message, Int8U i_message_len )
{
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < i_message_len ; loop_send++)
    2700:	66 23       	and	r22, r22
    2702:	79 f0       	breq	.+30     	; 0x2722 <DrvUart0SendMessage+0x26>
    2704:	a8 2f       	mov	r26, r24
    2706:	b9 2f       	mov	r27, r25
    2708:	90 e0       	ldi	r25, 0x00	; 0
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
    270a:	e0 ec       	ldi	r30, 0xC0	; 192
    270c:	f0 e0       	ldi	r31, 0x00	; 0
		UDR0 = i_message[ loop_send ];
    270e:	c6 ec       	ldi	r28, 0xC6	; 198
    2710:	d0 e0       	ldi	r29, 0x00	; 0
void DrvUart0SendMessage( Int8U *i_message, Int8U i_message_len )
{
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < i_message_len ; loop_send++)
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
    2712:	80 81       	ld	r24, Z
    2714:	85 ff       	sbrs	r24, 5
    2716:	fd cf       	rjmp	.-6      	; 0x2712 <DrvUart0SendMessage+0x16>
		UDR0 = i_message[ loop_send ];
    2718:	8d 91       	ld	r24, X+
    271a:	88 83       	st	Y, r24
}
//on recupere le message
void DrvUart0SendMessage( Int8U *i_message, Int8U i_message_len )
{
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < i_message_len ; loop_send++)
    271c:	9f 5f       	subi	r25, 0xFF	; 255
    271e:	96 17       	cp	r25, r22
    2720:	c0 f3       	brcs	.-16     	; 0x2712 <DrvUart0SendMessage+0x16>
	{
		while ( !( UCSR0A & (1<<UDRE0)) );
		UDR0 = i_message[ loop_send ];
	} 
}
    2722:	df 91       	pop	r29
    2724:	cf 91       	pop	r28
    2726:	08 95       	ret

00002728 <DrvUart1ReadMessage>:


//on recupere le message
void DrvUart1ReadMessage( Int8U *i_message, Int8U *i_message_len )
{
    2728:	cf 93       	push	r28
    272a:	df 93       	push	r29
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < in_message_len_1 ; loop_send++)
    272c:	20 91 e7 01 	lds	r18, 0x01E7
    2730:	22 23       	and	r18, r18
    2732:	91 f0       	breq	.+36     	; 0x2758 <DrvUart1ReadMessage+0x30>
    2734:	a0 e0       	ldi	r26, 0x00	; 0
	{
		i_message[ loop_send ] = in_message_1[ loop_send ];
    2736:	40 ef       	ldi	r20, 0xF0	; 240
    2738:	52 e0       	ldi	r21, 0x02	; 2
    273a:	2a 2f       	mov	r18, r26
    273c:	30 e0       	ldi	r19, 0x00	; 0
    273e:	fc 01       	movw	r30, r24
    2740:	e2 0f       	add	r30, r18
    2742:	f3 1f       	adc	r31, r19
    2744:	24 0f       	add	r18, r20
    2746:	35 1f       	adc	r19, r21
    2748:	e9 01       	movw	r28, r18
    274a:	28 81       	ld	r18, Y
    274c:	20 83       	st	Z, r18

//on recupere le message
void DrvUart1ReadMessage( Int8U *i_message, Int8U *i_message_len )
{
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < in_message_len_1 ; loop_send++)
    274e:	af 5f       	subi	r26, 0xFF	; 255
    2750:	20 91 e7 01 	lds	r18, 0x01E7
    2754:	a2 17       	cp	r26, r18
    2756:	88 f3       	brcs	.-30     	; 0x273a <DrvUart1ReadMessage+0x12>
	{
		i_message[ loop_send ] = in_message_1[ loop_send ];
	} 
	*i_message_len = in_message_len_1;
    2758:	fb 01       	movw	r30, r22
    275a:	20 83       	st	Z, r18
}
    275c:	df 91       	pop	r29
    275e:	cf 91       	pop	r28
    2760:	08 95       	ret

00002762 <DrvUart1SendMessage>:

//on recupere le message
void DrvUart1SendMessage( Int8U *i_message, Int8U i_message_len )
{
    2762:	cf 93       	push	r28
    2764:	df 93       	push	r29
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < i_message_len ; loop_send++)
    2766:	66 23       	and	r22, r22
    2768:	79 f0       	breq	.+30     	; 0x2788 <DrvUart1SendMessage+0x26>
    276a:	a8 2f       	mov	r26, r24
    276c:	b9 2f       	mov	r27, r25
    276e:	90 e0       	ldi	r25, 0x00	; 0
	{
		while ( !( UCSR1A & (1<<UDRE1)) );
    2770:	e8 ec       	ldi	r30, 0xC8	; 200
    2772:	f0 e0       	ldi	r31, 0x00	; 0
		UDR1 = i_message[ loop_send ];
    2774:	ce ec       	ldi	r28, 0xCE	; 206
    2776:	d0 e0       	ldi	r29, 0x00	; 0
void DrvUart1SendMessage( Int8U *i_message, Int8U i_message_len )
{
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < i_message_len ; loop_send++)
	{
		while ( !( UCSR1A & (1<<UDRE1)) );
    2778:	80 81       	ld	r24, Z
    277a:	85 ff       	sbrs	r24, 5
    277c:	fd cf       	rjmp	.-6      	; 0x2778 <DrvUart1SendMessage+0x16>
		UDR1 = i_message[ loop_send ];
    277e:	8d 91       	ld	r24, X+
    2780:	88 83       	st	Y, r24

//on recupere le message
void DrvUart1SendMessage( Int8U *i_message, Int8U i_message_len )
{
	//on enregistre le message 
	for ( Int8U loop_send = 0U ; loop_send < i_message_len ; loop_send++)
    2782:	9f 5f       	subi	r25, 0xFF	; 255
    2784:	96 17       	cp	r25, r22
    2786:	c0 f3       	brcs	.-16     	; 0x2778 <DrvUart1SendMessage+0x16>
	{
		while ( !( UCSR1A & (1<<UDRE1)) );
		UDR1 = i_message[ loop_send ];
	} 
}	
    2788:	df 91       	pop	r29
    278a:	cf 91       	pop	r28
    278c:	08 95       	ret

0000278e <__vector_20>:
/////////////////////////////////////ISR PRIVATE FUNCTIONS////////////////////////////////////////
//UART0
//-------------------
//ISR uart octet recu 
ISR(USART0_RX_vect)
{
    278e:	1f 92       	push	r1
    2790:	0f 92       	push	r0
    2792:	0f b6       	in	r0, 0x3f	; 63
    2794:	0f 92       	push	r0
    2796:	0b b6       	in	r0, 0x3b	; 59
    2798:	0f 92       	push	r0
    279a:	11 24       	eor	r1, r1
    279c:	2f 93       	push	r18
    279e:	3f 93       	push	r19
    27a0:	4f 93       	push	r20
    27a2:	5f 93       	push	r21
    27a4:	6f 93       	push	r22
    27a6:	7f 93       	push	r23
    27a8:	8f 93       	push	r24
    27aa:	9f 93       	push	r25
    27ac:	af 93       	push	r26
    27ae:	bf 93       	push	r27
    27b0:	ef 93       	push	r30
    27b2:	ff 93       	push	r31
	#ifdef CONF_UART_0_INDEX	
		Int8U rcv_byte = 0U;
		//on enregistre l'octet recu
		rcv_byte = UDR0;
    27b4:	20 91 c6 00 	lds	r18, 0x00C6
		//si on a deja recu le start frame
		if( start_frame_uart_0 == FALSE )
    27b8:	80 91 e6 01 	lds	r24, 0x01E6
    27bc:	88 23       	and	r24, r24
    27be:	59 f4       	brne	.+22     	; 0x27d6 <__vector_20+0x48>
        {
			//si c'est un debut de trame
			if(rcv_byte == '*' )
    27c0:	2a 32       	cpi	r18, 0x2A	; 42
    27c2:	d9 f5       	brne	.+118    	; 0x283a <__vector_20+0xac>
			{
				buff_uart_0[ 0U ] = '*';
    27c4:	8a e2       	ldi	r24, 0x2A	; 42
    27c6:	80 93 b8 03 	sts	0x03B8, r24
				ptr_buff_uart_0 = 1U;
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	80 93 e5 01 	sts	0x01E5, r24
				//on a recu le start frame
				start_frame_uart_0 = TRUE;
    27d0:	80 93 e6 01 	sts	0x01E6, r24
    27d4:	32 c0       	rjmp	.+100    	; 0x283a <__vector_20+0xac>
			}
		}
		else
		{
			//on charge le message dans le buff_uart_0er
			buff_uart_0[ptr_buff_uart_0] = rcv_byte;
    27d6:	50 91 e5 01 	lds	r21, 0x01E5
    27da:	88 eb       	ldi	r24, 0xB8	; 184
    27dc:	93 e0       	ldi	r25, 0x03	; 3
    27de:	fc 01       	movw	r30, r24
    27e0:	e5 0f       	add	r30, r21
    27e2:	f1 1d       	adc	r31, r1
    27e4:	20 83       	st	Z, r18
			ptr_buff_uart_0++;	
    27e6:	45 2f       	mov	r20, r21
    27e8:	4f 5f       	subi	r20, 0xFF	; 255
    27ea:	40 93 e5 01 	sts	0x01E5, r20
			if(( buff_uart_0[ptr_buff_uart_0 - 1U] == '#' ) && ( buff_uart_0[ptr_buff_uart_0 - 2U] == '#' ))
    27ee:	24 2f       	mov	r18, r20
    27f0:	30 e0       	ldi	r19, 0x00	; 0
    27f2:	82 0f       	add	r24, r18
    27f4:	93 1f       	adc	r25, r19
    27f6:	fc 01       	movw	r30, r24
    27f8:	31 97       	sbiw	r30, 0x01	; 1
    27fa:	80 81       	ld	r24, Z
    27fc:	83 32       	cpi	r24, 0x23	; 35
    27fe:	e9 f4       	brne	.+58     	; 0x283a <__vector_20+0xac>
    2800:	2a 54       	subi	r18, 0x4A	; 74
    2802:	3c 4f       	sbci	r19, 0xFC	; 252
    2804:	f9 01       	movw	r30, r18
    2806:	80 81       	ld	r24, Z
    2808:	83 32       	cpi	r24, 0x23	; 35
    280a:	b9 f4       	brne	.+46     	; 0x283a <__vector_20+0xac>
			{
				//on charge le message
				for ( Int8U loop_send = 0U ; loop_send < ptr_buff_uart_0 ; loop_send++)
    280c:	44 23       	and	r20, r20
    280e:	69 f0       	breq	.+26     	; 0x282a <__vector_20+0x9c>
    2810:	e8 eb       	ldi	r30, 0xB8	; 184
    2812:	f3 e0       	ldi	r31, 0x03	; 3
    2814:	a4 e5       	ldi	r26, 0x54	; 84
    2816:	b3 e0       	ldi	r27, 0x03	; 3

/////////////////////////////////////ISR PRIVATE FUNCTIONS////////////////////////////////////////
//UART0
//-------------------
//ISR uart octet recu 
ISR(USART0_RX_vect)
    2818:	cf 01       	movw	r24, r30
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	85 0f       	add	r24, r21
    281e:	91 1d       	adc	r25, r1
			if(( buff_uart_0[ptr_buff_uart_0 - 1U] == '#' ) && ( buff_uart_0[ptr_buff_uart_0 - 2U] == '#' ))
			{
				//on charge le message
				for ( Int8U loop_send = 0U ; loop_send < ptr_buff_uart_0 ; loop_send++)
				{
					in_message_0[ loop_send ] = buff_uart_0[ loop_send ];
    2820:	21 91       	ld	r18, Z+
    2822:	2d 93       	st	X+, r18
			buff_uart_0[ptr_buff_uart_0] = rcv_byte;
			ptr_buff_uart_0++;	
			if(( buff_uart_0[ptr_buff_uart_0 - 1U] == '#' ) && ( buff_uart_0[ptr_buff_uart_0 - 2U] == '#' ))
			{
				//on charge le message
				for ( Int8U loop_send = 0U ; loop_send < ptr_buff_uart_0 ; loop_send++)
    2824:	e8 17       	cp	r30, r24
    2826:	f9 07       	cpc	r31, r25
    2828:	d9 f7       	brne	.-10     	; 0x2820 <__vector_20+0x92>
				{
					in_message_0[ loop_send ] = buff_uart_0[ loop_send ];
				} 
				//on stock la taille
				in_message_len_0 = ptr_buff_uart_0;
    282a:	40 93 e4 01 	sts	0x01E4, r20
				//on attend le start frame
				start_frame_uart_0 = FALSE;				
    282e:	10 92 e6 01 	sts	0x01E6, r1
				//on lance l'event
				DrvEventAddEvent( CONF_EVENT_HEAD_MSG_RCV );
    2832:	86 e0       	ldi	r24, 0x06	; 6
    2834:	90 e0       	ldi	r25, 0x00	; 0
    2836:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DrvEventAddEvent>
			}			
		}		
	#endif
}
    283a:	ff 91       	pop	r31
    283c:	ef 91       	pop	r30
    283e:	bf 91       	pop	r27
    2840:	af 91       	pop	r26
    2842:	9f 91       	pop	r25
    2844:	8f 91       	pop	r24
    2846:	7f 91       	pop	r23
    2848:	6f 91       	pop	r22
    284a:	5f 91       	pop	r21
    284c:	4f 91       	pop	r20
    284e:	3f 91       	pop	r19
    2850:	2f 91       	pop	r18
    2852:	0f 90       	pop	r0
    2854:	0b be       	out	0x3b, r0	; 59
    2856:	0f 90       	pop	r0
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	0f 90       	pop	r0
    285c:	1f 90       	pop	r1
    285e:	18 95       	reti

00002860 <__vector_28>:

//UART1
//-------------------
//ISR uart octet recu 
ISR(USART1_RX_vect)
{
    2860:	1f 92       	push	r1
    2862:	0f 92       	push	r0
    2864:	0f b6       	in	r0, 0x3f	; 63
    2866:	0f 92       	push	r0
    2868:	0b b6       	in	r0, 0x3b	; 59
    286a:	0f 92       	push	r0
    286c:	11 24       	eor	r1, r1
    286e:	2f 93       	push	r18
    2870:	3f 93       	push	r19
    2872:	4f 93       	push	r20
    2874:	5f 93       	push	r21
    2876:	6f 93       	push	r22
    2878:	7f 93       	push	r23
    287a:	8f 93       	push	r24
    287c:	9f 93       	push	r25
    287e:	af 93       	push	r26
    2880:	bf 93       	push	r27
    2882:	ef 93       	push	r30
    2884:	ff 93       	push	r31
	#ifdef CONF_UART_1_INDEX		
		Int8U rcv_byte = 0U;
		//on enregistre l'octet recu
		rcv_byte = UDR1;
    2886:	20 91 ce 00 	lds	r18, 0x00CE
		//si on a deja recu le start frame
		if( start_frame_uart_1 == FALSE )
    288a:	80 91 e9 01 	lds	r24, 0x01E9
    288e:	88 23       	and	r24, r24
    2890:	59 f4       	brne	.+22     	; 0x28a8 <__vector_28+0x48>
        {
			//si c'est un debut de trame
			if(rcv_byte == '*' )
    2892:	2a 32       	cpi	r18, 0x2A	; 42
    2894:	d9 f5       	brne	.+118    	; 0x290c <__vector_28+0xac>
			{
				buff_uart_1[ 0U ] = '*';
    2896:	8a e2       	ldi	r24, 0x2A	; 42
    2898:	80 93 8c 02 	sts	0x028C, r24
				ptr_buff_uart_1 = 1U;
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	80 93 e8 01 	sts	0x01E8, r24
				//on a recu le start frame
				start_frame_uart_1 = TRUE;
    28a2:	80 93 e9 01 	sts	0x01E9, r24
    28a6:	32 c0       	rjmp	.+100    	; 0x290c <__vector_28+0xac>
			}
		}
		else
		{
			//on charge le message dans le buff_uart_0er
			buff_uart_1[ptr_buff_uart_1] = rcv_byte;
    28a8:	50 91 e8 01 	lds	r21, 0x01E8
    28ac:	8c e8       	ldi	r24, 0x8C	; 140
    28ae:	92 e0       	ldi	r25, 0x02	; 2
    28b0:	fc 01       	movw	r30, r24
    28b2:	e5 0f       	add	r30, r21
    28b4:	f1 1d       	adc	r31, r1
    28b6:	20 83       	st	Z, r18
			ptr_buff_uart_1++;	
    28b8:	45 2f       	mov	r20, r21
    28ba:	4f 5f       	subi	r20, 0xFF	; 255
    28bc:	40 93 e8 01 	sts	0x01E8, r20
			if(( buff_uart_1[ptr_buff_uart_1 - 1U] == '#' ) && ( buff_uart_1[ptr_buff_uart_1 - 2U] == '#' ))
    28c0:	24 2f       	mov	r18, r20
    28c2:	30 e0       	ldi	r19, 0x00	; 0
    28c4:	82 0f       	add	r24, r18
    28c6:	93 1f       	adc	r25, r19
    28c8:	fc 01       	movw	r30, r24
    28ca:	31 97       	sbiw	r30, 0x01	; 1
    28cc:	80 81       	ld	r24, Z
    28ce:	83 32       	cpi	r24, 0x23	; 35
    28d0:	e9 f4       	brne	.+58     	; 0x290c <__vector_28+0xac>
    28d2:	26 57       	subi	r18, 0x76	; 118
    28d4:	3d 4f       	sbci	r19, 0xFD	; 253
    28d6:	f9 01       	movw	r30, r18
    28d8:	80 81       	ld	r24, Z
    28da:	83 32       	cpi	r24, 0x23	; 35
    28dc:	b9 f4       	brne	.+46     	; 0x290c <__vector_28+0xac>
			{
				//on charge le message
				for ( Int8U loop_send = 0U ; loop_send < ptr_buff_uart_1 ; loop_send++)
    28de:	44 23       	and	r20, r20
    28e0:	69 f0       	breq	.+26     	; 0x28fc <__vector_28+0x9c>
    28e2:	ec e8       	ldi	r30, 0x8C	; 140
    28e4:	f2 e0       	ldi	r31, 0x02	; 2
    28e6:	a0 ef       	ldi	r26, 0xF0	; 240
    28e8:	b2 e0       	ldi	r27, 0x02	; 2
}

//UART1
//-------------------
//ISR uart octet recu 
ISR(USART1_RX_vect)
    28ea:	cf 01       	movw	r24, r30
    28ec:	01 96       	adiw	r24, 0x01	; 1
    28ee:	85 0f       	add	r24, r21
    28f0:	91 1d       	adc	r25, r1
			if(( buff_uart_1[ptr_buff_uart_1 - 1U] == '#' ) && ( buff_uart_1[ptr_buff_uart_1 - 2U] == '#' ))
			{
				//on charge le message
				for ( Int8U loop_send = 0U ; loop_send < ptr_buff_uart_1 ; loop_send++)
				{
					in_message_1[ loop_send ] = buff_uart_1[ loop_send ];
    28f2:	21 91       	ld	r18, Z+
    28f4:	2d 93       	st	X+, r18
			buff_uart_1[ptr_buff_uart_1] = rcv_byte;
			ptr_buff_uart_1++;	
			if(( buff_uart_1[ptr_buff_uart_1 - 1U] == '#' ) && ( buff_uart_1[ptr_buff_uart_1 - 2U] == '#' ))
			{
				//on charge le message
				for ( Int8U loop_send = 0U ; loop_send < ptr_buff_uart_1 ; loop_send++)
    28f6:	e8 17       	cp	r30, r24
    28f8:	f9 07       	cpc	r31, r25
    28fa:	d9 f7       	brne	.-10     	; 0x28f2 <__vector_28+0x92>
				{
					in_message_1[ loop_send ] = buff_uart_1[ loop_send ];
				} 
				//on stock la taille
				in_message_len_1 = ptr_buff_uart_1;
    28fc:	40 93 e7 01 	sts	0x01E7, r20
				//on attend le start frame
				start_frame_uart_1 = FALSE;				
    2900:	10 92 e9 01 	sts	0x01E9, r1
				//on lance l'event
				DrvEventAddEvent( CONF_EVENT_DIGI_MSG_RCV );
    2904:	85 e0       	ldi	r24, 0x05	; 5
    2906:	90 e0       	ldi	r25, 0x00	; 0
    2908:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <DrvEventAddEvent>
			}			
		}		
	#endif
}
    290c:	ff 91       	pop	r31
    290e:	ef 91       	pop	r30
    2910:	bf 91       	pop	r27
    2912:	af 91       	pop	r26
    2914:	9f 91       	pop	r25
    2916:	8f 91       	pop	r24
    2918:	7f 91       	pop	r23
    291a:	6f 91       	pop	r22
    291c:	5f 91       	pop	r21
    291e:	4f 91       	pop	r20
    2920:	3f 91       	pop	r19
    2922:	2f 91       	pop	r18
    2924:	0f 90       	pop	r0
    2926:	0b be       	out	0x3b, r0	; 59
    2928:	0f 90       	pop	r0
    292a:	0f be       	out	0x3f, r0	; 63
    292c:	0f 90       	pop	r0
    292e:	1f 90       	pop	r1
    2930:	18 95       	reti

00002932 <main>:
static Boolean MainInitSystemDrivers(void)
{
	Boolean o_success = TRUE;
	
	//init des drivers
 	DrvTimer();
    2932:	0e 94 bf 12 	call	0x257e	; 0x257e <DrvTimer>
	DrvEvent();
    2936:	0e 94 cb 0a 	call	0x1596	; 0x1596 <DrvEvent>
	DrvLed();
    293a:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <DrvLed>
	DrvUart();
    293e:	0e 94 30 13 	call	0x2660	; 0x2660 <DrvUart>
	DrvServo();
    2942:	0e 94 43 0c 	call	0x1886	; 0x1886 <DrvServo>
static Boolean MainInitSystemControl( void ) 
{
	Boolean o_success = TRUE;
	
	//init des controls
	CtrlUartProtocole();
    2946:	0e 94 9f 09 	call	0x133e	; 0x133e <CtrlUartProtocole>
	CtrlTete();
    294a:	0e 94 40 09 	call	0x1280	; 0x1280 <CtrlTete>
	CtrlMarche();
    294e:	0e 94 a5 00 	call	0x14a	; 0x14a <CtrlMarche>
	
	//on lance nos controles
	MainInitSystemControl();
	
	//lance les its
	DrvInterruptSetAllInterrupts();
    2952:	0e 94 0b 0b 	call	0x1616	; 0x1616 <DrvInterruptSetAllInterrupts>
	
	//on boucle à l'infini
    while( TRUE )
    {
		//on prend les events 
		main_event_flags = DrvEventGetEvent();
    2956:	0e 94 df 0a 	call	0x15be	; 0x15be <DrvEventGetEvent>
    295a:	90 93 eb 01 	sts	0x01EB, r25
    295e:	80 93 ea 01 	sts	0x01EA, r24

//excecution du dispatcher d'evenement
static void MainSystemControlDispatcher( void )
{
	//get next event
	if( main_event_flags > 0 )
    2962:	80 91 ea 01 	lds	r24, 0x01EA
    2966:	90 91 eb 01 	lds	r25, 0x01EB
    296a:	00 97       	sbiw	r24, 0x00	; 0
    296c:	f1 f0       	breq	.+60     	; 0x29aa <main+0x78>
	{
		//on dispatch l'event sur les different services
		CtrlUartProtocoleDispatcher( main_event_flags );
    296e:	80 91 ea 01 	lds	r24, 0x01EA
    2972:	90 91 eb 01 	lds	r25, 0x01EB
    2976:	0e 94 a0 09 	call	0x1340	; 0x1340 <CtrlUartProtocoleDispatcher>
		CtrlMarcheDispatcher( main_event_flags );
    297a:	80 91 ea 01 	lds	r24, 0x01EA
    297e:	90 91 eb 01 	lds	r25, 0x01EB
    2982:	0e 94 ae 00 	call	0x15c	; 0x15c <CtrlMarcheDispatcher>
		CtrlTeteDispatcher( main_event_flags );
    2986:	80 91 ea 01 	lds	r24, 0x01EA
    298a:	90 91 eb 01 	lds	r25, 0x01EB
    298e:	0e 94 59 09 	call	0x12b2	; 0x12b2 <CtrlTeteDispatcher>
}	

//excecution du heartbeat
static void MainSystemControlHearbeat( void )
{
	if ( DrvEventTestEvent(main_event_flags, CONF_EVENT_TIMER_1S ))
    2992:	80 91 ea 01 	lds	r24, 0x01EA
    2996:	90 91 eb 01 	lds	r25, 0x01EB
    299a:	62 e0       	ldi	r22, 0x02	; 2
    299c:	0e 94 e4 0a 	call	0x15c8	; 0x15c8 <DrvEventTestEvent>
    29a0:	88 23       	and	r24, r24
    29a2:	19 f0       	breq	.+6      	; 0x29aa <main+0x78>
	{
		DrvLedToggle ( CONF_LED_HEARTBEAT );
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	0e 94 13 0c 	call	0x1826	; 0x1826 <DrvLedToggle>
		
		//on fait vivre le robot
		//RobotLife( main_event_flags );
		
		//on kill les events
		DrvEventKillEvent( main_event_flags );	
    29aa:	80 91 ea 01 	lds	r24, 0x01EA
    29ae:	90 91 eb 01 	lds	r25, 0x01EB
    29b2:	0e 94 d0 0a 	call	0x15a0	; 0x15a0 <DrvEventKillEvent>
		
		//on toggle la led activity
		//elle permet de controler que l'on passe souvent dans la boucle infini du main
		DrvLedToggle ( CONF_LED_ACTIVITY );
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	0e 94 13 0c 	call	0x1826	; 0x1826 <DrvLedToggle>
    }
    29bc:	cc cf       	rjmp	.-104    	; 0x2956 <main+0x24>

000029be <micAdcSetReferenceSelectionBits>:

//Set the REFS1:0: Reference Selection Bits
Boolean micAdcSetReferenceSelectionBits( EAdcReferenceSelectionBits mode ) 
{
	Boolean o_success = TRUE;
	ADMUX = ( ADMUX & ~( ( 1U << REFS1 ) | ( 1U << REFS0 ) ) ) |\
    29be:	ec e7       	ldi	r30, 0x7C	; 124
    29c0:	f0 e0       	ldi	r31, 0x00	; 0
    29c2:	90 81       	ld	r25, Z
    29c4:	80 7c       	andi	r24, 0xC0	; 192
    29c6:	9f 73       	andi	r25, 0x3F	; 63
    29c8:	98 2b       	or	r25, r24
    29ca:	90 83       	st	Z, r25
             ( mode   &  ( ( 1U << REFS1 ) | ( 1U << REFS0 ) ) );
	return o_success;
}
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	08 95       	ret

000029d0 <micAdcSetLeftAdjustResult>:

//Set the ADLAR: ADC Left Adjust Result
Boolean micAdcSetLeftAdjustResult( void ) 
{
	Boolean o_success = TRUE;
	BIT_SET(ADMUX,ADLAR,TRUE);
    29d0:	ec e7       	ldi	r30, 0x7C	; 124
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	80 81       	ld	r24, Z
    29d6:	80 62       	ori	r24, 0x20	; 32
    29d8:	80 83       	st	Z, r24
	return o_success;
}
    29da:	81 e0       	ldi	r24, 0x01	; 1
    29dc:	08 95       	ret

000029de <micAdcGetLeftAdjustResult>:

//Get the ADLAR: ADC Left Adjust Result
Boolean micAdcGetLeftAdjustResult( void ) 
{
	return (Boolean)(ADMUX & ( 1 << ADLAR) >> ADLAR);
    29de:	80 91 7c 00 	lds	r24, 0x007C
}
    29e2:	81 70       	andi	r24, 0x01	; 1
    29e4:	08 95       	ret

000029e6 <micAdcClearLeftAdjustResult>:

//Clear the ADLAR: ADC Left Adjust Result
Boolean micAdcClearLeftAdjustResult( void ) 
{
	Boolean o_success = TRUE;
	BIT_SET(ADMUX,ADLAR,FALSE);
    29e6:	ec e7       	ldi	r30, 0x7C	; 124
    29e8:	f0 e0       	ldi	r31, 0x00	; 0
    29ea:	80 81       	ld	r24, Z
    29ec:	8f 7d       	andi	r24, 0xDF	; 223
    29ee:	80 83       	st	Z, r24
	return o_success;
}
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	08 95       	ret

000029f4 <micAdcSetAnalogChannelandGainSelectionBits>:

//Set the MUX4:0: Analog Channel and Gain Selection Bits
Boolean micAdcSetAnalogChannelandGainSelectionBits( EAdcChannelSelection adc_channel ) 
{
	Boolean o_success = TRUE;
	ADMUX = (ADMUX & ~( (1U << MUX4) | (1U << MUX3) | (1U << MUX2) | (1U << MUX1) | (1U << MUX0) )) |
    29f4:	ec e7       	ldi	r30, 0x7C	; 124
    29f6:	f0 e0       	ldi	r31, 0x00	; 0
    29f8:	90 81       	ld	r25, Z
    29fa:	8f 71       	andi	r24, 0x1F	; 31
    29fc:	90 7e       	andi	r25, 0xE0	; 224
    29fe:	98 2b       	or	r25, r24
    2a00:	90 83       	st	Z, r25
	         (adc_channel & ( (1U << MUX4) | (1U << MUX3) | (1U << MUX2) | (1U << MUX1) | (1U << MUX0) ) );
	return o_success;
}
    2a02:	81 e0       	ldi	r24, 0x01	; 1
    2a04:	08 95       	ret

00002a06 <micAdcGetAnalogChannelandGainSelectionBits>:

//Get the MUX4:0: Analog Channel and Gain Selection Bits
EAdcChannelSelection micAdcGetAnalogChannelandGainSelectionBits( void ) 
{
	return (EAdcChannelSelection)( ADMUX & ( (1U << MUX4) | (1U << MUX3) | (1U << MUX2) | (1U << MUX1) | (1U << MUX0) ) );
    2a06:	80 91 7c 00 	lds	r24, 0x007C
}
    2a0a:	8f 71       	andi	r24, 0x1F	; 31
    2a0c:	08 95       	ret

00002a0e <micAdcSetAdcEnable>:

//Set the ADEN: ADC Enable
Boolean micAdcSetAdcEnable( void ) 
{
	Boolean o_success = TRUE;
	BIT_SET(ADCSRA,ADEN,TRUE);
    2a0e:	ea e7       	ldi	r30, 0x7A	; 122
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	80 68       	ori	r24, 0x80	; 128
    2a16:	80 83       	st	Z, r24
	return o_success;
}
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	08 95       	ret

00002a1c <micAdcSetAdcDisable>:

//Set the ADEN: ADC Disable
Boolean micAdcSetAdcDisable( void ) 
{
	Boolean o_success = TRUE;
	BIT_SET(ADCSRA,ADEN,FALSE);
    2a1c:	ea e7       	ldi	r30, 0x7A	; 122
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	8f 77       	andi	r24, 0x7F	; 127
    2a24:	80 83       	st	Z, r24
	return o_success;
}
    2a26:	81 e0       	ldi	r24, 0x01	; 1
    2a28:	08 95       	ret

00002a2a <micAdcSetStartConversion>:

//Set the ADSC: ADC Start Conversion
Boolean micAdcSetStartConversion( void ) 
{
	Boolean o_success = TRUE;
	BIT_SET(ADCSRA,ADSC,TRUE);
    2a2a:	ea e7       	ldi	r30, 0x7A	; 122
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
    2a30:	80 64       	ori	r24, 0x40	; 64
    2a32:	80 83       	st	Z, r24
	return o_success;
}
    2a34:	81 e0       	ldi	r24, 0x01	; 1
    2a36:	08 95       	ret

00002a38 <micAdcSetAutoTriggerEnable>:

//Set the ADATE: ADC Auto Trigger Enable
Boolean micAdcSetAutoTriggerEnable( void ) 
{
	Boolean o_success = TRUE;
	BIT_SET(ADCSRA,ADATE,TRUE);
    2a38:	ea e7       	ldi	r30, 0x7A	; 122
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	80 62       	ori	r24, 0x20	; 32
    2a40:	80 83       	st	Z, r24
	return o_success;
}
    2a42:	81 e0       	ldi	r24, 0x01	; 1
    2a44:	08 95       	ret

00002a46 <micAdcSetAutoTriggerDisable>:

//Set the ADATE: ADC Auto Trigger Disable
Boolean micAdcSetAutoTriggerDisable( void ) 
{
	Boolean o_success = TRUE;
	BIT_SET(ADCSRA,ADATE,FALSE);
    2a46:	ea e7       	ldi	r30, 0x7A	; 122
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	8f 7d       	andi	r24, 0xDF	; 223
    2a4e:	80 83       	st	Z, r24
	return o_success;
}
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	08 95       	ret

00002a54 <micAdcClearConversionCompletedFlag>:
//Clear the ADIF: ADC Interrupt Flag
Boolean micAdcClearConversionCompletedFlag(void) 
{
	Boolean o_success = TRUE;
	// To avoid to restart a conversion when clearing ADIF
	ADCSRA = ( ADCSRA & ~( 1U << ADSC ) ) | ( 1U<< ADIF );
    2a54:	ea e7       	ldi	r30, 0x7A	; 122
    2a56:	f0 e0       	ldi	r31, 0x00	; 0
    2a58:	80 81       	ld	r24, Z
    2a5a:	8f 7a       	andi	r24, 0xAF	; 175
    2a5c:	80 61       	ori	r24, 0x10	; 16
    2a5e:	80 83       	st	Z, r24
	return o_success;
}
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	08 95       	ret

00002a64 <micAdcSetInterrupt>:

//Set the ADIE: ADC Interrupt Enable
Boolean micAdcSetInterrupt(void)
{
	Boolean o_success = TRUE;
	BIT_SET(ADCSRA,ADIE,TRUE);
    2a64:	ea e7       	ldi	r30, 0x7A	; 122
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 60       	ori	r24, 0x08	; 8
    2a6c:	80 83       	st	Z, r24
	return o_success;
}
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	08 95       	ret

00002a72 <micAdcClearInterrupt>:

//Set the ADIE: ADC Interrupt Disable
Boolean micAdcClearInterrupt(void)
{
	Boolean o_success = TRUE;
	BIT_SET(ADCSRA,ADIE,FALSE);
    2a72:	ea e7       	ldi	r30, 0x7A	; 122
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	87 7f       	andi	r24, 0xF7	; 247
    2a7a:	80 83       	st	Z, r24
	return o_success;
}
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	08 95       	ret

00002a80 <micAdcSetPrescalerSelectBits>:

//Set the ADPS2:0: ADC Prescaler Select Bits
Boolean micAdcSetPrescalerSelectBits( EAdcClock adc_clock )
{
	Boolean o_success = TRUE;
	ADCSRA = (ADCSRA & ~((1U << ADPS2) | (1U << ADPS1) | (1U << ADPS0))) |\
    2a80:	ea e7       	ldi	r30, 0x7A	; 122
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	90 81       	ld	r25, Z
    2a86:	87 70       	andi	r24, 0x07	; 7
    2a88:	98 7f       	andi	r25, 0xF8	; 248
    2a8a:	98 2b       	or	r25, r24
    2a8c:	90 83       	st	Z, r25
			 (adc_clock & ((1U << ADPS2) | (1U << ADPS1) | (1U << ADPS0)));
	return o_success;
}
    2a8e:	81 e0       	ldi	r24, 0x01	; 1
    2a90:	08 95       	ret

00002a92 <micAdcSetAutoTriggerSource>:

//Set the ADTS2:0: ADC Auto Trigger Source
Boolean micAdcSetAutoTriggerSource( EAdcTrigger adc_trigger_source )
{
	Boolean o_success = TRUE;
    ADCSRB = (ADCSRB &  ~((1U << ADTS2) | (1U << ADTS1) | (1U << ADTS0))) |\
    2a92:	eb e7       	ldi	r30, 0x7B	; 123
    2a94:	f0 e0       	ldi	r31, 0x00	; 0
    2a96:	90 81       	ld	r25, Z
    2a98:	87 70       	andi	r24, 0x07	; 7
    2a9a:	98 7f       	andi	r25, 0xF8	; 248
    2a9c:	98 2b       	or	r25, r24
    2a9e:	90 83       	st	Z, r25
             (adc_trigger_source &  ((1U << ADTS2) | (1U << ADTS1) | (1U << ADTS0)));
	return o_success;
}
    2aa0:	81 e0       	ldi	r24, 0x01	; 1
    2aa2:	08 95       	ret

00002aa4 <micAdcReadData8>:

//Get the ADC Conversion Result
Int8U micAdcReadData8( void )
{
	if(micAdcGetLeftAdjustResult() == TRUE)
    2aa4:	0e 94 ef 14 	call	0x29de	; 0x29de <micAdcGetLeftAdjustResult>
    2aa8:	81 30       	cpi	r24, 0x01	; 1
    2aaa:	19 f4       	brne	.+6      	; 0x2ab2 <micAdcReadData8+0xe>
	{	
		return ADCH;	
    2aac:	80 91 79 00 	lds	r24, 0x0079
    2ab0:	08 95       	ret
	}
	else
	{
		return ADCL;	
    2ab2:	80 91 78 00 	lds	r24, 0x0078
	}
}
    2ab6:	08 95       	ret

00002ab8 <micAdcReadData16>:

//Get the ADC Conversion Result
Int16U micAdcReadData16( void )
{
	return ADC;	
    2ab8:	20 91 78 00 	lds	r18, 0x0078
    2abc:	30 91 79 00 	lds	r19, 0x0079
}
    2ac0:	82 2f       	mov	r24, r18
    2ac2:	93 2f       	mov	r25, r19
    2ac4:	08 95       	ret

00002ac6 <micInterruptMasterControlUnitInterruptVectorSelect>:

//set the IVSEL: Interrupt Vector Select
Boolean micInterruptMasterControlUnitInterruptVectorSelect( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(MCUCR,IVSEL,enable);
    2ac6:	88 23       	and	r24, r24
    2ac8:	21 f0       	breq	.+8      	; 0x2ad2 <micInterruptMasterControlUnitInterruptVectorSelect+0xc>
    2aca:	85 b7       	in	r24, 0x35	; 53
    2acc:	82 60       	ori	r24, 0x02	; 2
    2ace:	85 bf       	out	0x35, r24	; 53
    2ad0:	03 c0       	rjmp	.+6      	; 0x2ad8 <micInterruptMasterControlUnitInterruptVectorSelect+0x12>
    2ad2:	85 b7       	in	r24, 0x35	; 53
    2ad4:	8d 7f       	andi	r24, 0xFD	; 253
    2ad6:	85 bf       	out	0x35, r24	; 53
	return o_success;
}
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	08 95       	ret

00002adc <micInterruptMasterControlUnitInterruptVectorChangeEnable>:

//set the IVCE: Interrupt Vector Change Enable
Boolean micInterruptMasterControlUnitInterruptVectorChangeEnable( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(MCUCR,IVCE,enable);
    2adc:	88 23       	and	r24, r24
    2ade:	21 f0       	breq	.+8      	; 0x2ae8 <micInterruptMasterControlUnitInterruptVectorChangeEnable+0xc>
    2ae0:	85 b7       	in	r24, 0x35	; 53
    2ae2:	81 60       	ori	r24, 0x01	; 1
    2ae4:	85 bf       	out	0x35, r24	; 53
    2ae6:	03 c0       	rjmp	.+6      	; 0x2aee <micInterruptMasterControlUnitInterruptVectorChangeEnable+0x12>
    2ae8:	85 b7       	in	r24, 0x35	; 53
    2aea:	8e 7f       	andi	r24, 0xFE	; 254
    2aec:	85 bf       	out	0x35, r24	; 53
	return o_success;
}
    2aee:	81 e0       	ldi	r24, 0x01	; 1
    2af0:	08 95       	ret

00002af2 <micInterruptSenseControlBits0>:

//set the ISC21, ISC20  ISC00, ISC00: External Interrupt 2 - 0 Sense Control Bits
Boolean micInterruptSenseControlBits0( EInterruptTrigger_0  trigger ) 
{
	Boolean o_success = TRUE;
	EICRA |= trigger;
    2af2:	e9 e6       	ldi	r30, 0x69	; 105
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	90 81       	ld	r25, Z
    2af8:	89 2b       	or	r24, r25
    2afa:	80 83       	st	Z, r24
	return o_success;
}
    2afc:	81 e0       	ldi	r24, 0x01	; 1
    2afe:	08 95       	ret

00002b00 <micInterruptSenseControlBits1>:

//set the ISC21, ISC20  ISC00, ISC00: External Interrupt 2 - 0 Sense Control Bits
Boolean micInterruptSenseControlBits1( EInterruptTrigger_1  trigger ) 
{
	Boolean o_success = TRUE;
	EICRA |= trigger;
    2b00:	e9 e6       	ldi	r30, 0x69	; 105
    2b02:	f0 e0       	ldi	r31, 0x00	; 0
    2b04:	90 81       	ld	r25, Z
    2b06:	89 2b       	or	r24, r25
    2b08:	80 83       	st	Z, r24
	return o_success;
}
    2b0a:	81 e0       	ldi	r24, 0x01	; 1
    2b0c:	08 95       	ret

00002b0e <micInterruptSenseControlBits2>:

//set the ISC21, ISC20  ISC00, ISC00: External Interrupt 2 - 0 Sense Control Bits
Boolean micInterruptSenseControlBits2( EInterruptTrigger_2  trigger ) 
{
	Boolean o_success = TRUE;
	EICRA |= trigger;
    2b0e:	e9 e6       	ldi	r30, 0x69	; 105
    2b10:	f0 e0       	ldi	r31, 0x00	; 0
    2b12:	90 81       	ld	r25, Z
    2b14:	89 2b       	or	r24, r25
    2b16:	80 83       	st	Z, r24
	return o_success;
}
    2b18:	81 e0       	ldi	r24, 0x01	; 1
    2b1a:	08 95       	ret

00002b1c <micInterruptExternalInterruptRequestEnable0>:

//set the INT2:0: External Interrupt Request 2 - 0 Enable
Boolean micInterruptExternalInterruptRequestEnable0( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(EIMSK,INT0,enable);
    2b1c:	88 23       	and	r24, r24
    2b1e:	11 f0       	breq	.+4      	; 0x2b24 <micInterruptExternalInterruptRequestEnable0+0x8>
    2b20:	e8 9a       	sbi	0x1d, 0	; 29
    2b22:	01 c0       	rjmp	.+2      	; 0x2b26 <micInterruptExternalInterruptRequestEnable0+0xa>
    2b24:	e8 98       	cbi	0x1d, 0	; 29
	return o_success;
}
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	08 95       	ret

00002b2a <micInterruptExternalInterruptRequestEnable1>:

//set the INT2:0: External Interrupt Request 2 - 0 Enable
Boolean micInterruptExternalInterruptRequestEnable1( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(EIMSK,INT1,enable);
    2b2a:	88 23       	and	r24, r24
    2b2c:	11 f0       	breq	.+4      	; 0x2b32 <micInterruptExternalInterruptRequestEnable1+0x8>
    2b2e:	e9 9a       	sbi	0x1d, 1	; 29
    2b30:	01 c0       	rjmp	.+2      	; 0x2b34 <micInterruptExternalInterruptRequestEnable1+0xa>
    2b32:	e9 98       	cbi	0x1d, 1	; 29
	return o_success;
}
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	08 95       	ret

00002b38 <micInterruptExternalInterruptRequestEnable2>:

//set the INT2:0: External Interrupt Request 2 - 0 Enable
Boolean micInterruptExternalInterruptRequestEnable2( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(EIMSK,INT2,enable);
    2b38:	88 23       	and	r24, r24
    2b3a:	11 f0       	breq	.+4      	; 0x2b40 <micInterruptExternalInterruptRequestEnable2+0x8>
    2b3c:	ea 9a       	sbi	0x1d, 2	; 29
    2b3e:	01 c0       	rjmp	.+2      	; 0x2b42 <micInterruptExternalInterruptRequestEnable2+0xa>
    2b40:	ea 98       	cbi	0x1d, 2	; 29
	return o_success;
}
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	08 95       	ret

00002b46 <micInterruptExternalInterruptFlags0>:

//set the INTF2:0: External Interrupt Flags 2 - 0
Boolean micInterruptExternalInterruptFlags0( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(EIFR,INTF0,enable);
    2b46:	88 23       	and	r24, r24
    2b48:	11 f0       	breq	.+4      	; 0x2b4e <micInterruptExternalInterruptFlags0+0x8>
    2b4a:	e0 9a       	sbi	0x1c, 0	; 28
    2b4c:	01 c0       	rjmp	.+2      	; 0x2b50 <micInterruptExternalInterruptFlags0+0xa>
    2b4e:	e0 98       	cbi	0x1c, 0	; 28
	return o_success;
}
    2b50:	81 e0       	ldi	r24, 0x01	; 1
    2b52:	08 95       	ret

00002b54 <micInterruptExternalInterruptFlags1>:

//set the INTF2:0: External Interrupt Flags 2 - 0
Boolean micInterruptExternalInterruptFlags1( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(EIFR,INTF1,enable);
    2b54:	88 23       	and	r24, r24
    2b56:	11 f0       	breq	.+4      	; 0x2b5c <micInterruptExternalInterruptFlags1+0x8>
    2b58:	e1 9a       	sbi	0x1c, 1	; 28
    2b5a:	01 c0       	rjmp	.+2      	; 0x2b5e <micInterruptExternalInterruptFlags1+0xa>
    2b5c:	e1 98       	cbi	0x1c, 1	; 28
	return o_success;
}
    2b5e:	81 e0       	ldi	r24, 0x01	; 1
    2b60:	08 95       	ret

00002b62 <micInterruptExternalInterruptFlags2>:

//set the INTF2:0: External Interrupt Flags 2 - 0
Boolean micInterruptExternalInterruptFlags2( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(EIFR,INTF2,enable);
    2b62:	88 23       	and	r24, r24
    2b64:	11 f0       	breq	.+4      	; 0x2b6a <micInterruptExternalInterruptFlags2+0x8>
    2b66:	e2 9a       	sbi	0x1c, 2	; 28
    2b68:	01 c0       	rjmp	.+2      	; 0x2b6c <micInterruptExternalInterruptFlags2+0xa>
    2b6a:	e2 98       	cbi	0x1c, 2	; 28
	return o_success;
}
    2b6c:	81 e0       	ldi	r24, 0x01	; 1
    2b6e:	08 95       	ret

00002b70 <micInterruptPinChangeInterruptEnable0>:

//set the PCIE0: Pin Change Interrupt Enable 0
Boolean micInterruptPinChangeInterruptEnable0( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PCICR,PCIE0,enable);
    2b70:	88 23       	and	r24, r24
    2b72:	31 f0       	breq	.+12     	; 0x2b80 <micInterruptPinChangeInterruptEnable0+0x10>
    2b74:	e8 e6       	ldi	r30, 0x68	; 104
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	81 60       	ori	r24, 0x01	; 1
    2b7c:	80 83       	st	Z, r24
    2b7e:	05 c0       	rjmp	.+10     	; 0x2b8a <micInterruptPinChangeInterruptEnable0+0x1a>
    2b80:	e8 e6       	ldi	r30, 0x68	; 104
    2b82:	f0 e0       	ldi	r31, 0x00	; 0
    2b84:	80 81       	ld	r24, Z
    2b86:	8e 7f       	andi	r24, 0xFE	; 254
    2b88:	80 83       	st	Z, r24
	return o_success;
}
    2b8a:	81 e0       	ldi	r24, 0x01	; 1
    2b8c:	08 95       	ret

00002b8e <micInterruptPinChangeInterruptEnable1>:

//set the PCIE1: Pin Change Interrupt Enable 1
Boolean micInterruptPinChangeInterruptEnable1( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PCICR,PCIE1,enable);
    2b8e:	88 23       	and	r24, r24
    2b90:	31 f0       	breq	.+12     	; 0x2b9e <micInterruptPinChangeInterruptEnable1+0x10>
    2b92:	e8 e6       	ldi	r30, 0x68	; 104
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	82 60       	ori	r24, 0x02	; 2
    2b9a:	80 83       	st	Z, r24
    2b9c:	05 c0       	rjmp	.+10     	; 0x2ba8 <micInterruptPinChangeInterruptEnable1+0x1a>
    2b9e:	e8 e6       	ldi	r30, 0x68	; 104
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	80 81       	ld	r24, Z
    2ba4:	8d 7f       	andi	r24, 0xFD	; 253
    2ba6:	80 83       	st	Z, r24
	return o_success;
}
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	08 95       	ret

00002bac <micInterruptPinChangeInterruptEnable2>:

//set the PCIE2: Pin Change Interrupt Enable 2
Boolean micInterruptPinChangeInterruptEnable2( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PCICR,PCIE2,enable);
    2bac:	88 23       	and	r24, r24
    2bae:	31 f0       	breq	.+12     	; 0x2bbc <micInterruptPinChangeInterruptEnable2+0x10>
    2bb0:	e8 e6       	ldi	r30, 0x68	; 104
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	80 81       	ld	r24, Z
    2bb6:	84 60       	ori	r24, 0x04	; 4
    2bb8:	80 83       	st	Z, r24
    2bba:	05 c0       	rjmp	.+10     	; 0x2bc6 <micInterruptPinChangeInterruptEnable2+0x1a>
    2bbc:	e8 e6       	ldi	r30, 0x68	; 104
    2bbe:	f0 e0       	ldi	r31, 0x00	; 0
    2bc0:	80 81       	ld	r24, Z
    2bc2:	8b 7f       	andi	r24, 0xFB	; 251
    2bc4:	80 83       	st	Z, r24
	return o_success;
}
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	08 95       	ret

00002bca <micInterruptPinChangeInterruptEnable3>:

//set the PCIE2: Pin Change Interrupt Enable 3
Boolean micInterruptPinChangeInterruptEnable3( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PCICR,PCIE3,enable);
    2bca:	88 23       	and	r24, r24
    2bcc:	31 f0       	breq	.+12     	; 0x2bda <micInterruptPinChangeInterruptEnable3+0x10>
    2bce:	e8 e6       	ldi	r30, 0x68	; 104
    2bd0:	f0 e0       	ldi	r31, 0x00	; 0
    2bd2:	80 81       	ld	r24, Z
    2bd4:	88 60       	ori	r24, 0x08	; 8
    2bd6:	80 83       	st	Z, r24
    2bd8:	05 c0       	rjmp	.+10     	; 0x2be4 <micInterruptPinChangeInterruptEnable3+0x1a>
    2bda:	e8 e6       	ldi	r30, 0x68	; 104
    2bdc:	f0 e0       	ldi	r31, 0x00	; 0
    2bde:	80 81       	ld	r24, Z
    2be0:	87 7f       	andi	r24, 0xF7	; 247
    2be2:	80 83       	st	Z, r24
	return o_success;
}
    2be4:	81 e0       	ldi	r24, 0x01	; 1
    2be6:	08 95       	ret

00002be8 <micInterruptPinChangeInterruptFlag0>:

//set the PCIF0: Pin Change Interrupt Flag 0
Boolean micInterruptPinChangeInterruptFlag0( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PCIFR,PCIF0,enable);
    2be8:	88 23       	and	r24, r24
    2bea:	11 f0       	breq	.+4      	; 0x2bf0 <micInterruptPinChangeInterruptFlag0+0x8>
    2bec:	d8 9a       	sbi	0x1b, 0	; 27
    2bee:	01 c0       	rjmp	.+2      	; 0x2bf2 <micInterruptPinChangeInterruptFlag0+0xa>
    2bf0:	d8 98       	cbi	0x1b, 0	; 27
	return o_success;
}
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	08 95       	ret

00002bf6 <micInterruptPinChangeInterruptFlag1>:

//set the PCIF1: Pin Change Interrupt Flag 1
Boolean micInterruptPinChangeInterruptFlag1( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PCIFR,PCIF1,enable);
    2bf6:	88 23       	and	r24, r24
    2bf8:	11 f0       	breq	.+4      	; 0x2bfe <micInterruptPinChangeInterruptFlag1+0x8>
    2bfa:	d9 9a       	sbi	0x1b, 1	; 27
    2bfc:	01 c0       	rjmp	.+2      	; 0x2c00 <micInterruptPinChangeInterruptFlag1+0xa>
    2bfe:	d9 98       	cbi	0x1b, 1	; 27
	return o_success;
}
    2c00:	81 e0       	ldi	r24, 0x01	; 1
    2c02:	08 95       	ret

00002c04 <micInterruptPinChangeInterruptFlag2>:

//set the PCIF2: Pin Change Interrupt Flag 2
Boolean micInterruptPinChangeInterruptFlag2( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PCIFR,PCIF2,enable);
    2c04:	88 23       	and	r24, r24
    2c06:	11 f0       	breq	.+4      	; 0x2c0c <micInterruptPinChangeInterruptFlag2+0x8>
    2c08:	da 9a       	sbi	0x1b, 2	; 27
    2c0a:	01 c0       	rjmp	.+2      	; 0x2c0e <micInterruptPinChangeInterruptFlag2+0xa>
    2c0c:	da 98       	cbi	0x1b, 2	; 27
	return o_success;
}
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	08 95       	ret

00002c12 <micInterruptPinChangeInterruptFlag3>:

//set the PCIF3: Pin Change Interrupt Flag 3
Boolean micInterruptPinChangeInterruptFlag3( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PCIFR,PCIF3,enable);
    2c12:	88 23       	and	r24, r24
    2c14:	11 f0       	breq	.+4      	; 0x2c1a <micInterruptPinChangeInterruptFlag3+0x8>
    2c16:	db 9a       	sbi	0x1b, 3	; 27
    2c18:	01 c0       	rjmp	.+2      	; 0x2c1c <micInterruptPinChangeInterruptFlag3+0xa>
    2c1a:	db 98       	cbi	0x1b, 3	; 27
	return o_success;
}
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	08 95       	ret

00002c20 <micInterruptPinChangeEnableMask3>:

//set the PCINT31:24: Pin Change Enable Mask 31:24
Boolean micInterruptPinChangeEnableMask3( Int8U val ) 
{
	Boolean o_success = TRUE;
	PCMSK3 |= val;
    2c20:	e3 e7       	ldi	r30, 0x73	; 115
    2c22:	f0 e0       	ldi	r31, 0x00	; 0
    2c24:	90 81       	ld	r25, Z
    2c26:	89 2b       	or	r24, r25
    2c28:	80 83       	st	Z, r24
	return o_success;
}
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	08 95       	ret

00002c2e <micInterruptPinChangeEnableMask2>:

//set the PCINT23:16: Pin Change Enable Mask 23..16
Boolean micInterruptPinChangeEnableMask2( Int8U val ) 
{
	Boolean o_success = TRUE;
	PCMSK2 |= val;
    2c2e:	ed e6       	ldi	r30, 0x6D	; 109
    2c30:	f0 e0       	ldi	r31, 0x00	; 0
    2c32:	90 81       	ld	r25, Z
    2c34:	89 2b       	or	r24, r25
    2c36:	80 83       	st	Z, r24
	return o_success;
}
    2c38:	81 e0       	ldi	r24, 0x01	; 1
    2c3a:	08 95       	ret

00002c3c <micInterruptPinChangeEnableMask1>:

//set the PCINT15:8: Pin Change Enable Mask 15..8
Boolean micInterruptPinChangeEnableMask1( Int8U val ) 
{
	Boolean o_success = TRUE;
	PCMSK1 |= val;
    2c3c:	ec e6       	ldi	r30, 0x6C	; 108
    2c3e:	f0 e0       	ldi	r31, 0x00	; 0
    2c40:	90 81       	ld	r25, Z
    2c42:	89 2b       	or	r24, r25
    2c44:	80 83       	st	Z, r24
	return o_success;
}
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	08 95       	ret

00002c4a <micInterruptPinChangeEnableMask0>:

//set the PCINT7:0: Pin Change Enable Mask 7..0
Boolean micInterruptPinChangeEnableMask0( Int8U val ) 
{
	Boolean o_success = TRUE;
	PCMSK0 |= val;
    2c4a:	eb e6       	ldi	r30, 0x6B	; 107
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	90 81       	ld	r25, Z
    2c50:	89 2b       	or	r24, r25
    2c52:	80 83       	st	Z, r24
	return o_success;
    2c54:	81 e0       	ldi	r24, 0x01	; 1
    2c56:	08 95       	ret

00002c58 <micIoPortsConfigureToToggleLevel>:

//Toggle IO pin
Boolean micIoPortsConfigureToToggleLevel( EIoPin io_pin )
{
	Boolean o_success = TRUE;
	Int8U port = ( io_pin / 8 ) ;
    2c58:	98 2f       	mov	r25, r24
    2c5a:	96 95       	lsr	r25
    2c5c:	96 95       	lsr	r25
    2c5e:	96 95       	lsr	r25
	Int8U pin =  ( io_pin % 8 ) ;
    2c60:	87 70       	andi	r24, 0x07	; 7
	if( port == 0 )
    2c62:	99 23       	and	r25, r25
    2c64:	69 f4       	brne	.+26     	; 0x2c80 <micIoPortsConfigureToToggleLevel+0x28>
	{
		BIT_TOGGLE(PORTA,pin);
    2c66:	42 b1       	in	r20, 0x02	; 2
    2c68:	21 e0       	ldi	r18, 0x01	; 1
    2c6a:	30 e0       	ldi	r19, 0x00	; 0
    2c6c:	b9 01       	movw	r22, r18
    2c6e:	02 c0       	rjmp	.+4      	; 0x2c74 <micIoPortsConfigureToToggleLevel+0x1c>
    2c70:	66 0f       	add	r22, r22
    2c72:	77 1f       	adc	r23, r23
    2c74:	8a 95       	dec	r24
    2c76:	e2 f7       	brpl	.-8      	; 0x2c70 <micIoPortsConfigureToToggleLevel+0x18>
    2c78:	cb 01       	movw	r24, r22
    2c7a:	84 27       	eor	r24, r20
    2c7c:	82 b9       	out	0x02, r24	; 2
    2c7e:	2c c0       	rjmp	.+88     	; 0x2cd8 <micIoPortsConfigureToToggleLevel+0x80>
	}
	else if( port == 1 )
    2c80:	91 30       	cpi	r25, 0x01	; 1
    2c82:	69 f4       	brne	.+26     	; 0x2c9e <micIoPortsConfigureToToggleLevel+0x46>
	{
		BIT_TOGGLE(PORTB,pin);
    2c84:	45 b1       	in	r20, 0x05	; 5
    2c86:	21 e0       	ldi	r18, 0x01	; 1
    2c88:	30 e0       	ldi	r19, 0x00	; 0
    2c8a:	b9 01       	movw	r22, r18
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <micIoPortsConfigureToToggleLevel+0x3a>
    2c8e:	66 0f       	add	r22, r22
    2c90:	77 1f       	adc	r23, r23
    2c92:	8a 95       	dec	r24
    2c94:	e2 f7       	brpl	.-8      	; 0x2c8e <micIoPortsConfigureToToggleLevel+0x36>
    2c96:	cb 01       	movw	r24, r22
    2c98:	84 27       	eor	r24, r20
    2c9a:	85 b9       	out	0x05, r24	; 5
    2c9c:	1d c0       	rjmp	.+58     	; 0x2cd8 <micIoPortsConfigureToToggleLevel+0x80>
	}
	else if( port == 2 )
    2c9e:	92 30       	cpi	r25, 0x02	; 2
    2ca0:	69 f4       	brne	.+26     	; 0x2cbc <micIoPortsConfigureToToggleLevel+0x64>
	{
		BIT_TOGGLE(PORTC,pin);
    2ca2:	48 b1       	in	r20, 0x08	; 8
    2ca4:	21 e0       	ldi	r18, 0x01	; 1
    2ca6:	30 e0       	ldi	r19, 0x00	; 0
    2ca8:	b9 01       	movw	r22, r18
    2caa:	02 c0       	rjmp	.+4      	; 0x2cb0 <micIoPortsConfigureToToggleLevel+0x58>
    2cac:	66 0f       	add	r22, r22
    2cae:	77 1f       	adc	r23, r23
    2cb0:	8a 95       	dec	r24
    2cb2:	e2 f7       	brpl	.-8      	; 0x2cac <micIoPortsConfigureToToggleLevel+0x54>
    2cb4:	cb 01       	movw	r24, r22
    2cb6:	84 27       	eor	r24, r20
    2cb8:	88 b9       	out	0x08, r24	; 8
    2cba:	0e c0       	rjmp	.+28     	; 0x2cd8 <micIoPortsConfigureToToggleLevel+0x80>
	}
	else if( port == 3 )
    2cbc:	93 30       	cpi	r25, 0x03	; 3
    2cbe:	61 f4       	brne	.+24     	; 0x2cd8 <micIoPortsConfigureToToggleLevel+0x80>
	{
		BIT_TOGGLE(PORTD,pin);
    2cc0:	4b b1       	in	r20, 0x0b	; 11
    2cc2:	21 e0       	ldi	r18, 0x01	; 1
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	b9 01       	movw	r22, r18
    2cc8:	02 c0       	rjmp	.+4      	; 0x2cce <micIoPortsConfigureToToggleLevel+0x76>
    2cca:	66 0f       	add	r22, r22
    2ccc:	77 1f       	adc	r23, r23
    2cce:	8a 95       	dec	r24
    2cd0:	e2 f7       	brpl	.-8      	; 0x2cca <micIoPortsConfigureToToggleLevel+0x72>
    2cd2:	cb 01       	movw	r24, r22
    2cd4:	84 27       	eor	r24, r20
    2cd6:	8b b9       	out	0x0b, r24	; 11
	}
	
	return o_success;
}
    2cd8:	81 e0       	ldi	r24, 0x01	; 1
    2cda:	08 95       	ret

00002cdc <micIoPortsMasterControlUnitPullUpDisable>:

//set the PUD: PUD: Pull-up Disable
Boolean micIoPortsMasterControlUnitPullUpDisable( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(MCUCR,PUD,enable);
    2cdc:	88 23       	and	r24, r24
    2cde:	21 f0       	breq	.+8      	; 0x2ce8 <micIoPortsMasterControlUnitPullUpDisable+0xc>
    2ce0:	85 b7       	in	r24, 0x35	; 53
    2ce2:	80 61       	ori	r24, 0x10	; 16
    2ce4:	85 bf       	out	0x35, r24	; 53
    2ce6:	03 c0       	rjmp	.+6      	; 0x2cee <micIoPortsMasterControlUnitPullUpDisable+0x12>
    2ce8:	85 b7       	in	r24, 0x35	; 53
    2cea:	8f 7e       	andi	r24, 0xEF	; 239
    2cec:	85 bf       	out	0x35, r24	; 53
	return o_success;
}
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	08 95       	ret

00002cf2 <micIoPortsDataRegisterA>:

//set the Port A Data Register
Boolean micIoPortsDataRegisterA( Int8U pin_io, Boolean value ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PORTA,pin_io,value);
    2cf2:	66 23       	and	r22, r22
    2cf4:	69 f0       	breq	.+26     	; 0x2d10 <micIoPortsDataRegisterA+0x1e>
    2cf6:	42 b1       	in	r20, 0x02	; 2
    2cf8:	21 e0       	ldi	r18, 0x01	; 1
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	b9 01       	movw	r22, r18
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <micIoPortsDataRegisterA+0x12>
    2d00:	66 0f       	add	r22, r22
    2d02:	77 1f       	adc	r23, r23
    2d04:	8a 95       	dec	r24
    2d06:	e2 f7       	brpl	.-8      	; 0x2d00 <micIoPortsDataRegisterA+0xe>
    2d08:	cb 01       	movw	r24, r22
    2d0a:	84 2b       	or	r24, r20
    2d0c:	82 b9       	out	0x02, r24	; 2
    2d0e:	0d c0       	rjmp	.+26     	; 0x2d2a <micIoPortsDataRegisterA+0x38>
    2d10:	42 b1       	in	r20, 0x02	; 2
    2d12:	21 e0       	ldi	r18, 0x01	; 1
    2d14:	30 e0       	ldi	r19, 0x00	; 0
    2d16:	b9 01       	movw	r22, r18
    2d18:	02 c0       	rjmp	.+4      	; 0x2d1e <micIoPortsDataRegisterA+0x2c>
    2d1a:	66 0f       	add	r22, r22
    2d1c:	77 1f       	adc	r23, r23
    2d1e:	8a 95       	dec	r24
    2d20:	e2 f7       	brpl	.-8      	; 0x2d1a <micIoPortsDataRegisterA+0x28>
    2d22:	cb 01       	movw	r24, r22
    2d24:	80 95       	com	r24
    2d26:	84 23       	and	r24, r20
    2d28:	82 b9       	out	0x02, r24	; 2
	return o_success;
}
    2d2a:	81 e0       	ldi	r24, 0x01	; 1
    2d2c:	08 95       	ret

00002d2e <micIoPortsReadDataRegisterA>:

//Read the Port A Data Register
Int8U micIoPortsReadDataRegisterA( void ) 
{
	return PORTA;
    2d2e:	82 b1       	in	r24, 0x02	; 2
}
    2d30:	08 95       	ret

00002d32 <micIoPortsDirectionRegisterA>:

//set the Port A Data Direction Register
Boolean micIoPortsDirectionRegisterA( Int8U pin_io , Boolean value ) 
{
	Boolean o_success = TRUE;
	BIT_SET(DDRA,pin_io,value);
    2d32:	66 23       	and	r22, r22
    2d34:	69 f0       	breq	.+26     	; 0x2d50 <micIoPortsDirectionRegisterA+0x1e>
    2d36:	41 b1       	in	r20, 0x01	; 1
    2d38:	21 e0       	ldi	r18, 0x01	; 1
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	b9 01       	movw	r22, r18
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <micIoPortsDirectionRegisterA+0x12>
    2d40:	66 0f       	add	r22, r22
    2d42:	77 1f       	adc	r23, r23
    2d44:	8a 95       	dec	r24
    2d46:	e2 f7       	brpl	.-8      	; 0x2d40 <micIoPortsDirectionRegisterA+0xe>
    2d48:	cb 01       	movw	r24, r22
    2d4a:	84 2b       	or	r24, r20
    2d4c:	81 b9       	out	0x01, r24	; 1
    2d4e:	0d c0       	rjmp	.+26     	; 0x2d6a <micIoPortsDirectionRegisterA+0x38>
    2d50:	41 b1       	in	r20, 0x01	; 1
    2d52:	21 e0       	ldi	r18, 0x01	; 1
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	b9 01       	movw	r22, r18
    2d58:	02 c0       	rjmp	.+4      	; 0x2d5e <micIoPortsDirectionRegisterA+0x2c>
    2d5a:	66 0f       	add	r22, r22
    2d5c:	77 1f       	adc	r23, r23
    2d5e:	8a 95       	dec	r24
    2d60:	e2 f7       	brpl	.-8      	; 0x2d5a <micIoPortsDirectionRegisterA+0x28>
    2d62:	cb 01       	movw	r24, r22
    2d64:	80 95       	com	r24
    2d66:	84 23       	and	r24, r20
    2d68:	81 b9       	out	0x01, r24	; 1
	return o_success;
}
    2d6a:	81 e0       	ldi	r24, 0x01	; 1
    2d6c:	08 95       	ret

00002d6e <micIoPortsInputPinsAddressA>:

//set the Port A Input Pins Address
Boolean micIoPortsInputPinsAddressA( Int8U pin_io , Boolean value ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PINA,pin_io,value);
    2d6e:	66 23       	and	r22, r22
    2d70:	69 f0       	breq	.+26     	; 0x2d8c <micIoPortsInputPinsAddressA+0x1e>
    2d72:	40 b1       	in	r20, 0x00	; 0
    2d74:	21 e0       	ldi	r18, 0x01	; 1
    2d76:	30 e0       	ldi	r19, 0x00	; 0
    2d78:	b9 01       	movw	r22, r18
    2d7a:	02 c0       	rjmp	.+4      	; 0x2d80 <micIoPortsInputPinsAddressA+0x12>
    2d7c:	66 0f       	add	r22, r22
    2d7e:	77 1f       	adc	r23, r23
    2d80:	8a 95       	dec	r24
    2d82:	e2 f7       	brpl	.-8      	; 0x2d7c <micIoPortsInputPinsAddressA+0xe>
    2d84:	cb 01       	movw	r24, r22
    2d86:	84 2b       	or	r24, r20
    2d88:	80 b9       	out	0x00, r24	; 0
    2d8a:	0d c0       	rjmp	.+26     	; 0x2da6 <micIoPortsInputPinsAddressA+0x38>
    2d8c:	40 b1       	in	r20, 0x00	; 0
    2d8e:	21 e0       	ldi	r18, 0x01	; 1
    2d90:	30 e0       	ldi	r19, 0x00	; 0
    2d92:	b9 01       	movw	r22, r18
    2d94:	02 c0       	rjmp	.+4      	; 0x2d9a <micIoPortsInputPinsAddressA+0x2c>
    2d96:	66 0f       	add	r22, r22
    2d98:	77 1f       	adc	r23, r23
    2d9a:	8a 95       	dec	r24
    2d9c:	e2 f7       	brpl	.-8      	; 0x2d96 <micIoPortsInputPinsAddressA+0x28>
    2d9e:	cb 01       	movw	r24, r22
    2da0:	80 95       	com	r24
    2da2:	84 23       	and	r24, r20
    2da4:	80 b9       	out	0x00, r24	; 0
	return o_success;
}
    2da6:	81 e0       	ldi	r24, 0x01	; 1
    2da8:	08 95       	ret

00002daa <micIoPortsDataRegisterB>:

//set the Port B Data Register
Boolean micIoPortsDataRegisterB( Int8U pin_io , Boolean value )  
{
	Boolean o_success = TRUE;
	BIT_SET(PORTB,pin_io,value);
    2daa:	66 23       	and	r22, r22
    2dac:	69 f0       	breq	.+26     	; 0x2dc8 <micIoPortsDataRegisterB+0x1e>
    2dae:	45 b1       	in	r20, 0x05	; 5
    2db0:	21 e0       	ldi	r18, 0x01	; 1
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	b9 01       	movw	r22, r18
    2db6:	02 c0       	rjmp	.+4      	; 0x2dbc <micIoPortsDataRegisterB+0x12>
    2db8:	66 0f       	add	r22, r22
    2dba:	77 1f       	adc	r23, r23
    2dbc:	8a 95       	dec	r24
    2dbe:	e2 f7       	brpl	.-8      	; 0x2db8 <micIoPortsDataRegisterB+0xe>
    2dc0:	cb 01       	movw	r24, r22
    2dc2:	84 2b       	or	r24, r20
    2dc4:	85 b9       	out	0x05, r24	; 5
    2dc6:	0d c0       	rjmp	.+26     	; 0x2de2 <micIoPortsDataRegisterB+0x38>
    2dc8:	45 b1       	in	r20, 0x05	; 5
    2dca:	21 e0       	ldi	r18, 0x01	; 1
    2dcc:	30 e0       	ldi	r19, 0x00	; 0
    2dce:	b9 01       	movw	r22, r18
    2dd0:	02 c0       	rjmp	.+4      	; 0x2dd6 <micIoPortsDataRegisterB+0x2c>
    2dd2:	66 0f       	add	r22, r22
    2dd4:	77 1f       	adc	r23, r23
    2dd6:	8a 95       	dec	r24
    2dd8:	e2 f7       	brpl	.-8      	; 0x2dd2 <micIoPortsDataRegisterB+0x28>
    2dda:	cb 01       	movw	r24, r22
    2ddc:	80 95       	com	r24
    2dde:	84 23       	and	r24, r20
    2de0:	85 b9       	out	0x05, r24	; 5
	return o_success;
}
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	08 95       	ret

00002de6 <micIoPortsReadDataRegisterB>:

//Read the Port B Data Register
Int8U micIoPortsReadDataRegisterB( void ) 
{
	return PORTB;
    2de6:	85 b1       	in	r24, 0x05	; 5
}
    2de8:	08 95       	ret

00002dea <micIoPortsDirectionRegisterB>:

//set the Port B Data Direction Register
Boolean micIoPortsDirectionRegisterB( Int8U pin_io , Boolean value )  
{
	Boolean o_success = TRUE;
	BIT_SET(DDRB,pin_io,value);
    2dea:	66 23       	and	r22, r22
    2dec:	69 f0       	breq	.+26     	; 0x2e08 <micIoPortsDirectionRegisterB+0x1e>
    2dee:	44 b1       	in	r20, 0x04	; 4
    2df0:	21 e0       	ldi	r18, 0x01	; 1
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	b9 01       	movw	r22, r18
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <micIoPortsDirectionRegisterB+0x12>
    2df8:	66 0f       	add	r22, r22
    2dfa:	77 1f       	adc	r23, r23
    2dfc:	8a 95       	dec	r24
    2dfe:	e2 f7       	brpl	.-8      	; 0x2df8 <micIoPortsDirectionRegisterB+0xe>
    2e00:	cb 01       	movw	r24, r22
    2e02:	84 2b       	or	r24, r20
    2e04:	84 b9       	out	0x04, r24	; 4
    2e06:	0d c0       	rjmp	.+26     	; 0x2e22 <micIoPortsDirectionRegisterB+0x38>
    2e08:	44 b1       	in	r20, 0x04	; 4
    2e0a:	21 e0       	ldi	r18, 0x01	; 1
    2e0c:	30 e0       	ldi	r19, 0x00	; 0
    2e0e:	b9 01       	movw	r22, r18
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <micIoPortsDirectionRegisterB+0x2c>
    2e12:	66 0f       	add	r22, r22
    2e14:	77 1f       	adc	r23, r23
    2e16:	8a 95       	dec	r24
    2e18:	e2 f7       	brpl	.-8      	; 0x2e12 <micIoPortsDirectionRegisterB+0x28>
    2e1a:	cb 01       	movw	r24, r22
    2e1c:	80 95       	com	r24
    2e1e:	84 23       	and	r24, r20
    2e20:	84 b9       	out	0x04, r24	; 4
	return o_success;
}
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	08 95       	ret

00002e26 <micIoPortsInputPinsAddressB>:

//set the Port B Input Pins Address
Boolean micIoPortsInputPinsAddressB( Int8U pin_io , Boolean value ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PINB,pin_io,value);
    2e26:	66 23       	and	r22, r22
    2e28:	69 f0       	breq	.+26     	; 0x2e44 <micIoPortsInputPinsAddressB+0x1e>
    2e2a:	43 b1       	in	r20, 0x03	; 3
    2e2c:	21 e0       	ldi	r18, 0x01	; 1
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	b9 01       	movw	r22, r18
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <micIoPortsInputPinsAddressB+0x12>
    2e34:	66 0f       	add	r22, r22
    2e36:	77 1f       	adc	r23, r23
    2e38:	8a 95       	dec	r24
    2e3a:	e2 f7       	brpl	.-8      	; 0x2e34 <micIoPortsInputPinsAddressB+0xe>
    2e3c:	cb 01       	movw	r24, r22
    2e3e:	84 2b       	or	r24, r20
    2e40:	83 b9       	out	0x03, r24	; 3
    2e42:	0d c0       	rjmp	.+26     	; 0x2e5e <micIoPortsInputPinsAddressB+0x38>
    2e44:	43 b1       	in	r20, 0x03	; 3
    2e46:	21 e0       	ldi	r18, 0x01	; 1
    2e48:	30 e0       	ldi	r19, 0x00	; 0
    2e4a:	b9 01       	movw	r22, r18
    2e4c:	02 c0       	rjmp	.+4      	; 0x2e52 <micIoPortsInputPinsAddressB+0x2c>
    2e4e:	66 0f       	add	r22, r22
    2e50:	77 1f       	adc	r23, r23
    2e52:	8a 95       	dec	r24
    2e54:	e2 f7       	brpl	.-8      	; 0x2e4e <micIoPortsInputPinsAddressB+0x28>
    2e56:	cb 01       	movw	r24, r22
    2e58:	80 95       	com	r24
    2e5a:	84 23       	and	r24, r20
    2e5c:	83 b9       	out	0x03, r24	; 3
	return o_success;
}
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	08 95       	ret

00002e62 <micIoPortsDataRegisterC>:

//set the Port C Data Register
Boolean micIoPortsDataRegisterC( Int8U pin_io , Boolean value )  
{
	Boolean o_success = TRUE;
	BIT_SET(PORTC,pin_io,value);
    2e62:	66 23       	and	r22, r22
    2e64:	69 f0       	breq	.+26     	; 0x2e80 <micIoPortsDataRegisterC+0x1e>
    2e66:	48 b1       	in	r20, 0x08	; 8
    2e68:	21 e0       	ldi	r18, 0x01	; 1
    2e6a:	30 e0       	ldi	r19, 0x00	; 0
    2e6c:	b9 01       	movw	r22, r18
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <micIoPortsDataRegisterC+0x12>
    2e70:	66 0f       	add	r22, r22
    2e72:	77 1f       	adc	r23, r23
    2e74:	8a 95       	dec	r24
    2e76:	e2 f7       	brpl	.-8      	; 0x2e70 <micIoPortsDataRegisterC+0xe>
    2e78:	cb 01       	movw	r24, r22
    2e7a:	84 2b       	or	r24, r20
    2e7c:	88 b9       	out	0x08, r24	; 8
    2e7e:	0d c0       	rjmp	.+26     	; 0x2e9a <micIoPortsDataRegisterC+0x38>
    2e80:	48 b1       	in	r20, 0x08	; 8
    2e82:	21 e0       	ldi	r18, 0x01	; 1
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	b9 01       	movw	r22, r18
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <micIoPortsDataRegisterC+0x2c>
    2e8a:	66 0f       	add	r22, r22
    2e8c:	77 1f       	adc	r23, r23
    2e8e:	8a 95       	dec	r24
    2e90:	e2 f7       	brpl	.-8      	; 0x2e8a <micIoPortsDataRegisterC+0x28>
    2e92:	cb 01       	movw	r24, r22
    2e94:	80 95       	com	r24
    2e96:	84 23       	and	r24, r20
    2e98:	88 b9       	out	0x08, r24	; 8
	return o_success;
}
    2e9a:	81 e0       	ldi	r24, 0x01	; 1
    2e9c:	08 95       	ret

00002e9e <micIoPortsReadDataRegisterC>:

//Read the Port C Data Register
Int8U micIoPortsReadDataRegisterC( void ) 
{
	return PORTC;
    2e9e:	88 b1       	in	r24, 0x08	; 8
}
    2ea0:	08 95       	ret

00002ea2 <micIoPortsDirectionRegisterC>:

//set the Port C Data Direction Register
Boolean micIoPortsDirectionRegisterC( Int8U pin_io , Boolean value )  
{
	Boolean o_success = TRUE;
	BIT_SET(DDRC,pin_io,value);
    2ea2:	66 23       	and	r22, r22
    2ea4:	69 f0       	breq	.+26     	; 0x2ec0 <micIoPortsDirectionRegisterC+0x1e>
    2ea6:	47 b1       	in	r20, 0x07	; 7
    2ea8:	21 e0       	ldi	r18, 0x01	; 1
    2eaa:	30 e0       	ldi	r19, 0x00	; 0
    2eac:	b9 01       	movw	r22, r18
    2eae:	02 c0       	rjmp	.+4      	; 0x2eb4 <micIoPortsDirectionRegisterC+0x12>
    2eb0:	66 0f       	add	r22, r22
    2eb2:	77 1f       	adc	r23, r23
    2eb4:	8a 95       	dec	r24
    2eb6:	e2 f7       	brpl	.-8      	; 0x2eb0 <micIoPortsDirectionRegisterC+0xe>
    2eb8:	cb 01       	movw	r24, r22
    2eba:	84 2b       	or	r24, r20
    2ebc:	87 b9       	out	0x07, r24	; 7
    2ebe:	0d c0       	rjmp	.+26     	; 0x2eda <micIoPortsDirectionRegisterC+0x38>
    2ec0:	47 b1       	in	r20, 0x07	; 7
    2ec2:	21 e0       	ldi	r18, 0x01	; 1
    2ec4:	30 e0       	ldi	r19, 0x00	; 0
    2ec6:	b9 01       	movw	r22, r18
    2ec8:	02 c0       	rjmp	.+4      	; 0x2ece <micIoPortsDirectionRegisterC+0x2c>
    2eca:	66 0f       	add	r22, r22
    2ecc:	77 1f       	adc	r23, r23
    2ece:	8a 95       	dec	r24
    2ed0:	e2 f7       	brpl	.-8      	; 0x2eca <micIoPortsDirectionRegisterC+0x28>
    2ed2:	cb 01       	movw	r24, r22
    2ed4:	80 95       	com	r24
    2ed6:	84 23       	and	r24, r20
    2ed8:	87 b9       	out	0x07, r24	; 7
	return o_success;
}
    2eda:	81 e0       	ldi	r24, 0x01	; 1
    2edc:	08 95       	ret

00002ede <micIoPortsInputPinsAddressC>:

//set the Port C Input Pins Address
Boolean micIoPortsInputPinsAddressC( Int8U pin_io , Boolean value )  
{
	Boolean o_success = TRUE;
	BIT_SET(PINC,pin_io,value);
    2ede:	66 23       	and	r22, r22
    2ee0:	69 f0       	breq	.+26     	; 0x2efc <micIoPortsInputPinsAddressC+0x1e>
    2ee2:	46 b1       	in	r20, 0x06	; 6
    2ee4:	21 e0       	ldi	r18, 0x01	; 1
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	b9 01       	movw	r22, r18
    2eea:	02 c0       	rjmp	.+4      	; 0x2ef0 <micIoPortsInputPinsAddressC+0x12>
    2eec:	66 0f       	add	r22, r22
    2eee:	77 1f       	adc	r23, r23
    2ef0:	8a 95       	dec	r24
    2ef2:	e2 f7       	brpl	.-8      	; 0x2eec <micIoPortsInputPinsAddressC+0xe>
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	84 2b       	or	r24, r20
    2ef8:	86 b9       	out	0x06, r24	; 6
    2efa:	0d c0       	rjmp	.+26     	; 0x2f16 <micIoPortsInputPinsAddressC+0x38>
    2efc:	46 b1       	in	r20, 0x06	; 6
    2efe:	21 e0       	ldi	r18, 0x01	; 1
    2f00:	30 e0       	ldi	r19, 0x00	; 0
    2f02:	b9 01       	movw	r22, r18
    2f04:	02 c0       	rjmp	.+4      	; 0x2f0a <micIoPortsInputPinsAddressC+0x2c>
    2f06:	66 0f       	add	r22, r22
    2f08:	77 1f       	adc	r23, r23
    2f0a:	8a 95       	dec	r24
    2f0c:	e2 f7       	brpl	.-8      	; 0x2f06 <micIoPortsInputPinsAddressC+0x28>
    2f0e:	cb 01       	movw	r24, r22
    2f10:	80 95       	com	r24
    2f12:	84 23       	and	r24, r20
    2f14:	86 b9       	out	0x06, r24	; 6
	return o_success;
}
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	08 95       	ret

00002f1a <micIoPortsDataRegisterD>:

//set the Port D Data Register
Boolean micIoPortsDataRegisterD( Int8U pin_io , Boolean value )  
{
	Boolean o_suDDess = TRUE;
	BIT_SET(PORTD,pin_io,value);
    2f1a:	66 23       	and	r22, r22
    2f1c:	69 f0       	breq	.+26     	; 0x2f38 <micIoPortsDataRegisterD+0x1e>
    2f1e:	4b b1       	in	r20, 0x0b	; 11
    2f20:	21 e0       	ldi	r18, 0x01	; 1
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	b9 01       	movw	r22, r18
    2f26:	02 c0       	rjmp	.+4      	; 0x2f2c <micIoPortsDataRegisterD+0x12>
    2f28:	66 0f       	add	r22, r22
    2f2a:	77 1f       	adc	r23, r23
    2f2c:	8a 95       	dec	r24
    2f2e:	e2 f7       	brpl	.-8      	; 0x2f28 <micIoPortsDataRegisterD+0xe>
    2f30:	cb 01       	movw	r24, r22
    2f32:	84 2b       	or	r24, r20
    2f34:	8b b9       	out	0x0b, r24	; 11
    2f36:	0d c0       	rjmp	.+26     	; 0x2f52 <micIoPortsDataRegisterD+0x38>
    2f38:	4b b1       	in	r20, 0x0b	; 11
    2f3a:	21 e0       	ldi	r18, 0x01	; 1
    2f3c:	30 e0       	ldi	r19, 0x00	; 0
    2f3e:	b9 01       	movw	r22, r18
    2f40:	02 c0       	rjmp	.+4      	; 0x2f46 <micIoPortsDataRegisterD+0x2c>
    2f42:	66 0f       	add	r22, r22
    2f44:	77 1f       	adc	r23, r23
    2f46:	8a 95       	dec	r24
    2f48:	e2 f7       	brpl	.-8      	; 0x2f42 <micIoPortsDataRegisterD+0x28>
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	80 95       	com	r24
    2f4e:	84 23       	and	r24, r20
    2f50:	8b b9       	out	0x0b, r24	; 11
	return o_suDDess;
}
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	08 95       	ret

00002f56 <micIoPortsDataRegister>:

//set the Port A|B|C|D Data Register
Boolean micIoPortsDataRegister( Int8U port_name, Int8U pin_io, Boolean value ) 
{
	Boolean o_success = TRUE;
	if( port_name == 0 )
    2f56:	88 23       	and	r24, r24
    2f58:	29 f4       	brne	.+10     	; 0x2f64 <micIoPortsDataRegister+0xe>
	{
		micIoPortsDataRegisterA(pin_io,value);
    2f5a:	86 2f       	mov	r24, r22
    2f5c:	64 2f       	mov	r22, r20
    2f5e:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <micIoPortsDataRegisterA>
    2f62:	14 c0       	rjmp	.+40     	; 0x2f8c <micIoPortsDataRegister+0x36>
	}
	else if( port_name == 1 )
    2f64:	81 30       	cpi	r24, 0x01	; 1
    2f66:	29 f4       	brne	.+10     	; 0x2f72 <micIoPortsDataRegister+0x1c>
	{
		micIoPortsDataRegisterB(pin_io,value);
    2f68:	86 2f       	mov	r24, r22
    2f6a:	64 2f       	mov	r22, r20
    2f6c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <micIoPortsDataRegisterB>
    2f70:	0d c0       	rjmp	.+26     	; 0x2f8c <micIoPortsDataRegister+0x36>
	}
	else if( port_name == 2 )
    2f72:	82 30       	cpi	r24, 0x02	; 2
    2f74:	29 f4       	brne	.+10     	; 0x2f80 <micIoPortsDataRegister+0x2a>
	{
		micIoPortsDataRegisterC(pin_io,value);
    2f76:	86 2f       	mov	r24, r22
    2f78:	64 2f       	mov	r22, r20
    2f7a:	0e 94 31 17 	call	0x2e62	; 0x2e62 <micIoPortsDataRegisterC>
    2f7e:	06 c0       	rjmp	.+12     	; 0x2f8c <micIoPortsDataRegister+0x36>
	}
	else if( port_name == 3 )
    2f80:	83 30       	cpi	r24, 0x03	; 3
    2f82:	21 f4       	brne	.+8      	; 0x2f8c <micIoPortsDataRegister+0x36>
	{
		micIoPortsDataRegisterD(pin_io,value);
    2f84:	86 2f       	mov	r24, r22
    2f86:	64 2f       	mov	r22, r20
    2f88:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <micIoPortsDataRegisterD>
	}
	return o_success;
}
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	08 95       	ret

00002f90 <micIoPortsConfigureToHighLevel>:
//Set IO pin as High Level 
Boolean micIoPortsConfigureToHighLevel( EIoPin io_pin )
{
	Boolean o_success = TRUE;
	Int8U port = ( io_pin / 8 ) ;
	Int8U pin =  ( io_pin % 8 ) ;
    2f90:	68 2f       	mov	r22, r24
    2f92:	67 70       	andi	r22, 0x07	; 7
	micIoPortsDataRegister(port,pin,TRUE);
    2f94:	86 95       	lsr	r24
    2f96:	86 95       	lsr	r24
    2f98:	86 95       	lsr	r24
    2f9a:	41 e0       	ldi	r20, 0x01	; 1
    2f9c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <micIoPortsDataRegister>
	
	return o_success;
}
    2fa0:	81 e0       	ldi	r24, 0x01	; 1
    2fa2:	08 95       	ret

00002fa4 <micIoPortsConfigureToLowLevel>:
//Set IO pin as Low Level 
Boolean micIoPortsConfigureToLowLevel( EIoPin io_pin )
{
	Boolean o_success = TRUE;
	Int8U port = ( io_pin / 8 ) ;
	Int8U pin =  ( io_pin % 8 ) ;
    2fa4:	68 2f       	mov	r22, r24
    2fa6:	67 70       	andi	r22, 0x07	; 7
	micIoPortsDataRegister(port,pin,FALSE);
    2fa8:	86 95       	lsr	r24
    2faa:	86 95       	lsr	r24
    2fac:	86 95       	lsr	r24
    2fae:	40 e0       	ldi	r20, 0x00	; 0
    2fb0:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <micIoPortsDataRegister>
	
	return o_success;
}
    2fb4:	81 e0       	ldi	r24, 0x01	; 1
    2fb6:	08 95       	ret

00002fb8 <micIoPortsReadDataRegisterD>:
}

//Read the Port D Data Register
Int8U micIoPortsReadDataRegisterD( void ) 
{
	return PORTD;
    2fb8:	8b b1       	in	r24, 0x0b	; 11
}
    2fba:	08 95       	ret

00002fbc <micIoPortsDirectionRegisterD>:

//set the Port D Data DireDtion Register
Boolean micIoPortsDirectionRegisterD( Int8U pin_io , Boolean value ) 
{
	Boolean o_suDDess = TRUE;
	BIT_SET(DDRD,pin_io,value);
    2fbc:	66 23       	and	r22, r22
    2fbe:	69 f0       	breq	.+26     	; 0x2fda <micIoPortsDirectionRegisterD+0x1e>
    2fc0:	4a b1       	in	r20, 0x0a	; 10
    2fc2:	21 e0       	ldi	r18, 0x01	; 1
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	b9 01       	movw	r22, r18
    2fc8:	02 c0       	rjmp	.+4      	; 0x2fce <micIoPortsDirectionRegisterD+0x12>
    2fca:	66 0f       	add	r22, r22
    2fcc:	77 1f       	adc	r23, r23
    2fce:	8a 95       	dec	r24
    2fd0:	e2 f7       	brpl	.-8      	; 0x2fca <micIoPortsDirectionRegisterD+0xe>
    2fd2:	cb 01       	movw	r24, r22
    2fd4:	84 2b       	or	r24, r20
    2fd6:	8a b9       	out	0x0a, r24	; 10
    2fd8:	0d c0       	rjmp	.+26     	; 0x2ff4 <micIoPortsDirectionRegisterD+0x38>
    2fda:	4a b1       	in	r20, 0x0a	; 10
    2fdc:	21 e0       	ldi	r18, 0x01	; 1
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	b9 01       	movw	r22, r18
    2fe2:	02 c0       	rjmp	.+4      	; 0x2fe8 <micIoPortsDirectionRegisterD+0x2c>
    2fe4:	66 0f       	add	r22, r22
    2fe6:	77 1f       	adc	r23, r23
    2fe8:	8a 95       	dec	r24
    2fea:	e2 f7       	brpl	.-8      	; 0x2fe4 <micIoPortsDirectionRegisterD+0x28>
    2fec:	cb 01       	movw	r24, r22
    2fee:	80 95       	com	r24
    2ff0:	84 23       	and	r24, r20
    2ff2:	8a b9       	out	0x0a, r24	; 10
	return o_suDDess;
}
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	08 95       	ret

00002ff8 <micIoPortsDirectionRegister>:

//set the Port A|B|C|D Data Direction Register
Boolean micIoPortsDirectionRegister( Int8U port_name, Int8U pin_io, Boolean value ) 
{
	Boolean o_success = TRUE;
	if( port_name == 0 )
    2ff8:	88 23       	and	r24, r24
    2ffa:	29 f4       	brne	.+10     	; 0x3006 <micIoPortsDirectionRegister+0xe>
	{
		micIoPortsDirectionRegisterA(pin_io,value);
    2ffc:	86 2f       	mov	r24, r22
    2ffe:	64 2f       	mov	r22, r20
    3000:	0e 94 99 16 	call	0x2d32	; 0x2d32 <micIoPortsDirectionRegisterA>
    3004:	14 c0       	rjmp	.+40     	; 0x302e <micIoPortsDirectionRegister+0x36>
	}
	else if( port_name == 1 )
    3006:	81 30       	cpi	r24, 0x01	; 1
    3008:	29 f4       	brne	.+10     	; 0x3014 <micIoPortsDirectionRegister+0x1c>
	{
		micIoPortsDirectionRegisterB(pin_io,value);
    300a:	86 2f       	mov	r24, r22
    300c:	64 2f       	mov	r22, r20
    300e:	0e 94 f5 16 	call	0x2dea	; 0x2dea <micIoPortsDirectionRegisterB>
    3012:	0d c0       	rjmp	.+26     	; 0x302e <micIoPortsDirectionRegister+0x36>
	}
	else if( port_name == 2 )
    3014:	82 30       	cpi	r24, 0x02	; 2
    3016:	29 f4       	brne	.+10     	; 0x3022 <micIoPortsDirectionRegister+0x2a>
	{
		micIoPortsDirectionRegisterC(pin_io,value);
    3018:	86 2f       	mov	r24, r22
    301a:	64 2f       	mov	r22, r20
    301c:	0e 94 51 17 	call	0x2ea2	; 0x2ea2 <micIoPortsDirectionRegisterC>
    3020:	06 c0       	rjmp	.+12     	; 0x302e <micIoPortsDirectionRegister+0x36>
	}
	else if( port_name == 3 )
    3022:	83 30       	cpi	r24, 0x03	; 3
    3024:	21 f4       	brne	.+8      	; 0x302e <micIoPortsDirectionRegister+0x36>
	{
		micIoPortsDirectionRegisterD(pin_io,value);
    3026:	86 2f       	mov	r24, r22
    3028:	64 2f       	mov	r22, r20
    302a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <micIoPortsDirectionRegisterD>
	}
	return o_success;
}
    302e:	81 e0       	ldi	r24, 0x01	; 1
    3030:	08 95       	ret

00003032 <micIoPortsConfigureInput>:
	return o_success;
}

//Set IO as input and add pull up if necessary 
Boolean micIoPortsConfigureInput( EIoPin IO, EInputPullUp pull_up_enable )
{
    3032:	ff 92       	push	r15
    3034:	0f 93       	push	r16
    3036:	1f 93       	push	r17
    3038:	f6 2e       	mov	r15, r22
	Boolean o_success = TRUE;
	Int8U port = ( IO / 8 ) ;
    303a:	08 2f       	mov	r16, r24
    303c:	06 95       	lsr	r16
    303e:	06 95       	lsr	r16
    3040:	06 95       	lsr	r16
	Int8U pin =  ( IO % 8 ) ;
    3042:	18 2f       	mov	r17, r24
    3044:	17 70       	andi	r17, 0x07	; 7
	micIoPortsDirectionRegister(port,pin,FALSE);
    3046:	80 2f       	mov	r24, r16
    3048:	61 2f       	mov	r22, r17
    304a:	40 e0       	ldi	r20, 0x00	; 0
    304c:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <micIoPortsDirectionRegister>
	if(pull_up_enable == PORT_PULL_UP)
    3050:	8f 2d       	mov	r24, r15
    3052:	81 30       	cpi	r24, 0x01	; 1
    3054:	31 f4       	brne	.+12     	; 0x3062 <micIoPortsConfigureInput+0x30>
	{
		micIoPortsDataRegister(port,pin,TRUE);
    3056:	80 2f       	mov	r24, r16
    3058:	61 2f       	mov	r22, r17
    305a:	41 e0       	ldi	r20, 0x01	; 1
    305c:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <micIoPortsDataRegister>
    3060:	05 c0       	rjmp	.+10     	; 0x306c <micIoPortsConfigureInput+0x3a>
	}
	else
	{
		micIoPortsDataRegister(port,pin,FALSE);
    3062:	80 2f       	mov	r24, r16
    3064:	61 2f       	mov	r22, r17
    3066:	40 e0       	ldi	r20, 0x00	; 0
    3068:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <micIoPortsDataRegister>
	}		
	
	return o_success;
}
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	1f 91       	pop	r17
    3070:	0f 91       	pop	r16
    3072:	ff 90       	pop	r15
    3074:	08 95       	ret

00003076 <micIoPortsConfigureOutput>:
//Set IO pin as output 
Boolean micIoPortsConfigureOutput( EIoPin io_pin )
{
	Boolean o_success = TRUE;
	Int8U port = ( io_pin / 8 ) ;
	Int8U pin =  ( io_pin % 8 ) ;
    3076:	68 2f       	mov	r22, r24
    3078:	67 70       	andi	r22, 0x07	; 7
	micIoPortsDirectionRegister(port,pin,TRUE);
    307a:	86 95       	lsr	r24
    307c:	86 95       	lsr	r24
    307e:	86 95       	lsr	r24
    3080:	41 e0       	ldi	r20, 0x01	; 1
    3082:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <micIoPortsDirectionRegister>
	
	return o_success;
}
    3086:	81 e0       	ldi	r24, 0x01	; 1
    3088:	08 95       	ret

0000308a <micIoPortsInputPinsAddressD>:

//set the Port D Input Pins Address
Boolean micIoPortsInputPinsAddressD( Int8U pin_io , Boolean value )  
{
	Boolean o_suDDess = TRUE;
	BIT_SET(PIND,pin_io,value);
    308a:	66 23       	and	r22, r22
    308c:	69 f0       	breq	.+26     	; 0x30a8 <micIoPortsInputPinsAddressD+0x1e>
    308e:	49 b1       	in	r20, 0x09	; 9
    3090:	21 e0       	ldi	r18, 0x01	; 1
    3092:	30 e0       	ldi	r19, 0x00	; 0
    3094:	b9 01       	movw	r22, r18
    3096:	02 c0       	rjmp	.+4      	; 0x309c <micIoPortsInputPinsAddressD+0x12>
    3098:	66 0f       	add	r22, r22
    309a:	77 1f       	adc	r23, r23
    309c:	8a 95       	dec	r24
    309e:	e2 f7       	brpl	.-8      	; 0x3098 <micIoPortsInputPinsAddressD+0xe>
    30a0:	cb 01       	movw	r24, r22
    30a2:	84 2b       	or	r24, r20
    30a4:	89 b9       	out	0x09, r24	; 9
    30a6:	0d c0       	rjmp	.+26     	; 0x30c2 <micIoPortsInputPinsAddressD+0x38>
    30a8:	49 b1       	in	r20, 0x09	; 9
    30aa:	21 e0       	ldi	r18, 0x01	; 1
    30ac:	30 e0       	ldi	r19, 0x00	; 0
    30ae:	b9 01       	movw	r22, r18
    30b0:	02 c0       	rjmp	.+4      	; 0x30b6 <micIoPortsInputPinsAddressD+0x2c>
    30b2:	66 0f       	add	r22, r22
    30b4:	77 1f       	adc	r23, r23
    30b6:	8a 95       	dec	r24
    30b8:	e2 f7       	brpl	.-8      	; 0x30b2 <micIoPortsInputPinsAddressD+0x28>
    30ba:	cb 01       	movw	r24, r22
    30bc:	80 95       	com	r24
    30be:	84 23       	and	r24, r20
    30c0:	89 b9       	out	0x09, r24	; 9
	return o_suDDess;
    30c2:	81 e0       	ldi	r24, 0x01	; 1
    30c4:	08 95       	ret

000030c6 <micIoPortsInputPinsAddress>:

//set the Port A|B|C|D Input Pins Address
Boolean micIoPortsInputPinsAddress( Int8U port_name, Int8U pin_io, Boolean value ) 
{
	Boolean o_success = TRUE;
	if( port_name == 0 )
    30c6:	88 23       	and	r24, r24
    30c8:	29 f4       	brne	.+10     	; 0x30d4 <micIoPortsInputPinsAddress+0xe>
	{
		micIoPortsInputPinsAddressA(pin_io,value);
    30ca:	86 2f       	mov	r24, r22
    30cc:	64 2f       	mov	r22, r20
    30ce:	0e 94 b7 16 	call	0x2d6e	; 0x2d6e <micIoPortsInputPinsAddressA>
    30d2:	14 c0       	rjmp	.+40     	; 0x30fc <micIoPortsInputPinsAddress+0x36>
	}
	else if( port_name == 1 )
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	29 f4       	brne	.+10     	; 0x30e2 <micIoPortsInputPinsAddress+0x1c>
	{
		micIoPortsInputPinsAddressB(pin_io,value);
    30d8:	86 2f       	mov	r24, r22
    30da:	64 2f       	mov	r22, r20
    30dc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <micIoPortsInputPinsAddressB>
    30e0:	0d c0       	rjmp	.+26     	; 0x30fc <micIoPortsInputPinsAddress+0x36>
	}
	else if( port_name == 2 )
    30e2:	82 30       	cpi	r24, 0x02	; 2
    30e4:	29 f4       	brne	.+10     	; 0x30f0 <micIoPortsInputPinsAddress+0x2a>
	{
		micIoPortsInputPinsAddressC(pin_io,value);
    30e6:	86 2f       	mov	r24, r22
    30e8:	64 2f       	mov	r22, r20
    30ea:	0e 94 6f 17 	call	0x2ede	; 0x2ede <micIoPortsInputPinsAddressC>
    30ee:	06 c0       	rjmp	.+12     	; 0x30fc <micIoPortsInputPinsAddress+0x36>
	}
	else if( port_name == 3 )
    30f0:	83 30       	cpi	r24, 0x03	; 3
    30f2:	21 f4       	brne	.+8      	; 0x30fc <micIoPortsInputPinsAddress+0x36>
	{
		micIoPortsInputPinsAddressD(pin_io,value);
    30f4:	86 2f       	mov	r24, r22
    30f6:	64 2f       	mov	r22, r20
    30f8:	0e 94 45 18 	call	0x308a	; 0x308a <micIoPortsInputPinsAddressD>
	}
	return o_success;
}
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	08 95       	ret

00003100 <micPowerMangementSleepMode>:

//set the SM2:0: Sleep Mode Select Bits 2, 1, and 0
Boolean micPowerMangementSleepMode ( PowerMangementStanbyMode sleep_mode ) 
{
	Boolean o_success = TRUE;
	SMCR |= sleep_mode;
    3100:	93 b7       	in	r25, 0x33	; 51
    3102:	89 2b       	or	r24, r25
    3104:	83 bf       	out	0x33, r24	; 51
	return o_success;
}
    3106:	81 e0       	ldi	r24, 0x01	; 1
    3108:	08 95       	ret

0000310a <micPowerMangementSleepEnable>:

//set the SE: Sleep Enable
Boolean micPowerMangementSleepEnable ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(SMCR,SE,enable);
    310a:	88 23       	and	r24, r24
    310c:	21 f0       	breq	.+8      	; 0x3116 <micPowerMangementSleepEnable+0xc>
    310e:	83 b7       	in	r24, 0x33	; 51
    3110:	81 60       	ori	r24, 0x01	; 1
    3112:	83 bf       	out	0x33, r24	; 51
    3114:	03 c0       	rjmp	.+6      	; 0x311c <micPowerMangementSleepEnable+0x12>
    3116:	83 b7       	in	r24, 0x33	; 51
    3118:	8e 7f       	andi	r24, 0xFE	; 254
    311a:	83 bf       	out	0x33, r24	; 51
	return o_success;
}
    311c:	81 e0       	ldi	r24, 0x01	; 1
    311e:	08 95       	ret

00003120 <micPowerMangementMasterControlUnitBrownOutVoltageSleep>:

//set the BODS: BOD Sleep
Boolean micPowerMangementMasterControlUnitBrownOutVoltageSleep ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(MCUCR,BODS,enable);
    3120:	88 23       	and	r24, r24
    3122:	21 f0       	breq	.+8      	; 0x312c <micPowerMangementMasterControlUnitBrownOutVoltageSleep+0xc>
    3124:	85 b7       	in	r24, 0x35	; 53
    3126:	80 64       	ori	r24, 0x40	; 64
    3128:	85 bf       	out	0x35, r24	; 53
    312a:	03 c0       	rjmp	.+6      	; 0x3132 <micPowerMangementMasterControlUnitBrownOutVoltageSleep+0x12>
    312c:	85 b7       	in	r24, 0x35	; 53
    312e:	8f 7b       	andi	r24, 0xBF	; 191
    3130:	85 bf       	out	0x35, r24	; 53
	return o_success;
}
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	08 95       	ret

00003136 <micPowerMangementMasterControlUnitBrownOutVoltageSleepEnable>:

//set the BODSE: BOD Sleep Enable
Boolean micPowerMangementMasterControlUnitBrownOutVoltageSleepEnable ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(MCUCR,BODSE,enable);
    3136:	88 23       	and	r24, r24
    3138:	21 f0       	breq	.+8      	; 0x3142 <micPowerMangementMasterControlUnitBrownOutVoltageSleepEnable+0xc>
    313a:	85 b7       	in	r24, 0x35	; 53
    313c:	80 62       	ori	r24, 0x20	; 32
    313e:	85 bf       	out	0x35, r24	; 53
    3140:	03 c0       	rjmp	.+6      	; 0x3148 <micPowerMangementMasterControlUnitBrownOutVoltageSleepEnable+0x12>
    3142:	85 b7       	in	r24, 0x35	; 53
    3144:	8f 7d       	andi	r24, 0xDF	; 223
    3146:	85 bf       	out	0x35, r24	; 53
	return o_success;
}
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	08 95       	ret

0000314c <micPowerMangementPowerReductionTWI>:

//set the PRTWI: Power Reduction TWI
Boolean micPowerMangementPowerReductionTWI ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PRR0,PRTWI,enable);
    314c:	88 23       	and	r24, r24
    314e:	31 f0       	breq	.+12     	; 0x315c <micPowerMangementPowerReductionTWI+0x10>
    3150:	e4 e6       	ldi	r30, 0x64	; 100
    3152:	f0 e0       	ldi	r31, 0x00	; 0
    3154:	80 81       	ld	r24, Z
    3156:	80 68       	ori	r24, 0x80	; 128
    3158:	80 83       	st	Z, r24
    315a:	05 c0       	rjmp	.+10     	; 0x3166 <micPowerMangementPowerReductionTWI+0x1a>
    315c:	e4 e6       	ldi	r30, 0x64	; 100
    315e:	f0 e0       	ldi	r31, 0x00	; 0
    3160:	80 81       	ld	r24, Z
    3162:	8f 77       	andi	r24, 0x7F	; 127
    3164:	80 83       	st	Z, r24
	return o_success;
}
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	08 95       	ret

0000316a <micPowerMangementPowerReductionTimerCounter2>:

//set the PRTIM2: Power Reduction Timer/Counter2
Boolean micPowerMangementPowerReductionTimerCounter2 ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PRR0,PRTIM2,enable);
    316a:	88 23       	and	r24, r24
    316c:	31 f0       	breq	.+12     	; 0x317a <micPowerMangementPowerReductionTimerCounter2+0x10>
    316e:	e4 e6       	ldi	r30, 0x64	; 100
    3170:	f0 e0       	ldi	r31, 0x00	; 0
    3172:	80 81       	ld	r24, Z
    3174:	80 64       	ori	r24, 0x40	; 64
    3176:	80 83       	st	Z, r24
    3178:	05 c0       	rjmp	.+10     	; 0x3184 <micPowerMangementPowerReductionTimerCounter2+0x1a>
    317a:	e4 e6       	ldi	r30, 0x64	; 100
    317c:	f0 e0       	ldi	r31, 0x00	; 0
    317e:	80 81       	ld	r24, Z
    3180:	8f 7b       	andi	r24, 0xBF	; 191
    3182:	80 83       	st	Z, r24
	return o_success;
}
    3184:	81 e0       	ldi	r24, 0x01	; 1
    3186:	08 95       	ret

00003188 <micPowerMangementPowerReductionTimerCounter0>:

//set the PRTIM2: Power Reduction Timer/Counter0
Boolean micPowerMangementPowerReductionTimerCounter0 ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PRR0,PRTIM0,enable);
    3188:	88 23       	and	r24, r24
    318a:	31 f0       	breq	.+12     	; 0x3198 <micPowerMangementPowerReductionTimerCounter0+0x10>
    318c:	e4 e6       	ldi	r30, 0x64	; 100
    318e:	f0 e0       	ldi	r31, 0x00	; 0
    3190:	80 81       	ld	r24, Z
    3192:	80 62       	ori	r24, 0x20	; 32
    3194:	80 83       	st	Z, r24
    3196:	05 c0       	rjmp	.+10     	; 0x31a2 <micPowerMangementPowerReductionTimerCounter0+0x1a>
    3198:	e4 e6       	ldi	r30, 0x64	; 100
    319a:	f0 e0       	ldi	r31, 0x00	; 0
    319c:	80 81       	ld	r24, Z
    319e:	8f 7d       	andi	r24, 0xDF	; 223
    31a0:	80 83       	st	Z, r24
	return o_success;
}
    31a2:	81 e0       	ldi	r24, 0x01	; 1
    31a4:	08 95       	ret

000031a6 <micPowerMangementPowerReductionUSART1>:

//set the PRUSART1: Power Reduction USART1
Boolean micPowerMangementPowerReductionUSART1 ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PRR0,PRUSART1,enable);
    31a6:	88 23       	and	r24, r24
    31a8:	31 f0       	breq	.+12     	; 0x31b6 <micPowerMangementPowerReductionUSART1+0x10>
    31aa:	e4 e6       	ldi	r30, 0x64	; 100
    31ac:	f0 e0       	ldi	r31, 0x00	; 0
    31ae:	80 81       	ld	r24, Z
    31b0:	80 61       	ori	r24, 0x10	; 16
    31b2:	80 83       	st	Z, r24
    31b4:	05 c0       	rjmp	.+10     	; 0x31c0 <micPowerMangementPowerReductionUSART1+0x1a>
    31b6:	e4 e6       	ldi	r30, 0x64	; 100
    31b8:	f0 e0       	ldi	r31, 0x00	; 0
    31ba:	80 81       	ld	r24, Z
    31bc:	8f 7e       	andi	r24, 0xEF	; 239
    31be:	80 83       	st	Z, r24
	return o_success;
}
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	08 95       	ret

000031c4 <micPowerMangementPowerReductionTimerCounter1>:

//set the PRTIM2: Power Reduction Timer/Counter1
Boolean micPowerMangementPowerReductionTimerCounter1 ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PRR0,PRTIM1,enable);
    31c4:	88 23       	and	r24, r24
    31c6:	31 f0       	breq	.+12     	; 0x31d4 <micPowerMangementPowerReductionTimerCounter1+0x10>
    31c8:	e4 e6       	ldi	r30, 0x64	; 100
    31ca:	f0 e0       	ldi	r31, 0x00	; 0
    31cc:	80 81       	ld	r24, Z
    31ce:	88 60       	ori	r24, 0x08	; 8
    31d0:	80 83       	st	Z, r24
    31d2:	05 c0       	rjmp	.+10     	; 0x31de <micPowerMangementPowerReductionTimerCounter1+0x1a>
    31d4:	e4 e6       	ldi	r30, 0x64	; 100
    31d6:	f0 e0       	ldi	r31, 0x00	; 0
    31d8:	80 81       	ld	r24, Z
    31da:	87 7f       	andi	r24, 0xF7	; 247
    31dc:	80 83       	st	Z, r24
	return o_success;
}
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	08 95       	ret

000031e2 <micPowerMangementPowerReductionSPI>:

//set the PRSPI: Power Reduction Serial Peripheral Interface
Boolean micPowerMangementPowerReductionSPI ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PRR0,PRSPI,enable);
    31e2:	88 23       	and	r24, r24
    31e4:	31 f0       	breq	.+12     	; 0x31f2 <micPowerMangementPowerReductionSPI+0x10>
    31e6:	e4 e6       	ldi	r30, 0x64	; 100
    31e8:	f0 e0       	ldi	r31, 0x00	; 0
    31ea:	80 81       	ld	r24, Z
    31ec:	84 60       	ori	r24, 0x04	; 4
    31ee:	80 83       	st	Z, r24
    31f0:	05 c0       	rjmp	.+10     	; 0x31fc <micPowerMangementPowerReductionSPI+0x1a>
    31f2:	e4 e6       	ldi	r30, 0x64	; 100
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	80 81       	ld	r24, Z
    31f8:	8b 7f       	andi	r24, 0xFB	; 251
    31fa:	80 83       	st	Z, r24
	return o_success;
}
    31fc:	81 e0       	ldi	r24, 0x01	; 1
    31fe:	08 95       	ret

00003200 <micPowerMangementPowerReductionUSART0>:

//set the PRUSART1: Power Reduction USART0
Boolean micPowerMangementPowerReductionUSART0 ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PRR0,PRUSART0,enable);
    3200:	88 23       	and	r24, r24
    3202:	31 f0       	breq	.+12     	; 0x3210 <micPowerMangementPowerReductionUSART0+0x10>
    3204:	e4 e6       	ldi	r30, 0x64	; 100
    3206:	f0 e0       	ldi	r31, 0x00	; 0
    3208:	80 81       	ld	r24, Z
    320a:	82 60       	ori	r24, 0x02	; 2
    320c:	80 83       	st	Z, r24
    320e:	05 c0       	rjmp	.+10     	; 0x321a <micPowerMangementPowerReductionUSART0+0x1a>
    3210:	e4 e6       	ldi	r30, 0x64	; 100
    3212:	f0 e0       	ldi	r31, 0x00	; 0
    3214:	80 81       	ld	r24, Z
    3216:	8d 7f       	andi	r24, 0xFD	; 253
    3218:	80 83       	st	Z, r24
	return o_success;
}
    321a:	81 e0       	ldi	r24, 0x01	; 1
    321c:	08 95       	ret

0000321e <micPowerMangementPowerReductionADC>:

//set the PRADC: Power Reduction ADC
Boolean micPowerMangementPowerReductionADC ( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(PRR0,PRADC,enable);
    321e:	88 23       	and	r24, r24
    3220:	31 f0       	breq	.+12     	; 0x322e <micPowerMangementPowerReductionADC+0x10>
    3222:	e4 e6       	ldi	r30, 0x64	; 100
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	80 81       	ld	r24, Z
    3228:	81 60       	ori	r24, 0x01	; 1
    322a:	80 83       	st	Z, r24
    322c:	05 c0       	rjmp	.+10     	; 0x3238 <micPowerMangementPowerReductionADC+0x1a>
    322e:	e4 e6       	ldi	r30, 0x64	; 100
    3230:	f0 e0       	ldi	r31, 0x00	; 0
    3232:	80 81       	ld	r24, Z
    3234:	8e 7f       	andi	r24, 0xFE	; 254
    3236:	80 83       	st	Z, r24
	return o_success;
    3238:	81 e0       	ldi	r24, 0x01	; 1
    323a:	08 95       	ret

0000323c <micSystemClockOscillatorCalibrationValue>:
//set the CAL7:0: Oscillator Calibration Value
Boolean micSystemClockOscillatorCalibrationValue( Int8U osccal_value ) 
{
	Boolean o_success = TRUE;
	
	OSCCAL = osccal_value;
    323c:	80 93 66 00 	sts	0x0066, r24
	return o_success;
}
    3240:	81 e0       	ldi	r24, 0x01	; 1
    3242:	08 95       	ret

00003244 <micSystemClockPrescalerChangeEnable>:

//set the CLKPCE: Clock Prescaler Change Enable
Boolean micSystemClockPrescalerChangeEnable( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(CLKPR,CLKPCE,enable);
    3244:	88 23       	and	r24, r24
    3246:	31 f0       	breq	.+12     	; 0x3254 <micSystemClockPrescalerChangeEnable+0x10>
    3248:	e1 e6       	ldi	r30, 0x61	; 97
    324a:	f0 e0       	ldi	r31, 0x00	; 0
    324c:	80 81       	ld	r24, Z
    324e:	80 68       	ori	r24, 0x80	; 128
    3250:	80 83       	st	Z, r24
    3252:	05 c0       	rjmp	.+10     	; 0x325e <micSystemClockPrescalerChangeEnable+0x1a>
    3254:	e1 e6       	ldi	r30, 0x61	; 97
    3256:	f0 e0       	ldi	r31, 0x00	; 0
    3258:	80 81       	ld	r24, Z
    325a:	8f 77       	andi	r24, 0x7F	; 127
    325c:	80 83       	st	Z, r24
	return o_success;
}
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	08 95       	ret

00003262 <micSystemClockPrescalerSelectBits>:

//set the CLKPS3:0: Clock Prescaler Select Bits 3 - 0
Boolean micSystemClockPrescalerSelectBits( SystemClockPrescaler prescaler_value ) 
{
	Boolean o_success = TRUE;
	CLKPR |= (prescaler_value & 0x0F);
    3262:	e1 e6       	ldi	r30, 0x61	; 97
    3264:	f0 e0       	ldi	r31, 0x00	; 0
    3266:	90 81       	ld	r25, Z
    3268:	8f 70       	andi	r24, 0x0F	; 15
    326a:	98 2b       	or	r25, r24
    326c:	90 83       	st	Z, r25
	return o_success;
}
    326e:	81 e0       	ldi	r24, 0x01	; 1
    3270:	08 95       	ret

00003272 <micSystemControlMasterControlUnitJtagResetFlag>:

//get the JTRF: JTAG Reset Flag
Boolean micSystemControlMasterControlUnitJtagResetFlag( void ) 
{
	Boolean o_success;
	o_success = (MCUSR & JTRF) >> JTRF;
    3272:	84 b7       	in	r24, 0x34	; 52
	return o_success;
}
    3274:	80 e0       	ldi	r24, 0x00	; 0
    3276:	08 95       	ret

00003278 <micSystemControlMasterControlUnitWatchdogResetFlag>:

//get the WDRF: Watchdog Reset Flag
Boolean micSystemControlMasterControlUnitWatchdogResetFlag( void ) 
{
	Boolean o_success;
	o_success = (MCUSR & WDRF) >> WDRF;
    3278:	84 b7       	in	r24, 0x34	; 52
	return o_success;
}
    327a:	80 e0       	ldi	r24, 0x00	; 0
    327c:	08 95       	ret

0000327e <micSystemControlMasterControlUnitBrownOutResetFlag>:

//get the BORF: Brown-out Reset Flag
Boolean micSystemControlMasterControlUnitBrownOutResetFlag( void ) 
{
	Boolean o_success;
	o_success = (MCUSR & BORF) >> BORF;
    327e:	84 b7       	in	r24, 0x34	; 52
	return o_success;
}
    3280:	80 e0       	ldi	r24, 0x00	; 0
    3282:	08 95       	ret

00003284 <micSystemControlMasterControlUnitExternalResetFlag>:

//get the EXTRF: External Reset Flag
Boolean micSystemControlMasterControlUnitExternalResetFlag( void ) 
{
	Boolean o_success;
	o_success = (MCUSR & JTRF) >> JTRF;
    3284:	84 b7       	in	r24, 0x34	; 52
	return o_success;
}
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	08 95       	ret

0000328a <micSystemControlMasterControlUnitPowerOnResetFlag>:

//get the PORF: Power-on Reset Flag
Boolean micSystemControlMasterControlUnitPowerOnResetFlag( void ) 
{
	Boolean o_success;
	o_success = (MCUSR & PORF) >> PORF;
    328a:	84 b7       	in	r24, 0x34	; 52
	return o_success;
}
    328c:	80 e0       	ldi	r24, 0x00	; 0
    328e:	08 95       	ret

00003290 <micSystemControlWatchdogTimerControlWatchdogFlag>:

//get the WDIF: Watchdog Interrupt Flag
Boolean micSystemControlWatchdogTimerControlWatchdogFlag( void ) 
{
	Boolean o_success;
	o_success = (WDTCSR & WDIF) >> WDIF;
    3290:	80 91 60 00 	lds	r24, 0x0060
	return o_success;
}
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	08 95       	ret

00003298 <micSystemControlWatchdogTimerControlWatchdogInterruptEnable>:

//set the WDIE: Watchdog Interrupt Enable
Boolean micSystemControlWatchdogTimerControlWatchdogInterruptEnable( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(WDTCSR,WDIE,enable);
    3298:	88 23       	and	r24, r24
    329a:	31 f0       	breq	.+12     	; 0x32a8 <micSystemControlWatchdogTimerControlWatchdogInterruptEnable+0x10>
    329c:	e0 e6       	ldi	r30, 0x60	; 96
    329e:	f0 e0       	ldi	r31, 0x00	; 0
    32a0:	80 81       	ld	r24, Z
    32a2:	80 64       	ori	r24, 0x40	; 64
    32a4:	80 83       	st	Z, r24
    32a6:	05 c0       	rjmp	.+10     	; 0x32b2 <micSystemControlWatchdogTimerControlWatchdogInterruptEnable+0x1a>
    32a8:	e0 e6       	ldi	r30, 0x60	; 96
    32aa:	f0 e0       	ldi	r31, 0x00	; 0
    32ac:	80 81       	ld	r24, Z
    32ae:	8f 7b       	andi	r24, 0xBF	; 191
    32b0:	80 83       	st	Z, r24
	return o_success;
}
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	08 95       	ret

000032b6 <micSystemControlWatchdogTimerControlWatchdogChangeEnable>:

//get the WDCE: Watchdog Change Enable
Boolean micSystemControlWatchdogTimerControlWatchdogChangeEnable( void ) 
{
	Boolean o_success;
	o_success = (WDTCSR & WDCE) >> WDCE;
    32b6:	80 91 60 00 	lds	r24, 0x0060
	return o_success;
}
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	08 95       	ret

000032be <micSystemControlWatchdogTimerControlWatchdogSystemResetEnable>:

//set the WDE: Watchdog System Reset Enable
Boolean micSystemControlWatchdogTimerControlWatchdogSystemResetEnable( Boolean enable ) 
{
	Boolean o_success = TRUE;
	BIT_SET(WDTCSR,WDE,enable);
    32be:	88 23       	and	r24, r24
    32c0:	31 f0       	breq	.+12     	; 0x32ce <micSystemControlWatchdogTimerControlWatchdogSystemResetEnable+0x10>
    32c2:	e0 e6       	ldi	r30, 0x60	; 96
    32c4:	f0 e0       	ldi	r31, 0x00	; 0
    32c6:	80 81       	ld	r24, Z
    32c8:	88 60       	ori	r24, 0x08	; 8
    32ca:	80 83       	st	Z, r24
    32cc:	05 c0       	rjmp	.+10     	; 0x32d8 <micSystemControlWatchdogTimerControlWatchdogSystemResetEnable+0x1a>
    32ce:	e0 e6       	ldi	r30, 0x60	; 96
    32d0:	f0 e0       	ldi	r31, 0x00	; 0
    32d2:	80 81       	ld	r24, Z
    32d4:	87 7f       	andi	r24, 0xF7	; 247
    32d6:	80 83       	st	Z, r24
	return o_success;
}
    32d8:	81 e0       	ldi	r24, 0x01	; 1
    32da:	08 95       	ret

000032dc <micSystemControlWatchdogTimerControlWatchdogTimerPrescaler>:

//set the WDP3:0: Watchdog Timer Prescaler 3, 2, 1 and 0
Boolean micSystemControlWatchdogTimerControlWatchdogTimerPrescaler( ESystemWatchdogPrescaler prescaler_value ) 
{
	Boolean o_success = TRUE;
	WDTCSR |= prescaler_value;
    32dc:	e0 e6       	ldi	r30, 0x60	; 96
    32de:	f0 e0       	ldi	r31, 0x00	; 0
    32e0:	90 81       	ld	r25, Z
    32e2:	89 2b       	or	r24, r25
    32e4:	80 83       	st	Z, r24
	return o_success;
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	08 95       	ret

000032ea <micTimer0CompareMatchOutputAMode>:

//set the COM0A1:0: Compare Match Output A Mode
Boolean micTimer0CompareMatchOutputAMode( ETimer0CompareMatchOutputAMode mode ) 
{
	Boolean o_success = TRUE;
	TCCR0A = ( TCCR0A & ~( ( 1U << COM0A1 ) | ( 1U << COM0A0 ) ) ) |
    32ea:	94 b5       	in	r25, 0x24	; 36
    32ec:	80 7c       	andi	r24, 0xC0	; 192
    32ee:	9f 73       	andi	r25, 0x3F	; 63
    32f0:	98 2b       	or	r25, r24
    32f2:	94 bd       	out	0x24, r25	; 36
             ( mode   &  ( ( 1U << COM0A1 ) | ( 1U << COM0A0 ) ) );
	return o_success;
}
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	08 95       	ret

000032f8 <micTimer0CompareMatchOutputBMode>:

//set the COM0B1:0: Compare Match Output B Mode
Boolean micTimer0CompareMatchOutputBMode( ETimer0CompareMatchOutputBMode mode ) 
{
	Boolean o_success = TRUE;
	TCCR0B = ( TCCR0B & ~( ( 1U << COM0B1 ) | ( 1U << COM0B0 ) ) ) |
    32f8:	95 b5       	in	r25, 0x25	; 37
    32fa:	80 73       	andi	r24, 0x30	; 48
    32fc:	9f 7c       	andi	r25, 0xCF	; 207
    32fe:	98 2b       	or	r25, r24
    3300:	95 bd       	out	0x25, r25	; 37
             ( mode   &  ( ( 1U << COM0B1 ) | ( 1U << COM0B0 ) ) );
	return o_success;
}
    3302:	81 e0       	ldi	r24, 0x01	; 1
    3304:	08 95       	ret

00003306 <micTimer0WaveformGenerationMode>:

//set the WGM01:0: Waveform Generation Mode
Boolean micTimer0WaveformGenerationMode( ETimer0GeneratorMode mode ) 
{
	Boolean o_success = TRUE;
	BIT_SET(TCCR0A , WGM00,( mode & ( 1U << WGM00 ) ) );
    3306:	80 ff       	sbrs	r24, 0
    3308:	04 c0       	rjmp	.+8      	; 0x3312 <micTimer0WaveformGenerationMode+0xc>
    330a:	94 b5       	in	r25, 0x24	; 36
    330c:	91 60       	ori	r25, 0x01	; 1
    330e:	94 bd       	out	0x24, r25	; 36
    3310:	03 c0       	rjmp	.+6      	; 0x3318 <micTimer0WaveformGenerationMode+0x12>
    3312:	94 b5       	in	r25, 0x24	; 36
    3314:	9e 7f       	andi	r25, 0xFE	; 254
    3316:	94 bd       	out	0x24, r25	; 36
	BIT_SET(TCCR0A , WGM01,( mode & ( 1U << WGM01 ) ) >> 1U );
    3318:	81 ff       	sbrs	r24, 1
    331a:	04 c0       	rjmp	.+8      	; 0x3324 <micTimer0WaveformGenerationMode+0x1e>
    331c:	94 b5       	in	r25, 0x24	; 36
    331e:	92 60       	ori	r25, 0x02	; 2
    3320:	94 bd       	out	0x24, r25	; 36
    3322:	03 c0       	rjmp	.+6      	; 0x332a <micTimer0WaveformGenerationMode+0x24>
    3324:	94 b5       	in	r25, 0x24	; 36
    3326:	9d 7f       	andi	r25, 0xFD	; 253
    3328:	94 bd       	out	0x24, r25	; 36
	BIT_SET(TCCR0B , WGM02,( mode & ( 1U << WGM02 ) ) >> 2U );
    332a:	83 ff       	sbrs	r24, 3
    332c:	04 c0       	rjmp	.+8      	; 0x3336 <micTimer0WaveformGenerationMode+0x30>
    332e:	85 b5       	in	r24, 0x25	; 37
    3330:	88 60       	ori	r24, 0x08	; 8
    3332:	85 bd       	out	0x25, r24	; 37
    3334:	03 c0       	rjmp	.+6      	; 0x333c <micTimer0WaveformGenerationMode+0x36>
    3336:	85 b5       	in	r24, 0x25	; 37
    3338:	87 7f       	andi	r24, 0xF7	; 247
    333a:	85 bd       	out	0x25, r24	; 37
	
	return o_success;
}
    333c:	81 e0       	ldi	r24, 0x01	; 1
    333e:	08 95       	ret

00003340 <micTimer0ForceOutputCompareA>:

//set the FOC0A: Force Output Compare A
Boolean micTimer0ForceOutputCompareA( ETimer0ForceCompare mode ) 
{
	Boolean o_success = TRUE;
	TCCR0B |= mode & ( ( 1U << FOC0B ) | ( 1U << FOC0A ) );
    3340:	95 b5       	in	r25, 0x25	; 37
    3342:	80 7c       	andi	r24, 0xC0	; 192
    3344:	98 2b       	or	r25, r24
    3346:	95 bd       	out	0x25, r25	; 37
	return o_success;
}
    3348:	81 e0       	ldi	r24, 0x01	; 1
    334a:	08 95       	ret

0000334c <micTimer0SetClockDivision>:

//set the CS02:0: Clock Select
void micTimer0SetClockDivision( ETimer0Clock clock_div )
{
	TCCR0B = ( TCCR0B    & ~( ( 1U << CS02 ) | ( 1U << CS01 ) | ( 1U << CS00 ) ) ) |
    334c:	95 b5       	in	r25, 0x25	; 37
    334e:	87 70       	andi	r24, 0x07	; 7
    3350:	98 7f       	andi	r25, 0xF8	; 248
    3352:	98 2b       	or	r25, r24
    3354:	95 bd       	out	0x25, r25	; 37
             ( clock_div &  ( ( 1U << CS02 ) | ( 1U << CS01 ) | ( 1U << CS00 ) ) );
}
    3356:	08 95       	ret

00003358 <micTimer0SetTimerCounterRegister>:

//set the TCNT0 Timer/Counter Register
void micTimer0SetTimerCounterRegister( Int8U tcnt0 )
{
	TCNT0 = tcnt0 ;
    3358:	86 bd       	out	0x26, r24	; 38
}
    335a:	08 95       	ret

0000335c <micTimer0GetTimerCounterRegister>:

//Get the TCNT0 Timer/Counter Register
Int8U micTimer0GetTimerCounterRegister( void )
{
	return TCNT0 ;
    335c:	86 b5       	in	r24, 0x26	; 38
}
    335e:	08 95       	ret

00003360 <micTimer0SetOutputCompareRegisterA>:

//set the OCR0A Output Compare Register A
void micTimer0SetOutputCompareRegisterA( Int8U ocr0a )
{
	OCR0A = ocr0a ;
    3360:	87 bd       	out	0x27, r24	; 39
}
    3362:	08 95       	ret

00003364 <micTimer0GetOutputCompareRegisterA>:

//Get the OCR0A Output Compare Register A
Int8U micTimer0GetOutputCompareRegisterA( void )
{
	return OCR0A ;
    3364:	87 b5       	in	r24, 0x27	; 39
}
    3366:	08 95       	ret

00003368 <micTimer0SetOutputCompareRegisterB>:

//set the OCR0A Output Compare Register B
void micTimer0SetOutputCompareRegisterB( Int8U ocr0b )
{
	OCR0B = ocr0b ;
    3368:	88 bd       	out	0x28, r24	; 40
}
    336a:	08 95       	ret

0000336c <micTimer0GetOutputCompareRegisterB>:

//Get the OCR0A Output Compare Register B
Int8U micTimer0GetOutputCompareRegisterB( void )
{
	return OCR0B ;
    336c:	88 b5       	in	r24, 0x28	; 40
}
    336e:	08 95       	ret

00003370 <micTimer0SetTimerCounterInterrupt>:

//set the TIMSK0 Timer/Counter Interrupt Mask Register
void micTimer0SetTimerCounterInterrupt( ETimer0Interrupts it )
{
	TIMSK0 |= ( it & ( ( 1U << OCIE0B ) | ( 1U << OCIE0A ) | ( 1U << TOIE0 ) ) );
    3370:	ee e6       	ldi	r30, 0x6E	; 110
    3372:	f0 e0       	ldi	r31, 0x00	; 0
    3374:	90 81       	ld	r25, Z
    3376:	87 70       	andi	r24, 0x07	; 7
    3378:	98 2b       	or	r25, r24
    337a:	90 83       	st	Z, r25
}
    337c:	08 95       	ret

0000337e <micTimer0ClearTimerCounterInterrupt>:

//Clear the TIMSK0 Timer/Counter Interrupt Unmask Register
void micTimer0ClearTimerCounterInterrupt( ETimer0Interrupts it )
{
	TIMSK0 &= ~ ( it & ( ( 1U << OCIE0B ) | ( 1U << OCIE0A ) | ( 1U << TOIE0 ) ) );
    337e:	ee e6       	ldi	r30, 0x6E	; 110
    3380:	f0 e0       	ldi	r31, 0x00	; 0
    3382:	90 81       	ld	r25, Z
    3384:	87 70       	andi	r24, 0x07	; 7
    3386:	80 95       	com	r24
    3388:	98 23       	and	r25, r24
    338a:	90 83       	st	Z, r25
}
    338c:	08 95       	ret

0000338e <micTimer0ClearTimerCounterInterruptFlagRegister>:

//Clear the TIFR0 Timer/Counter 0 Interrupt Flag Register
void micTimer0ClearTimerCounterInterruptFlagRegister( ETimer0Flags flag )
{
	TIMSK0 &= ~ ( flag & ( ( 1U << OCF0B ) | ( 1U << OCF0A ) | ( 1U << TOV0 ) ) );
    338e:	ee e6       	ldi	r30, 0x6E	; 110
    3390:	f0 e0       	ldi	r31, 0x00	; 0
    3392:	90 81       	ld	r25, Z
    3394:	87 70       	andi	r24, 0x07	; 7
    3396:	80 95       	com	r24
    3398:	98 23       	and	r25, r24
    339a:	90 83       	st	Z, r25
    339c:	08 95       	ret

0000339e <micUsart0SetIODataRegister>:

//set the UDRn  USART I/O Data Register 0
Boolean micUsart0SetIODataRegister( Int8U udr0 ) 
{
	Boolean o_success = TRUE;
	UDR0 = udr0;
    339e:	80 93 c6 00 	sts	0x00C6, r24
	return o_success;
}
    33a2:	81 e0       	ldi	r24, 0x01	; 1
    33a4:	08 95       	ret

000033a6 <micUsart1SetIODataRegister>:
//set the UDRn  USART I/O Data Register 1
Boolean micUsart1SetIODataRegister( Int8U udr1 ) 
{
	Boolean o_success = TRUE;
	UDR1 = udr1;
    33a6:	80 93 ce 00 	sts	0x00CE, r24
	return o_success;
}
    33aa:	81 e0       	ldi	r24, 0x01	; 1
    33ac:	08 95       	ret

000033ae <micUsart0GetIODataRegister>:

//Get the UDRn  USART I/O Data Register 0
Int8U micUsart0GetIODataRegister( void ) 
{
	return UDR0 ;
    33ae:	80 91 c6 00 	lds	r24, 0x00C6
}
    33b2:	08 95       	ret

000033b4 <micUsart1GetIODataRegister>:
//Get the UDRn  USART I/O Data Register 1
Int8U micUsart1GetIODataRegister( void ) 
{
	return UDR1 ;
    33b4:	80 91 ce 00 	lds	r24, 0x00CE
}
    33b8:	08 95       	ret

000033ba <micUsart0GetRegisterEmpty>:

//Get the UDREn: USART Data Register Empty
Boolean micUsart0GetRegisterEmpty( void )
{
  return ( UCSR0A & (1U << UDRE0 ) );
    33ba:	80 91 c0 00 	lds	r24, 0x00C0
}
    33be:	80 72       	andi	r24, 0x20	; 32
    33c0:	08 95       	ret

000033c2 <micUsart1GetRegisterEmpty>:
//Get the UDREn: USART Data Register Empty
Boolean micUsart1GetRegisterEmpty( void )
{
  return ( UCSR1A & (1U << UDRE1 ) );
    33c2:	80 91 c8 00 	lds	r24, 0x00C8
}
    33c6:	80 72       	andi	r24, 0x20	; 32
    33c8:	08 95       	ret

000033ca <micUsart0GetError>:

//Get the Error bits -> Framing, Data Overrun and Parity
EUsartError micUsart0GetError( void )
{ 
  return ( UCSR0A & ( ( 1U << FE0 ) | ( 1U << DOR0 ) | ( 1U << UPE0 ) ) );
    33ca:	80 91 c0 00 	lds	r24, 0x00C0
}
    33ce:	8c 71       	andi	r24, 0x1C	; 28
    33d0:	08 95       	ret

000033d2 <micUsart1GetError>:
//Get the Error bits -> Framing, Data Overrun and Parity
EUsartError micUsart1GetError( void )
{ 
  return ( UCSR1A & ( ( 1U << FE1 ) | ( 1U << DOR1 ) | ( 1U << UPE1 ) ) );
    33d2:	80 91 c8 00 	lds	r24, 0x00C8
}
    33d6:	8c 71       	andi	r24, 0x1C	; 28
    33d8:	08 95       	ret

000033da <micUsart0SetSpeedMode>:

//Set the U2Xn: Double the USART Transmission Speed
void micUsart0SetSpeedMode( EUsartSpeedMode mode )
{
	if( mode == E_USART_SPEED_NORMAL )
    33da:	88 23       	and	r24, r24
    33dc:	29 f4       	brne	.+10     	; 0x33e8 <micUsart0SetSpeedMode+0xe>
	{
		UCSR0A &= ~mode;
    33de:	e0 ec       	ldi	r30, 0xC0	; 192
    33e0:	f0 e0       	ldi	r31, 0x00	; 0
    33e2:	80 81       	ld	r24, Z
    33e4:	80 83       	st	Z, r24
    33e6:	08 95       	ret
	}
	else
	{
		UCSR0A |= mode;
    33e8:	e0 ec       	ldi	r30, 0xC0	; 192
    33ea:	f0 e0       	ldi	r31, 0x00	; 0
    33ec:	90 81       	ld	r25, Z
    33ee:	89 2b       	or	r24, r25
    33f0:	80 83       	st	Z, r24
    33f2:	08 95       	ret

000033f4 <micUsart1SetSpeedMode>:
	}		
}
//Set the U2Xn: Double the USART Transmission Speed
void micUsart1SetSpeedMode( EUsartSpeedMode mode )
{
	if( mode == E_USART_SPEED_NORMAL )
    33f4:	88 23       	and	r24, r24
    33f6:	29 f4       	brne	.+10     	; 0x3402 <micUsart1SetSpeedMode+0xe>
	{
		UCSR1A &= ~mode;
    33f8:	e8 ec       	ldi	r30, 0xC8	; 200
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	80 81       	ld	r24, Z
    33fe:	80 83       	st	Z, r24
    3400:	08 95       	ret
	}
	else
	{
		UCSR1A |= mode;
    3402:	e8 ec       	ldi	r30, 0xC8	; 200
    3404:	f0 e0       	ldi	r31, 0x00	; 0
    3406:	90 81       	ld	r25, Z
    3408:	89 2b       	or	r24, r25
    340a:	80 83       	st	Z, r24
    340c:	08 95       	ret

0000340e <micUsart0GetSpeedMode>:
}

//Get the U2Xn: Double the USART Transmission Speed
EUsartSpeedMode micUsart0GetSpeedMode( void )
{
	return ( UCSR0A & ( 1U << U2X0 ) );	
    340e:	80 91 c0 00 	lds	r24, 0x00C0
}
    3412:	82 70       	andi	r24, 0x02	; 2
    3414:	08 95       	ret

00003416 <micUsart1GetSpeedMode>:
//Get the U2Xn: Double the USART Transmission Speed
EUsartSpeedMode micUsart1GetSpeedMode( void )
{
	return ( UCSR1A & ( 1U << U2X1 ) );	
    3416:	80 91 c8 00 	lds	r24, 0x00C8
}
    341a:	82 70       	andi	r24, 0x02	; 2
    341c:	08 95       	ret

0000341e <micUsart0SetMultiProcessorMode>:

//Set the MPCMn: Multi-processor Communication Mode
Boolean micUsart0SetMultiProcessorMode( void )
{
	Boolean o_success = TRUE;
	UCSR0A = UCSR0A | ( 1U << MPCM0);
    341e:	e0 ec       	ldi	r30, 0xC0	; 192
    3420:	f0 e0       	ldi	r31, 0x00	; 0
    3422:	80 81       	ld	r24, Z
    3424:	81 60       	ori	r24, 0x01	; 1
    3426:	80 83       	st	Z, r24
	return o_success;
}
    3428:	81 e0       	ldi	r24, 0x01	; 1
    342a:	08 95       	ret

0000342c <micUsart1SetMultiProcessorMode>:
//Set the MPCMn: Multi-processor Communication Mode
Boolean micUsart1SetMultiProcessorMode( void )
{
	Boolean o_success = TRUE;
	UCSR1A = UCSR1A | ( 1U << MPCM1);
    342c:	e8 ec       	ldi	r30, 0xC8	; 200
    342e:	f0 e0       	ldi	r31, 0x00	; 0
    3430:	80 81       	ld	r24, Z
    3432:	81 60       	ori	r24, 0x01	; 1
    3434:	80 83       	st	Z, r24
	return o_success;
}
    3436:	81 e0       	ldi	r24, 0x01	; 1
    3438:	08 95       	ret

0000343a <micUsart0GetMultiProcessorMode>:

//Get the MPCMn: Multi-processor Communication Mode
Boolean micUsart0GetMultiProcessorMode( void )
{
	return ( UCSR0A & ( 1U << MPCM0 ) );
    343a:	80 91 c0 00 	lds	r24, 0x00C0
}
    343e:	81 70       	andi	r24, 0x01	; 1
    3440:	08 95       	ret

00003442 <micUsart1GetMultiProcessorMode>:
//Get the MPCMn: Multi-processor Communication Mode
Boolean micUsart1GetMultiProcessorMode( void )
{
	return ( UCSR1A & ( 1U << MPCM1 ) );
    3442:	80 91 c8 00 	lds	r24, 0x00C8
}
    3446:	81 70       	andi	r24, 0x01	; 1
    3448:	08 95       	ret

0000344a <micUsart0GetReceiptCompleted>:

//Get the RXCn: USART Receive Complete
Boolean micUsart0GetReceiptCompleted(void)
{
  return ( UCSR0A & ( 1U << RXC0 ) );
    344a:	80 91 c0 00 	lds	r24, 0x00C0
}
    344e:	80 78       	andi	r24, 0x80	; 128
    3450:	08 95       	ret

00003452 <micUsart1GetReceiptCompleted>:
//Get the RXCn: USART Receive Complete
Boolean micUsart1GetReceiptCompleted(void)
{
  return ( UCSR1A & ( 1U << RXC1 ) );
    3452:	80 91 c8 00 	lds	r24, 0x00C8
}
    3456:	80 78       	andi	r24, 0x80	; 128
    3458:	08 95       	ret

0000345a <micUsart0SetTransmitCompleted>:

//Set the TXCn: USART Transmit Complete
Boolean micUsart0SetTransmitCompleted(void)
{
	Boolean o_success = TRUE;
	UCSR0A |= ( 1U << TXC0);
    345a:	e0 ec       	ldi	r30, 0xC0	; 192
    345c:	f0 e0       	ldi	r31, 0x00	; 0
    345e:	80 81       	ld	r24, Z
    3460:	80 64       	ori	r24, 0x40	; 64
    3462:	80 83       	st	Z, r24
	return o_success;
}
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	08 95       	ret

00003468 <micUsart1SetTransmitCompleted>:
//Set the TXCn: USART Transmit Complete
Boolean micUsart1SetTransmitCompleted(void)
{
	Boolean o_success = TRUE;
	UCSR1A |= ( 1U << TXC1);
    3468:	e8 ec       	ldi	r30, 0xC8	; 200
    346a:	f0 e0       	ldi	r31, 0x00	; 0
    346c:	80 81       	ld	r24, Z
    346e:	80 64       	ori	r24, 0x40	; 64
    3470:	80 83       	st	Z, r24
	return o_success;
}
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	08 95       	ret

00003476 <micUsart0GetTransmitCompleted>:

//Get the TXCn: USART Transmit Complete
Boolean micUsart0GetTransmitCompleted(void)
{
  return ( UCSR0A & ( 1U << TXC0 ) );
    3476:	80 91 c0 00 	lds	r24, 0x00C0
}
    347a:	80 74       	andi	r24, 0x40	; 64
    347c:	08 95       	ret

0000347e <micUsart1GetTransmitCompleted>:
//Get the TXCn: USART Transmit Complete
Boolean micUsart1GetTransmitCompleted(void)
{
  return ( UCSR1A & ( 1U << TXC1 ) );
    347e:	80 91 c8 00 	lds	r24, 0x00C8
}
    3482:	80 74       	andi	r24, 0x40	; 64
    3484:	08 95       	ret

00003486 <micUsart0GetDataRegisterEmpty>:

//Get the UDREn: USART Data Register Empty
Boolean micUsart0GetDataRegisterEmpty(void)
{
  return ( UCSR0A & ( 1U << UDRE0 ) );
    3486:	80 91 c0 00 	lds	r24, 0x00C0
}
    348a:	80 72       	andi	r24, 0x20	; 32
    348c:	08 95       	ret

0000348e <micUsart1GetDataRegisterEmpty>:
//Get the UDREn: USART Data Register Empty
Boolean micUsart1GetDataRegisterEmpty(void)
{
  return ( UCSR1A & ( 1U << UDRE1 ) );
    348e:	80 91 c8 00 	lds	r24, 0x00C8
}
    3492:	80 72       	andi	r24, 0x20	; 32
    3494:	08 95       	ret

00003496 <micUsart0SetTransmitterEnable>:

//Set the TXENn: Transmitter Enable 0
Boolean micUsart0SetTransmitterEnable( void )
{
	Boolean o_success = TRUE;
	UCSR0B = UCSR0B | ( 1U << TXEN0);
    3496:	e1 ec       	ldi	r30, 0xC1	; 193
    3498:	f0 e0       	ldi	r31, 0x00	; 0
    349a:	80 81       	ld	r24, Z
    349c:	88 60       	ori	r24, 0x08	; 8
    349e:	80 83       	st	Z, r24
	return o_success;
}
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	08 95       	ret

000034a4 <micUsart1SetTransmitterEnable>:
//Set the TXENn: Transmitter Enable 0
Boolean micUsart1SetTransmitterEnable( void )
{
	Boolean o_success = TRUE;
	UCSR1B = UCSR1B | ( 1U << TXEN1);
    34a4:	e9 ec       	ldi	r30, 0xC9	; 201
    34a6:	f0 e0       	ldi	r31, 0x00	; 0
    34a8:	80 81       	ld	r24, Z
    34aa:	88 60       	ori	r24, 0x08	; 8
    34ac:	80 83       	st	Z, r24
	return o_success;
}
    34ae:	81 e0       	ldi	r24, 0x01	; 1
    34b0:	08 95       	ret

000034b2 <micUsart0SetTransmitterDisable>:

//Set the TXENn: Transmitter Disable 0
Boolean micUsart0SetTransmitterDisable( void )
{
	Boolean o_success = TRUE;
	UCSR0B &= ~( 1U << TXEN0 );
    34b2:	e1 ec       	ldi	r30, 0xC1	; 193
    34b4:	f0 e0       	ldi	r31, 0x00	; 0
    34b6:	80 81       	ld	r24, Z
    34b8:	87 7f       	andi	r24, 0xF7	; 247
    34ba:	80 83       	st	Z, r24
	return o_success;
}
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	08 95       	ret

000034c0 <micUsart1SetTransmitterDisable>:
//Set the TXENn: Transmitter Disable 0
Boolean micUsart1SetTransmitterDisable( void )
{
	Boolean o_success = TRUE;
	UCSR1B &= ~( 1U << TXEN1 );
    34c0:	e9 ec       	ldi	r30, 0xC9	; 201
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	87 7f       	andi	r24, 0xF7	; 247
    34c8:	80 83       	st	Z, r24
	return o_success;
}
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	08 95       	ret

000034ce <micUsart0SetReceiverEnable>:

//Set the RXENn: Receiver Enable 0
Boolean micUsart0SetReceiverEnable( void )
{
	Boolean o_success = TRUE;
	UCSR0B = UCSR0B | ( 1U << RXEN0);
    34ce:	e1 ec       	ldi	r30, 0xC1	; 193
    34d0:	f0 e0       	ldi	r31, 0x00	; 0
    34d2:	80 81       	ld	r24, Z
    34d4:	80 61       	ori	r24, 0x10	; 16
    34d6:	80 83       	st	Z, r24
	return o_success;
}
    34d8:	81 e0       	ldi	r24, 0x01	; 1
    34da:	08 95       	ret

000034dc <micUsart1SetReceiverEnable>:
//Set the RXENn: Receiver Enable 0
Boolean micUsart1SetReceiverEnable( void )
{
	Boolean o_success = TRUE;
	UCSR1B = UCSR1B | ( 1U << RXEN1);
    34dc:	e9 ec       	ldi	r30, 0xC9	; 201
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	80 81       	ld	r24, Z
    34e2:	80 61       	ori	r24, 0x10	; 16
    34e4:	80 83       	st	Z, r24
	return o_success;
}
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	08 95       	ret

000034ea <micUsart0SetReceiverDisable>:

//Set the RXENn: Receiver Disable 0
Boolean micUsart0SetReceiverDisable( void )
{
	Boolean o_success = TRUE;
	UCSR0B &= ~( 1U << RXEN0 );
    34ea:	e1 ec       	ldi	r30, 0xC1	; 193
    34ec:	f0 e0       	ldi	r31, 0x00	; 0
    34ee:	80 81       	ld	r24, Z
    34f0:	8f 7e       	andi	r24, 0xEF	; 239
    34f2:	80 83       	st	Z, r24
	return o_success;
}
    34f4:	81 e0       	ldi	r24, 0x01	; 1
    34f6:	08 95       	ret

000034f8 <micUsart1SetReceiverDisable>:
//Set the RXENn: Receiver Disable 0
Boolean micUsart1SetReceiverDisable( void )
{
	Boolean o_success = TRUE;
	UCSR1B &= ~( 1U << RXEN1 );
    34f8:	e9 ec       	ldi	r30, 0xC9	; 201
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	80 81       	ld	r24, Z
    34fe:	8f 7e       	andi	r24, 0xEF	; 239
    3500:	80 83       	st	Z, r24
	return o_success;
}
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	08 95       	ret

00003506 <micUsart0SetDataSize>:

//Set the UCSZn : Character Size n
Boolean micUsart0SetDataSize( EUsartDataSize data_size )
{
	Boolean o_success = TRUE;
	UCSR0B = ( UCSR0B & ~(1U << UCSZ02)) |
    3506:	e1 ec       	ldi	r30, 0xC1	; 193
    3508:	f0 e0       	ldi	r31, 0x00	; 0
    350a:	90 81       	ld	r25, Z
    350c:	28 2f       	mov	r18, r24
    350e:	24 70       	andi	r18, 0x04	; 4
    3510:	9b 7f       	andi	r25, 0xFB	; 251
    3512:	92 2b       	or	r25, r18
    3514:	90 83       	st	Z, r25
			( data_size & (1U << UCSZ02));

	UCSR0C = ( UCSR0C & ~((1U << UCSZ01) | (1U << UCSZ00))) |
    3516:	e2 ec       	ldi	r30, 0xC2	; 194
    3518:	f0 e0       	ldi	r31, 0x00	; 0
    351a:	90 81       	ld	r25, Z
			( (Int8U)(data_size << 1U) & ((1U << UCSZ01) | (1U << UCSZ00)));
    351c:	88 0f       	add	r24, r24
{
	Boolean o_success = TRUE;
	UCSR0B = ( UCSR0B & ~(1U << UCSZ02)) |
			( data_size & (1U << UCSZ02));

	UCSR0C = ( UCSR0C & ~((1U << UCSZ01) | (1U << UCSZ00))) |
    351e:	86 70       	andi	r24, 0x06	; 6
    3520:	99 7f       	andi	r25, 0xF9	; 249
    3522:	89 2b       	or	r24, r25
    3524:	80 83       	st	Z, r24
			( (Int8U)(data_size << 1U) & ((1U << UCSZ01) | (1U << UCSZ00)));
	return o_success;
}
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	08 95       	ret

0000352a <micUsart1SetDataSize>:
//Set the UCSZn : Character Size n
Boolean micUsart1SetDataSize( EUsartDataSize data_size )
{
	Boolean o_success = TRUE;
	UCSR1B = ( UCSR1B & ~(1U << UCSZ12)) |
    352a:	e9 ec       	ldi	r30, 0xC9	; 201
    352c:	f0 e0       	ldi	r31, 0x00	; 0
    352e:	90 81       	ld	r25, Z
    3530:	28 2f       	mov	r18, r24
    3532:	24 70       	andi	r18, 0x04	; 4
    3534:	9b 7f       	andi	r25, 0xFB	; 251
    3536:	92 2b       	or	r25, r18
    3538:	90 83       	st	Z, r25
			( data_size & (1U << UCSZ12));

	UCSR1C = ( UCSR1C & ~((1U << UCSZ11) | (1U << UCSZ10))) |
    353a:	ea ec       	ldi	r30, 0xCA	; 202
    353c:	f0 e0       	ldi	r31, 0x00	; 0
    353e:	90 81       	ld	r25, Z
			( (Int8U)(data_size << 1U) & ((1U << UCSZ11) | (1U << UCSZ10)));
    3540:	88 0f       	add	r24, r24
{
	Boolean o_success = TRUE;
	UCSR1B = ( UCSR1B & ~(1U << UCSZ12)) |
			( data_size & (1U << UCSZ12));

	UCSR1C = ( UCSR1C & ~((1U << UCSZ11) | (1U << UCSZ10))) |
    3542:	86 70       	andi	r24, 0x06	; 6
    3544:	99 7f       	andi	r25, 0xF9	; 249
    3546:	89 2b       	or	r24, r25
    3548:	80 83       	st	Z, r24
			( (Int8U)(data_size << 1U) & ((1U << UCSZ11) | (1U << UCSZ10)));
	return o_success;
}
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	08 95       	ret

0000354e <micUsart0SetParityMode>:

//Set the UPMn1:0: Parity Mode
Boolean micUsart0SetParityMode( EUsartParityMode parity_mode )
{
	Boolean o_success = TRUE;
	UCSR0C = (UCSR0C & ~((1U << UPM01) | (1U << UPM00))) |
    354e:	e2 ec       	ldi	r30, 0xC2	; 194
    3550:	f0 e0       	ldi	r31, 0x00	; 0
    3552:	90 81       	ld	r25, Z
    3554:	80 73       	andi	r24, 0x30	; 48
    3556:	9f 7c       	andi	r25, 0xCF	; 207
    3558:	98 2b       	or	r25, r24
    355a:	90 83       	st	Z, r25
			(parity_mode & ((1U << UPM01) | (1U << UPM00)));
	return o_success;
}
    355c:	81 e0       	ldi	r24, 0x01	; 1
    355e:	08 95       	ret

00003560 <micUsart1SetParityMode>:
//Set the UPMn1:0: Parity Mode
Boolean micUsart1SetParityMode( EUsartParityMode parity_mode )
{
	Boolean o_success = TRUE;
	UCSR1C = (UCSR1C & ~((1U << UPM11) | (1U << UPM10))) |
    3560:	ea ec       	ldi	r30, 0xCA	; 202
    3562:	f0 e0       	ldi	r31, 0x00	; 0
    3564:	90 81       	ld	r25, Z
    3566:	80 73       	andi	r24, 0x30	; 48
    3568:	9f 7c       	andi	r25, 0xCF	; 207
    356a:	98 2b       	or	r25, r24
    356c:	90 83       	st	Z, r25
			(parity_mode & ((1U << UPM11) | (1U << UPM10)));
	return o_success;
}
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	08 95       	ret

00003572 <micUsart0SetStopBits>:

//Set the USBSn: Stop Bit Select
Boolean micUsart0SetStopBits( EUsartStopBits stop_bits)
{
	Boolean o_success = TRUE;
	UCSR0C = (UCSR0C & ~(1U << USBS0)) |
    3572:	e2 ec       	ldi	r30, 0xC2	; 194
    3574:	f0 e0       	ldi	r31, 0x00	; 0
    3576:	90 81       	ld	r25, Z
    3578:	88 70       	andi	r24, 0x08	; 8
    357a:	97 7f       	andi	r25, 0xF7	; 247
    357c:	98 2b       	or	r25, r24
    357e:	90 83       	st	Z, r25
			(stop_bits & (1U << USBS0));
	return o_success;
}
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	08 95       	ret

00003584 <micUsart1SetStopBits>:
//Set the USBSn: Stop Bit Select
Boolean micUsart1SetStopBits( EUsartStopBits stop_bits)
{
	Boolean o_success = TRUE;
	UCSR1C = (UCSR1C & ~(1U << USBS1)) |
    3584:	ea ec       	ldi	r30, 0xCA	; 202
    3586:	f0 e0       	ldi	r31, 0x00	; 0
    3588:	90 81       	ld	r25, Z
    358a:	88 70       	andi	r24, 0x08	; 8
    358c:	97 7f       	andi	r25, 0xF7	; 247
    358e:	98 2b       	or	r25, r24
    3590:	90 83       	st	Z, r25
			(stop_bits & (1U << USBS1));
	return o_success;
}
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	08 95       	ret

00003596 <micUsart0SetRxInterrupt>:

//Set RXCIEn: RX Complete Interrupt Enable 0
Boolean micUsart0SetRxInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR0B |= (1U << RXCIE0);
    3596:	e1 ec       	ldi	r30, 0xC1	; 193
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	80 81       	ld	r24, Z
    359c:	80 68       	ori	r24, 0x80	; 128
    359e:	80 83       	st	Z, r24

	return o_success;
}
    35a0:	81 e0       	ldi	r24, 0x01	; 1
    35a2:	08 95       	ret

000035a4 <micUsart1SetRxInterrupt>:
//Set RXCIEn: RX Complete Interrupt Enable 0
Boolean micUsart1SetRxInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR1B |= (1U << RXCIE1);
    35a4:	e9 ec       	ldi	r30, 0xC9	; 201
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	80 81       	ld	r24, Z
    35aa:	80 68       	ori	r24, 0x80	; 128
    35ac:	80 83       	st	Z, r24

	return o_success;
}
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	08 95       	ret

000035b2 <micUsart0ClearRxInterrupt>:

//Clear RXCIEn: RX Complete Interrupt Enable 0
Boolean micUsart0ClearRxInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR0B &= ~(1U << RXCIE0);
    35b2:	e1 ec       	ldi	r30, 0xC1	; 193
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	80 81       	ld	r24, Z
    35b8:	8f 77       	andi	r24, 0x7F	; 127
    35ba:	80 83       	st	Z, r24

	return o_success;
}
    35bc:	81 e0       	ldi	r24, 0x01	; 1
    35be:	08 95       	ret

000035c0 <micUsart1ClearRxInterrupt>:
//Clear RXCIEn: RX Complete Interrupt Enable 0
Boolean micUsart1ClearRxInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR1B &= ~(1U << RXCIE1);
    35c0:	e9 ec       	ldi	r30, 0xC9	; 201
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	80 81       	ld	r24, Z
    35c6:	8f 77       	andi	r24, 0x7F	; 127
    35c8:	80 83       	st	Z, r24

	return o_success;
}
    35ca:	81 e0       	ldi	r24, 0x01	; 1
    35cc:	08 95       	ret

000035ce <micUsart0SetTxInterrupt>:

//Set TXCIEn: TX Complete Interrupt Enable 0
Boolean micUsart0SetTxInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR0B |= (1U << TXCIE0);
    35ce:	e1 ec       	ldi	r30, 0xC1	; 193
    35d0:	f0 e0       	ldi	r31, 0x00	; 0
    35d2:	80 81       	ld	r24, Z
    35d4:	80 64       	ori	r24, 0x40	; 64
    35d6:	80 83       	st	Z, r24

	return o_success;
}
    35d8:	81 e0       	ldi	r24, 0x01	; 1
    35da:	08 95       	ret

000035dc <micUsart1SetTxInterrupt>:
//Set TXCIEn: TX Complete Interrupt Enable 0
Boolean micUsart1SetTxInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR1B |= (1U << TXCIE1);
    35dc:	e9 ec       	ldi	r30, 0xC9	; 201
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	80 64       	ori	r24, 0x40	; 64
    35e4:	80 83       	st	Z, r24

	return o_success;
}
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	08 95       	ret

000035ea <micUsart0ClearTxInterrupt>:

//Clear TXCIEn: TX Complete Interrupt Enable 0
Boolean micUsart0ClearTxInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR0B &= ~(1U << TXCIE0);
    35ea:	e1 ec       	ldi	r30, 0xC1	; 193
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	8f 7b       	andi	r24, 0xBF	; 191
    35f2:	80 83       	st	Z, r24

	return o_success;
}
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	08 95       	ret

000035f8 <micUsart1ClearTxInterrupt>:
//Clear TXCIEn: TX Complete Interrupt Enable 0
Boolean micUsart1ClearTxInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR1B &= ~(1U << TXCIE1);
    35f8:	e9 ec       	ldi	r30, 0xC9	; 201
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	8f 7b       	andi	r24, 0xBF	; 191
    3600:	80 83       	st	Z, r24

	return o_success;
}
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	08 95       	ret

00003606 <micUsart0SetDataRegisterEmptyInterrupt>:

//Set UDRIEn: USART Data Register Empty Interrupt Enable n
Boolean micUsart0SetDataRegisterEmptyInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR0B |= (1U << UDRIE0);
    3606:	e1 ec       	ldi	r30, 0xC1	; 193
    3608:	f0 e0       	ldi	r31, 0x00	; 0
    360a:	80 81       	ld	r24, Z
    360c:	80 62       	ori	r24, 0x20	; 32
    360e:	80 83       	st	Z, r24

	return o_success;
}
    3610:	81 e0       	ldi	r24, 0x01	; 1
    3612:	08 95       	ret

00003614 <micUsart1SetDataRegisterEmptyInterrupt>:
//Set UDRIEn: USART Data Register Empty Interrupt Enable n
Boolean micUsart1SetDataRegisterEmptyInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR1B |= (1U << UDRIE1);
    3614:	e9 ec       	ldi	r30, 0xC9	; 201
    3616:	f0 e0       	ldi	r31, 0x00	; 0
    3618:	80 81       	ld	r24, Z
    361a:	80 62       	ori	r24, 0x20	; 32
    361c:	80 83       	st	Z, r24

	return o_success;
}
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	08 95       	ret

00003622 <micUsart0ClearDataRegisterEmptyInterrupt>:

//Clear UDRIEn: USART Data Register Empty Interrupt Enable n
Boolean micUsart0ClearDataRegisterEmptyInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR0B &= ~(1U << UDRIE0);
    3622:	e1 ec       	ldi	r30, 0xC1	; 193
    3624:	f0 e0       	ldi	r31, 0x00	; 0
    3626:	80 81       	ld	r24, Z
    3628:	8f 7d       	andi	r24, 0xDF	; 223
    362a:	80 83       	st	Z, r24

	return o_success;
}
    362c:	81 e0       	ldi	r24, 0x01	; 1
    362e:	08 95       	ret

00003630 <micUsart1ClearDataRegisterEmptyInterrupt>:
//Clear UDRIEn: USART Data Register Empty Interrupt Enable n
Boolean micUsart1ClearDataRegisterEmptyInterrupt( void )
{
	Boolean o_success = TRUE;
	UCSR1B &= ~(1U << UDRIE1);
    3630:	e9 ec       	ldi	r30, 0xC9	; 201
    3632:	f0 e0       	ldi	r31, 0x00	; 0
    3634:	80 81       	ld	r24, Z
    3636:	8f 7d       	andi	r24, 0xDF	; 223
    3638:	80 83       	st	Z, r24

	return o_success;
}
    363a:	81 e0       	ldi	r24, 0x01	; 1
    363c:	08 95       	ret

0000363e <micUsart0SetSynchronousClockPolarity>:

//Set UCPOLn: Clock Polarity
Boolean micUsart0SetSynchronousClockPolarity( EUsartClockPolarity polarity )
{
	Boolean o_success = TRUE;
	UCSR0C = (UCSR0C & ~(1U << UCPOL0)) | (polarity & (1U << UCPOL0));
    363e:	e2 ec       	ldi	r30, 0xC2	; 194
    3640:	f0 e0       	ldi	r31, 0x00	; 0
    3642:	90 81       	ld	r25, Z
    3644:	81 70       	andi	r24, 0x01	; 1
    3646:	9e 7f       	andi	r25, 0xFE	; 254
    3648:	98 2b       	or	r25, r24
    364a:	90 83       	st	Z, r25
  
	return o_success;
}
    364c:	81 e0       	ldi	r24, 0x01	; 1
    364e:	08 95       	ret

00003650 <micUsart1SetSynchronousClockPolarity>:
//Set UCPOLn: Clock Polarity
Boolean micUsart1SetSynchronousClockPolarity( EUsartClockPolarity polarity )
{
	Boolean o_success = TRUE;
	UCSR1C = (UCSR1C & ~(1U << UCPOL1)) | (polarity & (1U << UCPOL1));
    3650:	ea ec       	ldi	r30, 0xCA	; 202
    3652:	f0 e0       	ldi	r31, 0x00	; 0
    3654:	90 81       	ld	r25, Z
    3656:	81 70       	andi	r24, 0x01	; 1
    3658:	9e 7f       	andi	r25, 0xFE	; 254
    365a:	98 2b       	or	r25, r24
    365c:	90 83       	st	Z, r25
  
	return o_success;
}
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	08 95       	ret

00003662 <micUsart0SetBaudRateAsynchronousNormalMode>:

//Set UBRRn: Baud Rate Asynchronous Normal mode (U2Xn = 0)
Boolean micUsart0SetBaudRateAsynchronousNormalMode( EUsartBaudRate baudrate )
{
    3662:	ef 92       	push	r14
    3664:	ff 92       	push	r15
    3666:	0f 93       	push	r16
    3668:	1f 93       	push	r17
    366a:	7b 01       	movw	r14, r22
    366c:	8c 01       	movw	r16, r24
	Boolean o_success = FALSE;
	
	if( FALSE == micUsart0GetMultiProcessorMode( ) )
    366e:	0e 94 1d 1a 	call	0x343a	; 0x343a <micUsart0GetMultiProcessorMode>
    3672:	88 23       	and	r24, r24
    3674:	21 f5       	brne	.+72     	; 0x36be <micUsart0SetBaudRateAsynchronousNormalMode+0x5c>
	{
		if( E_USART_SPEED_NORMAL == micUsart0GetSpeedMode( ) )
    3676:	0e 94 07 1a 	call	0x340e	; 0x340e <micUsart0GetSpeedMode>
    367a:	88 23       	and	r24, r24
    367c:	11 f5       	brne	.+68     	; 0x36c2 <micUsart0SetBaudRateAsynchronousNormalMode+0x60>
		{
			UBRR0 = ( CONF_FOSC_HZ / ( 16 * baudrate ) ) - 1 ; 
    367e:	ee 0c       	add	r14, r14
    3680:	ff 1c       	adc	r15, r15
    3682:	00 1f       	adc	r16, r16
    3684:	11 1f       	adc	r17, r17
    3686:	ee 0c       	add	r14, r14
    3688:	ff 1c       	adc	r15, r15
    368a:	00 1f       	adc	r16, r16
    368c:	11 1f       	adc	r17, r17
    368e:	a8 01       	movw	r20, r16
    3690:	97 01       	movw	r18, r14
    3692:	22 0f       	add	r18, r18
    3694:	33 1f       	adc	r19, r19
    3696:	44 1f       	adc	r20, r20
    3698:	55 1f       	adc	r21, r21
    369a:	22 0f       	add	r18, r18
    369c:	33 1f       	adc	r19, r19
    369e:	44 1f       	adc	r20, r20
    36a0:	55 1f       	adc	r21, r21
    36a2:	60 e0       	ldi	r22, 0x00	; 0
    36a4:	74 e2       	ldi	r23, 0x24	; 36
    36a6:	84 ef       	ldi	r24, 0xF4	; 244
    36a8:	90 e0       	ldi	r25, 0x00	; 0
    36aa:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
    36ae:	21 50       	subi	r18, 0x01	; 1
    36b0:	30 40       	sbci	r19, 0x00	; 0
    36b2:	30 93 c5 00 	sts	0x00C5, r19
    36b6:	20 93 c4 00 	sts	0x00C4, r18
			o_success = TRUE;
    36ba:	81 e0       	ldi	r24, 0x01	; 1
    36bc:	03 c0       	rjmp	.+6      	; 0x36c4 <micUsart0SetBaudRateAsynchronousNormalMode+0x62>
}

//Set UBRRn: Baud Rate Asynchronous Normal mode (U2Xn = 0)
Boolean micUsart0SetBaudRateAsynchronousNormalMode( EUsartBaudRate baudrate )
{
	Boolean o_success = FALSE;
    36be:	80 e0       	ldi	r24, 0x00	; 0
    36c0:	01 c0       	rjmp	.+2      	; 0x36c4 <micUsart0SetBaudRateAsynchronousNormalMode+0x62>
    36c2:	80 e0       	ldi	r24, 0x00	; 0
			o_success = TRUE;
		}
	}	
	
	return o_success;
}	
    36c4:	1f 91       	pop	r17
    36c6:	0f 91       	pop	r16
    36c8:	ff 90       	pop	r15
    36ca:	ef 90       	pop	r14
    36cc:	08 95       	ret

000036ce <micUsart1SetBaudRateAsynchronousNormalMode>:
//Set UBRRn: Baud Rate Asynchronous Normal mode (U2Xn = 0)
Boolean micUsart1SetBaudRateAsynchronousNormalMode( EUsartBaudRate baudrate )
{
    36ce:	ef 92       	push	r14
    36d0:	ff 92       	push	r15
    36d2:	0f 93       	push	r16
    36d4:	1f 93       	push	r17
    36d6:	7b 01       	movw	r14, r22
    36d8:	8c 01       	movw	r16, r24
	Boolean o_success = FALSE;
	
	if( FALSE == micUsart1GetMultiProcessorMode( ) )
    36da:	0e 94 21 1a 	call	0x3442	; 0x3442 <micUsart1GetMultiProcessorMode>
    36de:	88 23       	and	r24, r24
    36e0:	21 f5       	brne	.+72     	; 0x372a <micUsart1SetBaudRateAsynchronousNormalMode+0x5c>
	{
		if( E_USART_SPEED_NORMAL == micUsart1GetSpeedMode( ) )
    36e2:	0e 94 0b 1a 	call	0x3416	; 0x3416 <micUsart1GetSpeedMode>
    36e6:	88 23       	and	r24, r24
    36e8:	11 f5       	brne	.+68     	; 0x372e <micUsart1SetBaudRateAsynchronousNormalMode+0x60>
		{
			UBRR1 = ( CONF_FOSC_HZ / ( 16 * baudrate ) ) - 1 ; 
    36ea:	ee 0c       	add	r14, r14
    36ec:	ff 1c       	adc	r15, r15
    36ee:	00 1f       	adc	r16, r16
    36f0:	11 1f       	adc	r17, r17
    36f2:	ee 0c       	add	r14, r14
    36f4:	ff 1c       	adc	r15, r15
    36f6:	00 1f       	adc	r16, r16
    36f8:	11 1f       	adc	r17, r17
    36fa:	a8 01       	movw	r20, r16
    36fc:	97 01       	movw	r18, r14
    36fe:	22 0f       	add	r18, r18
    3700:	33 1f       	adc	r19, r19
    3702:	44 1f       	adc	r20, r20
    3704:	55 1f       	adc	r21, r21
    3706:	22 0f       	add	r18, r18
    3708:	33 1f       	adc	r19, r19
    370a:	44 1f       	adc	r20, r20
    370c:	55 1f       	adc	r21, r21
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	74 e2       	ldi	r23, 0x24	; 36
    3712:	84 ef       	ldi	r24, 0xF4	; 244
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
    371a:	21 50       	subi	r18, 0x01	; 1
    371c:	30 40       	sbci	r19, 0x00	; 0
    371e:	30 93 cd 00 	sts	0x00CD, r19
    3722:	20 93 cc 00 	sts	0x00CC, r18
			o_success = TRUE;
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	03 c0       	rjmp	.+6      	; 0x3730 <micUsart1SetBaudRateAsynchronousNormalMode+0x62>
	return o_success;
}	
//Set UBRRn: Baud Rate Asynchronous Normal mode (U2Xn = 0)
Boolean micUsart1SetBaudRateAsynchronousNormalMode( EUsartBaudRate baudrate )
{
	Boolean o_success = FALSE;
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	01 c0       	rjmp	.+2      	; 0x3730 <micUsart1SetBaudRateAsynchronousNormalMode+0x62>
    372e:	80 e0       	ldi	r24, 0x00	; 0
			o_success = TRUE;
		}
	}	
	
	return o_success;
}	
    3730:	1f 91       	pop	r17
    3732:	0f 91       	pop	r16
    3734:	ff 90       	pop	r15
    3736:	ef 90       	pop	r14
    3738:	08 95       	ret

0000373a <micUsart0SetBaudRateAsynchronousDoubleSpeedMode>:

//Set UBRRn: Baud Rate Asynchronous Double Speed mode (U2Xn = 1)
Boolean micUsart0SetBaudRateAsynchronousDoubleSpeedMode( EUsartBaudRate baudrate )
{	
    373a:	ef 92       	push	r14
    373c:	ff 92       	push	r15
    373e:	0f 93       	push	r16
    3740:	1f 93       	push	r17
    3742:	7b 01       	movw	r14, r22
    3744:	8c 01       	movw	r16, r24
	Boolean o_success = FALSE;
	
	if( FALSE == micUsart0GetMultiProcessorMode( ) )
    3746:	0e 94 1d 1a 	call	0x343a	; 0x343a <micUsart0GetMultiProcessorMode>
    374a:	88 23       	and	r24, r24
    374c:	01 f5       	brne	.+64     	; 0x378e <micUsart0SetBaudRateAsynchronousDoubleSpeedMode+0x54>
	{
		if( E_USART_SPEED_HIGH_SPEED == micUsart0GetSpeedMode( ) )
    374e:	0e 94 07 1a 	call	0x340e	; 0x340e <micUsart0GetSpeedMode>
    3752:	82 30       	cpi	r24, 0x02	; 2
    3754:	f1 f4       	brne	.+60     	; 0x3792 <micUsart0SetBaudRateAsynchronousDoubleSpeedMode+0x58>
		{
			UBRR0 = ( CONF_FOSC_HZ / ( 8 * baudrate ) ) - 1 ; 
    3756:	ee 0c       	add	r14, r14
    3758:	ff 1c       	adc	r15, r15
    375a:	00 1f       	adc	r16, r16
    375c:	11 1f       	adc	r17, r17
    375e:	ee 0c       	add	r14, r14
    3760:	ff 1c       	adc	r15, r15
    3762:	00 1f       	adc	r16, r16
    3764:	11 1f       	adc	r17, r17
    3766:	a8 01       	movw	r20, r16
    3768:	97 01       	movw	r18, r14
    376a:	22 0f       	add	r18, r18
    376c:	33 1f       	adc	r19, r19
    376e:	44 1f       	adc	r20, r20
    3770:	55 1f       	adc	r21, r21
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	74 e2       	ldi	r23, 0x24	; 36
    3776:	84 ef       	ldi	r24, 0xF4	; 244
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
    377e:	21 50       	subi	r18, 0x01	; 1
    3780:	30 40       	sbci	r19, 0x00	; 0
    3782:	30 93 c5 00 	sts	0x00C5, r19
    3786:	20 93 c4 00 	sts	0x00C4, r18
			o_success = TRUE;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	03 c0       	rjmp	.+6      	; 0x3794 <micUsart0SetBaudRateAsynchronousDoubleSpeedMode+0x5a>
}	

//Set UBRRn: Baud Rate Asynchronous Double Speed mode (U2Xn = 1)
Boolean micUsart0SetBaudRateAsynchronousDoubleSpeedMode( EUsartBaudRate baudrate )
{	
	Boolean o_success = FALSE;
    378e:	80 e0       	ldi	r24, 0x00	; 0
    3790:	01 c0       	rjmp	.+2      	; 0x3794 <micUsart0SetBaudRateAsynchronousDoubleSpeedMode+0x5a>
    3792:	80 e0       	ldi	r24, 0x00	; 0
		
		}	
	}
	
	return o_success;
}
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	08 95       	ret

0000379e <micUsart1SetBaudRateAsynchronousDoubleSpeedMode>:
//Set UBRRn: Baud Rate Asynchronous Double Speed mode (U2Xn = 1)
Boolean micUsart1SetBaudRateAsynchronousDoubleSpeedMode( EUsartBaudRate baudrate )
{	
    379e:	ef 92       	push	r14
    37a0:	ff 92       	push	r15
    37a2:	0f 93       	push	r16
    37a4:	1f 93       	push	r17
    37a6:	7b 01       	movw	r14, r22
    37a8:	8c 01       	movw	r16, r24
	Boolean o_success = FALSE;
	
	if( FALSE == micUsart1GetMultiProcessorMode( ) )
    37aa:	0e 94 21 1a 	call	0x3442	; 0x3442 <micUsart1GetMultiProcessorMode>
    37ae:	88 23       	and	r24, r24
    37b0:	01 f5       	brne	.+64     	; 0x37f2 <micUsart1SetBaudRateAsynchronousDoubleSpeedMode+0x54>
	{
		if( E_USART_SPEED_HIGH_SPEED == micUsart1GetSpeedMode( ) )
    37b2:	0e 94 0b 1a 	call	0x3416	; 0x3416 <micUsart1GetSpeedMode>
    37b6:	82 30       	cpi	r24, 0x02	; 2
    37b8:	f1 f4       	brne	.+60     	; 0x37f6 <micUsart1SetBaudRateAsynchronousDoubleSpeedMode+0x58>
		{
			UBRR1 = ( CONF_FOSC_HZ / ( 8 * baudrate ) ) - 1 ; 
    37ba:	ee 0c       	add	r14, r14
    37bc:	ff 1c       	adc	r15, r15
    37be:	00 1f       	adc	r16, r16
    37c0:	11 1f       	adc	r17, r17
    37c2:	ee 0c       	add	r14, r14
    37c4:	ff 1c       	adc	r15, r15
    37c6:	00 1f       	adc	r16, r16
    37c8:	11 1f       	adc	r17, r17
    37ca:	a8 01       	movw	r20, r16
    37cc:	97 01       	movw	r18, r14
    37ce:	22 0f       	add	r18, r18
    37d0:	33 1f       	adc	r19, r19
    37d2:	44 1f       	adc	r20, r20
    37d4:	55 1f       	adc	r21, r21
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	74 e2       	ldi	r23, 0x24	; 36
    37da:	84 ef       	ldi	r24, 0xF4	; 244
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
    37e2:	21 50       	subi	r18, 0x01	; 1
    37e4:	30 40       	sbci	r19, 0x00	; 0
    37e6:	30 93 cd 00 	sts	0x00CD, r19
    37ea:	20 93 cc 00 	sts	0x00CC, r18
			o_success = TRUE;
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	03 c0       	rjmp	.+6      	; 0x37f8 <micUsart1SetBaudRateAsynchronousDoubleSpeedMode+0x5a>
	return o_success;
}
//Set UBRRn: Baud Rate Asynchronous Double Speed mode (U2Xn = 1)
Boolean micUsart1SetBaudRateAsynchronousDoubleSpeedMode( EUsartBaudRate baudrate )
{	
	Boolean o_success = FALSE;
    37f2:	80 e0       	ldi	r24, 0x00	; 0
    37f4:	01 c0       	rjmp	.+2      	; 0x37f8 <micUsart1SetBaudRateAsynchronousDoubleSpeedMode+0x5a>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
		
		}	
	}
	
	return o_success;
}
    37f8:	1f 91       	pop	r17
    37fa:	0f 91       	pop	r16
    37fc:	ff 90       	pop	r15
    37fe:	ef 90       	pop	r14
    3800:	08 95       	ret

00003802 <micUsart0SetBaudRateSynchronousMasterMode>:

//Set UBRRn: Baud Rate Synchronous Master mode
Boolean micUsart0SetBaudRateSynchronousMasterMode( EUsartBaudRate baudrate )
{	
    3802:	ef 92       	push	r14
    3804:	ff 92       	push	r15
    3806:	0f 93       	push	r16
    3808:	1f 93       	push	r17
    380a:	7b 01       	movw	r14, r22
    380c:	8c 01       	movw	r16, r24
	Boolean o_success = FALSE;
	
	if( TRUE == micUsart0GetMultiProcessorMode( ) )
    380e:	0e 94 1d 1a 	call	0x343a	; 0x343a <micUsart0GetMultiProcessorMode>
    3812:	81 30       	cpi	r24, 0x01	; 1
    3814:	a1 f4       	brne	.+40     	; 0x383e <micUsart0SetBaudRateSynchronousMasterMode+0x3c>
	{
		UBRR0 = ( CONF_FOSC_HZ / ( 2 * baudrate ) ) - 1 ; 
    3816:	a8 01       	movw	r20, r16
    3818:	97 01       	movw	r18, r14
    381a:	22 0f       	add	r18, r18
    381c:	33 1f       	adc	r19, r19
    381e:	44 1f       	adc	r20, r20
    3820:	55 1f       	adc	r21, r21
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	74 e2       	ldi	r23, 0x24	; 36
    3826:	84 ef       	ldi	r24, 0xF4	; 244
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
    382e:	21 50       	subi	r18, 0x01	; 1
    3830:	30 40       	sbci	r19, 0x00	; 0
    3832:	30 93 c5 00 	sts	0x00C5, r19
    3836:	20 93 c4 00 	sts	0x00C4, r18
		o_success = TRUE;
    383a:	81 e0       	ldi	r24, 0x01	; 1
    383c:	01 c0       	rjmp	.+2      	; 0x3840 <micUsart0SetBaudRateSynchronousMasterMode+0x3e>
}

//Set UBRRn: Baud Rate Synchronous Master mode
Boolean micUsart0SetBaudRateSynchronousMasterMode( EUsartBaudRate baudrate )
{	
	Boolean o_success = FALSE;
    383e:	80 e0       	ldi	r24, 0x00	; 0
		UBRR0 = ( CONF_FOSC_HZ / ( 2 * baudrate ) ) - 1 ; 
		o_success = TRUE;
	}
	
	return o_success;
}
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	ef 90       	pop	r14
    3848:	08 95       	ret

0000384a <micUsart1SetBaudRateSynchronousMasterMode>:
//Set UBRRn: Baud Rate Synchronous Master mode
Boolean micUsart1SetBaudRateSynchronousMasterMode( EUsartBaudRate baudrate )
{	
    384a:	ef 92       	push	r14
    384c:	ff 92       	push	r15
    384e:	0f 93       	push	r16
    3850:	1f 93       	push	r17
    3852:	7b 01       	movw	r14, r22
    3854:	8c 01       	movw	r16, r24
	Boolean o_success = FALSE;
	
	if( TRUE == micUsart1GetMultiProcessorMode( ) )
    3856:	0e 94 21 1a 	call	0x3442	; 0x3442 <micUsart1GetMultiProcessorMode>
    385a:	81 30       	cpi	r24, 0x01	; 1
    385c:	a1 f4       	brne	.+40     	; 0x3886 <micUsart1SetBaudRateSynchronousMasterMode+0x3c>
	{
		UBRR1 = ( CONF_FOSC_HZ / ( 2 * baudrate ) ) - 1 ; 
    385e:	a8 01       	movw	r20, r16
    3860:	97 01       	movw	r18, r14
    3862:	22 0f       	add	r18, r18
    3864:	33 1f       	adc	r19, r19
    3866:	44 1f       	adc	r20, r20
    3868:	55 1f       	adc	r21, r21
    386a:	60 e0       	ldi	r22, 0x00	; 0
    386c:	74 e2       	ldi	r23, 0x24	; 36
    386e:	84 ef       	ldi	r24, 0xF4	; 244
    3870:	90 e0       	ldi	r25, 0x00	; 0
    3872:	0e 94 88 1c 	call	0x3910	; 0x3910 <__udivmodsi4>
    3876:	21 50       	subi	r18, 0x01	; 1
    3878:	30 40       	sbci	r19, 0x00	; 0
    387a:	30 93 cd 00 	sts	0x00CD, r19
    387e:	20 93 cc 00 	sts	0x00CC, r18
		o_success = TRUE;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <micUsart1SetBaudRateSynchronousMasterMode+0x3e>
	return o_success;
}
//Set UBRRn: Baud Rate Synchronous Master mode
Boolean micUsart1SetBaudRateSynchronousMasterMode( EUsartBaudRate baudrate )
{	
	Boolean o_success = FALSE;
    3886:	80 e0       	ldi	r24, 0x00	; 0
		UBRR1 = ( CONF_FOSC_HZ / ( 2 * baudrate ) ) - 1 ; 
		o_success = TRUE;
	}
	
	return o_success;
    3888:	1f 91       	pop	r17
    388a:	0f 91       	pop	r16
    388c:	ff 90       	pop	r15
    388e:	ef 90       	pop	r14
    3890:	08 95       	ret

00003892 <__mulsi3>:
    3892:	62 9f       	mul	r22, r18
    3894:	d0 01       	movw	r26, r0
    3896:	73 9f       	mul	r23, r19
    3898:	f0 01       	movw	r30, r0
    389a:	82 9f       	mul	r24, r18
    389c:	e0 0d       	add	r30, r0
    389e:	f1 1d       	adc	r31, r1
    38a0:	64 9f       	mul	r22, r20
    38a2:	e0 0d       	add	r30, r0
    38a4:	f1 1d       	adc	r31, r1
    38a6:	92 9f       	mul	r25, r18
    38a8:	f0 0d       	add	r31, r0
    38aa:	83 9f       	mul	r24, r19
    38ac:	f0 0d       	add	r31, r0
    38ae:	74 9f       	mul	r23, r20
    38b0:	f0 0d       	add	r31, r0
    38b2:	65 9f       	mul	r22, r21
    38b4:	f0 0d       	add	r31, r0
    38b6:	99 27       	eor	r25, r25
    38b8:	72 9f       	mul	r23, r18
    38ba:	b0 0d       	add	r27, r0
    38bc:	e1 1d       	adc	r30, r1
    38be:	f9 1f       	adc	r31, r25
    38c0:	63 9f       	mul	r22, r19
    38c2:	b0 0d       	add	r27, r0
    38c4:	e1 1d       	adc	r30, r1
    38c6:	f9 1f       	adc	r31, r25
    38c8:	bd 01       	movw	r22, r26
    38ca:	cf 01       	movw	r24, r30
    38cc:	11 24       	eor	r1, r1
    38ce:	08 95       	ret

000038d0 <__udivmodqi4>:
    38d0:	99 1b       	sub	r25, r25
    38d2:	79 e0       	ldi	r23, 0x09	; 9
    38d4:	04 c0       	rjmp	.+8      	; 0x38de <__udivmodqi4_ep>

000038d6 <__udivmodqi4_loop>:
    38d6:	99 1f       	adc	r25, r25
    38d8:	96 17       	cp	r25, r22
    38da:	08 f0       	brcs	.+2      	; 0x38de <__udivmodqi4_ep>
    38dc:	96 1b       	sub	r25, r22

000038de <__udivmodqi4_ep>:
    38de:	88 1f       	adc	r24, r24
    38e0:	7a 95       	dec	r23
    38e2:	c9 f7       	brne	.-14     	; 0x38d6 <__udivmodqi4_loop>
    38e4:	80 95       	com	r24
    38e6:	08 95       	ret

000038e8 <__udivmodhi4>:
    38e8:	aa 1b       	sub	r26, r26
    38ea:	bb 1b       	sub	r27, r27
    38ec:	51 e1       	ldi	r21, 0x11	; 17
    38ee:	07 c0       	rjmp	.+14     	; 0x38fe <__udivmodhi4_ep>

000038f0 <__udivmodhi4_loop>:
    38f0:	aa 1f       	adc	r26, r26
    38f2:	bb 1f       	adc	r27, r27
    38f4:	a6 17       	cp	r26, r22
    38f6:	b7 07       	cpc	r27, r23
    38f8:	10 f0       	brcs	.+4      	; 0x38fe <__udivmodhi4_ep>
    38fa:	a6 1b       	sub	r26, r22
    38fc:	b7 0b       	sbc	r27, r23

000038fe <__udivmodhi4_ep>:
    38fe:	88 1f       	adc	r24, r24
    3900:	99 1f       	adc	r25, r25
    3902:	5a 95       	dec	r21
    3904:	a9 f7       	brne	.-22     	; 0x38f0 <__udivmodhi4_loop>
    3906:	80 95       	com	r24
    3908:	90 95       	com	r25
    390a:	bc 01       	movw	r22, r24
    390c:	cd 01       	movw	r24, r26
    390e:	08 95       	ret

00003910 <__udivmodsi4>:
    3910:	a1 e2       	ldi	r26, 0x21	; 33
    3912:	1a 2e       	mov	r1, r26
    3914:	aa 1b       	sub	r26, r26
    3916:	bb 1b       	sub	r27, r27
    3918:	fd 01       	movw	r30, r26
    391a:	0d c0       	rjmp	.+26     	; 0x3936 <__udivmodsi4_ep>

0000391c <__udivmodsi4_loop>:
    391c:	aa 1f       	adc	r26, r26
    391e:	bb 1f       	adc	r27, r27
    3920:	ee 1f       	adc	r30, r30
    3922:	ff 1f       	adc	r31, r31
    3924:	a2 17       	cp	r26, r18
    3926:	b3 07       	cpc	r27, r19
    3928:	e4 07       	cpc	r30, r20
    392a:	f5 07       	cpc	r31, r21
    392c:	20 f0       	brcs	.+8      	; 0x3936 <__udivmodsi4_ep>
    392e:	a2 1b       	sub	r26, r18
    3930:	b3 0b       	sbc	r27, r19
    3932:	e4 0b       	sbc	r30, r20
    3934:	f5 0b       	sbc	r31, r21

00003936 <__udivmodsi4_ep>:
    3936:	66 1f       	adc	r22, r22
    3938:	77 1f       	adc	r23, r23
    393a:	88 1f       	adc	r24, r24
    393c:	99 1f       	adc	r25, r25
    393e:	1a 94       	dec	r1
    3940:	69 f7       	brne	.-38     	; 0x391c <__udivmodsi4_loop>
    3942:	60 95       	com	r22
    3944:	70 95       	com	r23
    3946:	80 95       	com	r24
    3948:	90 95       	com	r25
    394a:	9b 01       	movw	r18, r22
    394c:	ac 01       	movw	r20, r24
    394e:	bd 01       	movw	r22, r26
    3950:	cf 01       	movw	r24, r30
    3952:	08 95       	ret

00003954 <_exit>:
    3954:	f8 94       	cli

00003956 <__stop_program>:
    3956:	ff cf       	rjmp	.-2      	; 0x3956 <__stop_program>
